<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Andrés Gorzelany</title>
		<link>https://get-itips.capazero.net/</link>
		<description>Get-ITips</description>
		<copyright>2020</copyright>
		<pubDate>Thu, 05 Nov 2020 11:48:29 GMT</pubDate>
		<lastBuildDate>Thu, 05 Nov 2020 11:48:29 GMT</lastBuildDate>
		<item>
			<title>PnP Teams Cmdlets Review</title>
			<link>https://get-itips.capazero.net/posts/teams-pnp</link>
			<description>&lt;p&gt;&lt;img src="/images/TeamsPNP.png" class="img-fluid" alt="introimage"&gt;&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/teams-pnp</guid>
			<pubDate>Thu, 08 Oct 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="/images/TeamsPNP.png" class="img-fluid" alt="introimage" /&gt;&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;On July 2020, the great Community of &lt;a href="https://docs.microsoft.com/powershell/sharepoint/sharepoint-pnp/sharepoint-pnp-cmdlets?view=sharepoint-ps"&gt;SharePoint Patterns and Practices PowerShell&lt;/a&gt; released cmdlets to manage Microsoft Teams aspects, I have been using PnP cmdlets for SharePoint for a while and they are really powerfull and best of all, they are open sourced and community-maintained, so I was curious to try these Teams-related cmdlets.&lt;/p&gt;
&lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt;
&lt;h2 id="pnp-module-version"&gt;PnP Module Version&lt;/h2&gt;
&lt;p&gt;Be sure to be running the latest version of the SharePoint PnP PowerShell Online module, to this date, that is 3.25.2009.1.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_versionimage.png" class="img-fluid" alt="versionimage" /&gt;&lt;/p&gt;
&lt;p&gt;also, we can check, which commands are currently available for Teams related tasks running&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-Command -Module *PnP* -Name &amp;quot;*Teams*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and those are&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Add-PnPTeamsChannel                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Add-PnPTeamsTab                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Add-PnPTeamsTeam                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Add-PnPTeamsUser                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsApp                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsChannel                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsChannelMessage                         3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsTab                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsTeam                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsUser                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          New-PnPTeamsApp                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          New-PnPTeamsTeam                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          New-PnPTenantSequenceTeamSite                      3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsApp                                 3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsChannel                             3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsTab                                 3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsTeam                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsUser                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsChannel                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsTab                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsTeam                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsTeamArchivedState                      3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsTeamPicture                            3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Submit-PnPTeamsChannelMessage                      3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Sync-PnPAppToTeams                                 3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Update-PnPTeamsApp                                 3.25.20... SharePointPnPPowerShellOnline
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="graph-api-permissions"&gt;Graph API Permissions&lt;/h2&gt;
&lt;p&gt;To run any of those cmdlets, we will need special Graph API Permissions, thankfully, those are documented at Microsoft Docs, for example for the &lt;code&gt;Get-PnPTeamsTeam&lt;/code&gt; cmdlet:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_graphperm.png" class="img-fluid" alt="graphapipermission" /&gt;&lt;/p&gt;
&lt;p&gt;We will need either Group.Read.All or Group.ReadWrite.All.&lt;/p&gt;
&lt;h2 id="connecting-to-pnp-online"&gt;Connecting to PnP Online&lt;/h2&gt;
&lt;p&gt;If we try to use any &lt;em&gt;PnPTeams&lt;/em&gt; cmdlet without the required permissions we will receive an error like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-PnPTeamsTeam : Unable to retrieve a token for MicrosoftGraph. Ensure you connect using one of the
Connect-PnPOnline commands which uses the -ClientId argument or use Connect-PnPOnline -Scopes to connect.
At line:1 char:1
+ Get-PnPTeamsTeam
+ ~~~~~~~~~~~~~~~~
    + CategoryInfo          : ConnectionError: (:) [Get-PnPTeamsTeam], InvalidOperationException
    + FullyQualifiedErrorId : NO_OAUTH_TOKEN,PnP.PowerShell.Commands.Graph.GetTeamsTeam
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The error message is pretty clear, we must connect using the &lt;code&gt;-ClientId&lt;/code&gt; or  &lt;code&gt;-Scopes&lt;/code&gt;, this time, I will use the &lt;code&gt;-Scopes&lt;/code&gt; parameter, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Connect-PnPOnline -Scopes Group.ReadWrite.All
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first time that you run that cmdlet, you will be presented with the typical app consent window, to approve the use of the PnP Management Shell on your tenant, that is totally expected if you are used to work with the Graph API.&lt;/p&gt;
&lt;p&gt;Note that I used only one scope but you can specify more than one, for more information refer to the &lt;a href="https://docs.microsoft.com/powershell/module/sharepoint-pnp/connect-pnponline?view=sharepoint-ps"&gt;official documentation of the cmdlet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that we are connected, let's move on and test the Teams cmdlets, for a more detailed guide on how to connect there is an excellent &lt;a href="https://www.erwinmcm.com/pnp-teams-cmdlets/"&gt;blog post&lt;/a&gt; from Erwin van Hunen, one of the Maintainers of PnP PowerShell.&lt;/p&gt;
&lt;h1 id="the-teams-pnp-cmdlets"&gt;The Teams PnP cmdlets&lt;/h1&gt;
&lt;p&gt;Let's start with, what seems to be the most simple one &lt;code&gt;Get-PnPTeamsTeam&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_getteam.png" class="img-fluid" alt="getpnpteamsteam" /&gt;&lt;/p&gt;
&lt;p&gt;Hey, wait a minute, that looks familiar, yes, it is pretty similar output as if we would run &lt;code&gt;Get-Team&lt;/code&gt; using the &lt;a href="https://docs.microsoft.com/microsoftteams/teams-powershell-overview"&gt;Official Microsoft Teams PowerShell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Only when we ask for the members of the output object we identify differences in the output:&lt;/p&gt;
&lt;p&gt;For the PnP Module version&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS C:\&amp;gt; $teams[0] | Get-Member
   TypeName: PnP.PowerShell.Commands.Model.Teams.Team

Name              MemberType Definition
----              ---------- ----------
Equals            Method     bool Equals(System.Object obj)
GetHashCode       Method     int GetHashCode()
GetType           Method     type GetType()
ToString          Method     string ToString()
Apps              Property   System.Collections.Generic.List[PnP.PowerShell.Commands.Model.Teams.TeamAppInstance] Apps {get;}
Classification    Property   string Classification {get;set;}
CloneFrom         Property   string CloneFrom {get;set;}
Description       Property   string Description {get;set;}
DiscoverySettings Property   PnP.PowerShell.Commands.Model.Teams.TeamDiscoverySettings DiscoverySettings {get;set;}
DisplayName       Property   string DisplayName {get;set;}
FunSettings       Property   PnP.PowerShell.Commands.Model.Teams.TeamFunSettings FunSettings {get;set;}
GroupId           Property   string GroupId {get;set;}
GuestSettings     Property   PnP.PowerShell.Commands.Model.Teams.TeamGuestSettings GuestSettings {get;set;}
IsArchived        Property   System.Nullable[bool] IsArchived {get;set;}
MailNickname      Property   string MailNickname {get;set;}
MemberSettings    Property   PnP.PowerShell.Commands.Model.Teams.TeamMemberSettings MemberSettings {get;set;}
MessagingSettings Property   PnP.PowerShell.Commands.Model.Teams.TeamMessagingSettings MessagingSettings {get;set;}
Security          Property   PnP.PowerShell.Commands.Model.Teams.TeamSecurity Security {get;set;}
Specialization    Property   System.Nullable[PnP.PowerShell.Commands.Model.Teams.TeamSpecialization] Specialization {get;set;}
Visibility        Property   System.Nullable[PnP.PowerShell.Commands.Model.Teams.GroupVisibility] Visibility {get;set;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the Microsoft Teams PowerShell module&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS C:\&amp;gt; $teams[0] | Get-Member
   TypeName: Microsoft.TeamsCmdlets.PowerShell.Custom.Model.TeamSettings

Name                              MemberType Definition
----                              ---------- ----------
Equals                            Method     bool Equals(System.Object obj)
GetHashCode                       Method     int GetHashCode()
GetType                           Method     type GetType()
ToJsonString                      Method     string ToJsonString()
ToString                          Method     string ToString()
ToTeam                            Method     Microsoft.TeamsCmdlets.PowerShell.Custom.Model.Team ToTeam()
AllowAddRemoveApps                Property   System.Nullable[bool] AllowAddRemoveApps {get;set;}
AllowChannelMentions              Property   System.Nullable[bool] AllowChannelMentions {get;set;}
AllowCreateUpdateChannels         Property   System.Nullable[bool] AllowCreateUpdateChannels {get;set;}
AllowCreateUpdateRemoveConnectors Property   System.Nullable[bool] AllowCreateUpdateRemoveConnectors {get;set;}
AllowCreateUpdateRemoveTabs       Property   System.Nullable[bool] AllowCreateUpdateRemoveTabs {get;set;}
AllowCustomMemes                  Property   System.Nullable[bool] AllowCustomMemes {get;set;}
AllowDeleteChannels               Property   System.Nullable[bool] AllowDeleteChannels {get;set;}
AllowGiphy                        Property   System.Nullable[bool] AllowGiphy {get;set;}
AllowGuestCreateUpdateChannels    Property   System.Nullable[bool] AllowGuestCreateUpdateChannels {get;set;}
AllowGuestDeleteChannels          Property   System.Nullable[bool] AllowGuestDeleteChannels {get;set;}
AllowOwnerDeleteMessages          Property   System.Nullable[bool] AllowOwnerDeleteMessages {get;set;}
AllowStickersAndMemes             Property   System.Nullable[bool] AllowStickersAndMemes {get;set;}
AllowTeamMentions                 Property   System.Nullable[bool] AllowTeamMentions {get;set;}
AllowUserDeleteMessages           Property   System.Nullable[bool] AllowUserDeleteMessages {get;set;}
AllowUserEditMessages             Property   System.Nullable[bool] AllowUserEditMessages {get;set;}
Archived                          Property   System.Nullable[bool] Archived {get;set;}
Classification                    Property   string Classification {get;set;}
Description                       Property   string Description {get;set;}
DisplayName                       Property   string DisplayName {get;set;}
GiphyContentRating                Property   System.Nullable[Microsoft.TeamsCmdlets.PowerShell.Custom.Model.GiphyRatingType] GiphyCon...
GroupId                           Property   string GroupId {get;set;}
MailNickName                      Property   string MailNickName {get;set;}
ShowInTeamsSearchAndSuggestions   Property   System.Nullable[bool] ShowInTeamsSearchAndSuggestions {get;set;}
Visibility                        Property   string Visibility {get;set;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, under the hood, a lot of differences, and that is welcomed, why? because we will be able to have an alternative to the official Microsoft Teams PowerShell module in case this one runs short on something and best of all, these ones are &lt;a href="https://github.com/pnp/PnP-PowerShell/tree/master/Commands/Teams"&gt;open source&lt;/a&gt;, so if we want, we can dig into how they are developed and contribute to them.&lt;/p&gt;
&lt;p&gt;Let's try now some cmdlets that aren't available on the official Teams Module like &lt;code&gt;Get-PnPTeamsChannelMessage&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_getmessages.png" class="img-fluid" alt="getpnpteamschannelmessage" /&gt;&lt;/p&gt;
&lt;p&gt;Pretty neat, huh?&lt;/p&gt;
&lt;p&gt;Hey, look at this cmdlet, &lt;code&gt;Submit-PnPTeamsChannelMessage&lt;/code&gt;, can I post a message from PowerShell? Nice! Let's try it!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Submit-PnPTeamsChannelMessage -Team &amp;quot;Sales and Marketing&amp;quot; -Channel General -Message &amp;quot;Developers, Developers, Developers!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_postmessage.png" class="img-fluid" alt="getpnpteamschannelmessage" /&gt;&lt;/p&gt;
&lt;p&gt;Loved it!&lt;/p&gt;
&lt;p&gt;That's all for part 1 of these series, in part 2, I'll keep exploring what these cmdlets can provide to Teams Administrators.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Enable-CsOnlineSessionForReconnection... on Teams PowerShell 1.1.6</title>
			<link>https://get-itips.capazero.net/posts/s4b-reconnect-teams</link>
			<description>&lt;p&gt;&lt;img src="/images/TeamsS4BReconnect.png" class="img-fluid" alt="introimage"&gt;&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/s4b-reconnect-teams</guid>
			<pubDate>Thu, 17 Sep 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="/images/TeamsS4BReconnect.png" class="img-fluid" alt="introimage" /&gt;&lt;/p&gt;
&lt;p&gt;Microsoft has just released &lt;a href="https://www.powershellgallery.com/packages/MicrosoftTeams/1.1.6"&gt;Teams PowerShell module version 1.1.6&lt;/a&gt;, a version that includes the Skype for Business Online Connector built-in, so, it is a requirement to uninstall it, if you had it installed on your computer.&lt;/p&gt;
&lt;p&gt;Thanks to a great &lt;a href="https://twitter.com/AlexHolmeset"&gt;Alexander Holmeset&lt;/a&gt;'s heads-up, that identified that a very handy PowerShell cmdlet called  &lt;strong&gt;Enable-CsOnlineSessionForReconnection&lt;/strong&gt;, was not anymore present, I decided to investigate if we could get the functionality back, more information on this cmdlet on this &lt;a href="https://ucstatus.com/2019/11/25/skypeonlineconnector-session-reconnection/"&gt;excellent blog post&lt;/a&gt; by Randy Chapman, but essentially, it allows you to reconnect the Skype For Business session automatically when it time-outs after an hour.&lt;/p&gt;
&lt;p&gt;So I downloaded the Skype for Business Online Connector bits on another computer and tried to find where was it, finally found it inside C:\Program Files\Common Files\Skype for Business Online\Modules\SkypeOnlineConnector\SkypeOnlineConnectorStartup.psm1 and decided to give it a try &amp;quot;as is&amp;quot;, but it threw some errors and did not work as expected, so I realized I had to make some adjustments to it, specifically the way it recognizes if the module is already loaded.&lt;/p&gt;
&lt;p&gt;Here is the script, based on the original function, save it as Enable-CsOnlineSessionForReconnection.ps1&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$global:CsOnlineSessionInputParams=$UserCredential
$modules = Get-Module tmp_*
$csModuleUrl = &amp;quot;/OcsPowershellOAuth&amp;quot;
$isSfbPsModuleFound = $false;

    foreach ($module in $modules)
    {
        [string] $moduleUrl = $module.Description
        [int] $queryStringIndex = $moduleUrl.IndexOf(&amp;quot;?&amp;quot;)

        if ($queryStringIndex -gt 0)
        {
            $moduleUrl = $moduleUrl.SubString(0,$queryStringIndex)
        }

        if ($moduleUrl.Contains($csModuleUrl))
        {
            $isSfbPsModuleFound = $true
            &amp;amp; $module { ${function:Get-PSImplicitRemotingSession} = `
            {
                param(
                    [Parameter(Mandatory = $true, Position = 0)]
                    [string]
                    $commandName
                )

                if (($script:PSSession -eq $null) -or ($script:PSSession.Runspace.RunspaceStateInfo.State -ne 'Opened'))
                {
                    Set-PSImplicitRemotingSession `
                        (&amp;amp; $script:GetPSSession `
                            -InstanceId $script:PSSession.InstanceId.Guid `
                            -ErrorAction SilentlyContinue )
                }
                if (($script:PSSession -ne $null) -and ($script:PSSession.Runspace.RunspaceStateInfo.State -eq 'Disconnected'))
                {
                    # If we are handed a disconnected session, try re-connecting it before creating a new session.
                    Set-PSImplicitRemotingSession `
                        (&amp;amp; $script:ConnectPSSession `
                            -Session $script:PSSession `
                            -ErrorAction SilentlyContinue)
                }
                if (($script:PSSession -eq $null) -or ($script:PSSession.Runspace.RunspaceStateInfo.State -ne 'Opened'))
                {
                    Write-PSImplicitRemotingMessage ('Recreating a new remote powershell session (implicit) for command: &amp;quot;{0}&amp;quot; ...' -f $commandName)

                    if ((Test-Path variable:global:CsOnlineSessionInputParams) -ne $true)
                    {
                        throw 'Unable find input parameters from global scope, will not be able to recreate session'
                    }

                    if ((Test-Path variable:global:CsOnlineSessionRetryAttempt) -ne $true)
                    {
                        $global:CsOnlineSessionRetryAttempt = 1
                    }
                    else
                    {
                        $global:CsOnlineSessionRetryAttempt = $global:CsOnlineSessionRetryAttempt + 1
                    }

                    $session = New-CsOnlineSession -Credential &amp;#64;global:CsOnlineSessionInputParams

                    if ($session -ne $null)
                    {
                        Set-PSImplicitRemotingSession -CreatedByModule $true -PSSession $session
                    }

                    #note - this magic string has to be same as above, search for this string above, it will become clear
                    #because this will be in callback handler, I am not putting this into const variable
                    $sfbPsSessionPrefix = &amp;quot;SfBPowerShellSession_&amp;quot;
                    #sessions originally created will have the below one
                    $sfbPsSessionRegEx1 = $sfbPsSessionPrefix + &amp;quot;*&amp;quot;
                    #sessions created later will get their name changed by powershell during Set-PSImplicitRemotingSession
                    #and so it will have names like &amp;quot;Session for implicit remoting module at C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\tmp_tsdvdhga.20e\tmp_tsdvdhga.20e.psm1&amp;quot;
                    #tmp_tsdvdhga.20e being the module name
                    $sfbPsSessionRegEx2 = Get-PSImplicitRemotingModuleName
                    $sfbPsSessionRegEx2 = &amp;quot;*&amp;quot; + $sfbPsSessionRegEx2 + &amp;quot;*&amp;quot;
                    #delete broken sessions - begin
                    $psBroken = Get-PSSession | where-object {($_.Name -like $sfbPsSessionRegEx1 -or $_.Name -like $sfbPsSessionRegEx2) -and $_.State -like &amp;quot;*Broken*&amp;quot;}
                    $psClosed = Get-PSSession | where-object {($_.Name -like $sfbPsSessionRegEx1 -or $_.Name -like $sfbPsSessionRegEx2) -and $_.State -like &amp;quot;*Closed*&amp;quot;}

                    $psBroken | Remove-PSSession;
                    $psClosed | Remove-PSSession;
                    #delete broken sessions - end
                }
                if (($script:PSSession -eq $null) -or ($script:PSSession.Runspace.RunspaceStateInfo.State -ne 'Opened'))
                {
                    throw 'No session has been associated with this implicit remoting module'
                }

                return [Management.Automation.Runspaces.PSSession]$script:PSSession
            }}
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and use it like this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$userCredential = Get-Credential
#Connect to Microsoft Teams
Connect-MicrosoftTeams -Credential $credential

$sfbSession = New-CsOnlineSession -Credential $userCredential
Import-PsSession $sfbSession

.\Enable-CsOnlineSessionForReconnection.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should be enough for it to make it work as before, I tested it and it worked for me, please be aware that this is provided as is without any guarantee, let me know if it works four you!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Running Teams PowerShell GA module and Preview module side by side using WSL</title>
			<link>https://get-itips.capazero.net/posts/teams-preview-wsl</link>
			<description>&lt;p&gt;&lt;img src="/images/TeamsWSL.png" class="img-fluid" alt="introimage"&gt;&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/teams-preview-wsl</guid>
			<pubDate>Wed, 12 Aug 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="/images/TeamsWSL.png" class="img-fluid" alt="introimage" /&gt;&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is somewhat related to my last post, titled &lt;a href="https://get-itips.capazero.net/posts/teams-ps-for-pscore"&gt;Teams PowerShell module is now compatible with PowerShell Core!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a Docs contributor I have to constantly test a lot of PowerShell modules, specially, the Teams PowerShell module, and, as the line between the General Availability version and the Preview version of the module is a little blurry, users ask questions all the time, which feature, cmdlet or parameter is in which module version.&lt;/p&gt;
&lt;p&gt;I've been running an Azure VM installed with the Preview version of the PowerShell module, however it takes some time to start it, RDP into it and finally use the module, so I thought how awesome could be to run both versions of this PowerShell module on the same computer, as you can not do that natively in the same Operating System installation, I decided to take advantage of WSL (Windows Subsystem for Linux) to accomplish that.&lt;/p&gt;
&lt;h1 id="credits"&gt;Credits&lt;/h1&gt;
&lt;p&gt;I used several blog and Docs articles to get this working so this is mainly a post to summarize them all, I must give the credit to:&lt;/p&gt;
&lt;p&gt;Official Docs article located here &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Windows Subsystem for Linux Installation Guide for Windows 10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saggie Haim Blog article &lt;a href="https://www.saggiehaim.net/powershell/install-powershell-7-on-wsl-and-ubuntu/"&gt;Install PowerShell 7 On WSL and Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sebastiaan Dammann Blog article &lt;a href="https://damsteen.nl/blog/2018/08/29/installing-wsl-manually-on-non-system-drive"&gt;How-to: Installing WSL manually on a non-system drive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/unixterminal"&gt;Hayden Barnes&lt;/a&gt; for the Ubuntu 20.04 image link!&lt;/p&gt;
&lt;h1 id="install-wsl"&gt;Install WSL&lt;/h1&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart and set WSL2 as default WSL version&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;wsl --set-default-version 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you receive an error in this step &lt;em&gt;WSL 2 requires an update to its kernel component. For information please visit &lt;a href="https://aka.ms/wsl2kernel"&gt;https://aka.ms/wsl2kernel&lt;/a&gt;&lt;/em&gt; follow the steps outlined in that URL before continuing.&lt;/p&gt;
&lt;h1 id="install-linux-distribution-for-wsl"&gt;Install Linux Distribution for WSL&lt;/h1&gt;
&lt;p&gt;I didn't want the Linux installation to be on the System Drive so I created a folder on D: drive and CD into it for the next steps and also I chose Ubuntu 20.04-LTS as the Linux distro however you can choose whatever distro you like that is supported by PowerShell Core.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Invoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile D:\wsl\Ubuntu.appx -UseBasicParsing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This step will take some time to download the Linux distro, once it finishes, let's rename the downloaded image&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;cd D:\wsl\
Rename-Item .\Ubuntu.appx Ubuntu.zip
Expand-Archive .\Ubuntu.zip -Verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now let's install Ubuntu calling the setup binary&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;.\ubuntu2004.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will ask  you for a UNIX username, a password for it and if everything goes well you should see something like this as the setup will directly get you into the Linux virtual machine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Welcome to Ubuntu 20.04 LTS (GNU/Linux 4.19.104-microsoft-standard x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Aug 12 19:17:05 -03 2020

  System load:  1.67               Processes:             8
  Usage of /:   0.4% of 250.98GB   Users logged in:       0
  Memory usage: 1%                 IPv4 address for eth0: 172.26.225.227
  Swap usage:   0%

0 updates can be installed immediately.
0 of these updates are security updates.

yourUser&amp;#64;yourHostname: $
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not exit Ubuntu and run the next section inside of it.&lt;/p&gt;
&lt;h1 id="powershell-core-installation"&gt;PowerShell Core installation&lt;/h1&gt;
&lt;p&gt;Create a directory for PowerShell install and change to it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ sudo mkdir /usr/share/PowerShell
yourUser&amp;#64;yourHostname: $ cd /usr/share/PowerShell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's download the current stable release available (check &lt;a href="https://github.com/PowerShell/PowerShell/releases/"&gt;https://github.com/PowerShell/PowerShell/releases/&lt;/a&gt; for updated versions)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ sudo wget https://github.com/PowerShell/PowerShell/releases/download/v7.0.3/powershell-7.0.3-linux-x64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expand this archive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ sudo tar xzvf powershell-7.0.3-linux-x64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the PowerShell directory to the PATH environment variable&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ cd #HOME
yourUser&amp;#64;yourHostname: $ nano .profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add to the end&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PATH=&amp;quot;$PATH:/usr/share/PowerShell&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;save it and exit nano (at least it is not VIm!)&lt;/p&gt;
&lt;p&gt;exit Ubuntu&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ exit
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="microsoft-teams-preview-module-installation"&gt;Microsoft Teams Preview module installation&lt;/h1&gt;
&lt;p&gt;If you are like me and use Windows Terminal, it will automatically recognize the installation and add it to the available Shell options, in case you do not, fire up the Ubuntu 20-04 LTS WSL running&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;.\ubuntu2004.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ pwsh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;that should get you to PowerShell 7.0.3 on Linux, you should see&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PowerShell 7.0.3
Copyright (c) Microsoft Corporation. All rights reserved.

https://aka.ms/powershell
Type 'help' to get help.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now, let's install the currently most updated version of the Preview module (1.1.-3 preview at the time of writing this blog post but you can check &lt;a href="https://www.powershellgallery.com/packages/MicrosoftTeams/"&gt;https://www.powershellgallery.com/packages/MicrosoftTeams/&lt;/a&gt; for updates, remember, they have the -preview tag in the name)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS /mnt/c/Users/agorz&amp;gt; Install-Module MicrosoftTeams -AllowPrerelease -RequiredVersion 1.1.3-preview
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Accept the installation from an untrusted repository and if everything goes well, you should be able to use Teams PowerShell Preview as explained &lt;a href="https://get-itips.capazero.net/posts/teams-ps-for-pscore"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Teams PowerShell module is now compatible with PowerShell Core!</title>
			<link>https://get-itips.capazero.net/posts/teams-ps-for-pscore</link>
			<description>&lt;p&gt;Is it?, well, let's see.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/teams-ps-for-pscore</guid>
			<pubDate>Thu, 25 Jun 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Is it?, well, let's see.&lt;/p&gt;
&lt;p&gt;Support for PowerShell Core (AKA PowerShell 7) was apparently added silently to Microsoft Teams PowerShell module version since 1.0.6 (at the time of this writing the current stable module version is 1.0.7).&lt;/p&gt;
&lt;p&gt;This image shows what the PowerShell gallery site says currently&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_7.png" class="img-fluid" alt="PsGallery_Now" /&gt;&lt;/p&gt;
&lt;p&gt;and this is what it said for older versions.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_6.png" class="img-fluid" alt="PsGallery_Older" /&gt;&lt;/p&gt;
&lt;p&gt;No big announcements AFAIK.&lt;/p&gt;
&lt;h1 id="does-it-work"&gt;Does it work?&lt;/h1&gt;
&lt;h2 id="connect-microsoftteams"&gt;Connect-MicrosoftTeams&lt;/h2&gt;
&lt;p&gt;I usually use a PSCredential object to connect to every PowerShell module against Microsoft services, so I tried and this is what I got&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_1.png" class="img-fluid" alt="connectMsTeamsError" /&gt;&lt;/p&gt;
&lt;p&gt;Essentially, the error is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connect-MicrosoftTeams: password_required_for_managed_user: Password is required for managed user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It does not work when passing a PSCredential object as parameter for -Credential, apparently, this has something to do with Azure AD authentication libraries, more information &lt;a href="https://github.com/AzureAD/azure-activedirectory-library-for-dotnet/issues/1478"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I could report this to the Product Team and now they are aware of this behaviour and working on it, they told me to fallback to Device Auth:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_2.png" class="img-fluid" alt="connectMsTeamsDeviceAuth" /&gt;&lt;/p&gt;
&lt;p&gt;a lot of logging outputted to the console window&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_3.png" class="img-fluid" alt="connectMsTeamsDeviceAuth" /&gt;&lt;/p&gt;
&lt;p&gt;but eventually connects&lt;/p&gt;
&lt;h2 id="other-cmdlets-after-connection"&gt;Other cmdlets after connection&lt;/h2&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_4.png" class="img-fluid" alt="connectMsTeamsDeviceAuth" /&gt;&lt;/p&gt;
&lt;p&gt;again, a lot of logging in the console, but once connected, everything seems to work the same as with Windows Powershell&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_5.png" class="img-fluid" alt="connectMsTeamsDeviceAuth" /&gt;&lt;/p&gt;
&lt;p&gt;This is a big step into modernizing Microsoft Teams PowerShell module, it will surely help to integrate the module to newer methods of automatization, from any Operating System, I salute the Product Team for all the hard work done, hopefully, the Credential error will be fixed soon.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Getting past Teams MSI versions</title>
			<link>https://get-itips.capazero.net/posts/teams-msi-links</link>
			<description>&lt;p&gt;If you use the Microsoft Teams msi version and are looking for a past version for any reason, you can use this method, "hacking" into the following url, replace the required strings and get the desired version of the msi&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/teams-msi-links</guid>
			<pubDate>Fri, 12 Jun 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;If you use the Microsoft Teams msi version and are looking for a past version for any reason, you can use this method, &amp;quot;hacking&amp;quot; into the following url, replace the required strings and get the desired version of the msi&lt;/p&gt;
&lt;h2 id="for-32-bit-version"&gt;For 32-bit version&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;https://statics.teams.cdn.office.net/production-windows/VERSION/Teams_windows.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;For example&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://statics.teams.cdn.office.net/production-windows/1.3.00.4461/Teams_windows.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="for-64-bit-version"&gt;For 64-bit version&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;https://statics.teams.cdn.office.net/production-windows-x64/VERSION/Teams_windows_x64.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;For example&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://statics.teams.cdn.office.net/production-windows-x64/1.3.00.4461/Teams_windows_x64.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope this is useful for anyone.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>What's missing from LinkedIn</title>
			<link>https://get-itips.capazero.net/posts/what-is-missing-from-linkedin</link>
			<description>&lt;p&gt;Usually, when someone adds me as a contact on LinkedIn, I expect a chat message including some introductory reason on why this person thinks it will be productive to add me as his/her contact, however, most of the time, that does not happens, so I make the first move and chat this person to find out: who are you? how did you found me? what is your role and how do you think we can work or benefit together in our professional lives?&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/what-is-missing-from-linkedin</guid>
			<pubDate>Tue, 04 Feb 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Usually, when someone adds me as a contact on LinkedIn, I expect a chat message including some introductory reason on why this person thinks it will be productive to add me as his/her contact, however, most of the time, that does not happens, so I make the first move and chat this person to find out: who are you? how did you found me? what is your role and how do you think we can work or benefit together in our professional lives?&lt;/p&gt;
&lt;p&gt;Most of the time, I don't get a reply back, some other times, I just get some basic reply and in the least case, I do get an interesting exchange where we both could profit in the future. Does that ring a bell for you?&lt;/p&gt;
&lt;p&gt;This has been a long standing issue of LinkedIn since it was created, it is no news, a lot of people are only interested in growing its quantity of connections and not its quality, maybe that is the reason the follow system was added, which I appraise, it is an ideal way of getting news about someone's activity: why adding someone to your network when you do not expect doing business with?&lt;/p&gt;
&lt;h2 id="the-other-rising-issue"&gt;The other rising issue&lt;/h2&gt;
&lt;p&gt;LinkedIn should buy a hiring talent platform like UpWork or at least, incorporate some of its functionality.&lt;/p&gt;
&lt;p&gt;Let's say that the connection works and you are hired or hire someone for a project, that is the end of the story on LinkedIn, you will have to move to another platform, another silo to agree on the terms of the contract, track the project progress and tasks and qualify the work of the other party.&lt;/p&gt;
&lt;p&gt;Why would I need to do this outside of LinkedIn if I got started on LinkedIn? That situation is a lost opportunity for everyone involved, even the most important professional network to date.&lt;/p&gt;
&lt;p&gt;Profiles should be re-designed completely.&lt;/p&gt;
&lt;p&gt;They do not give you the chance to clearly communicate that you work independent/freelancer or even as a digital nomad. They expect you to work for a company on a fixed location, also, there is not a field to inform your current time zone.&lt;/p&gt;
&lt;p&gt;Times are changing... no, excuse me, times already changed, I love LinkedIn, but let me tell you that those old structures should not be the only option anymore.&lt;/p&gt;
&lt;p&gt;I want to end this article with an anecdote, the other day I asked my sister in law (a centennial) if she had a LinkedIn profile and she replied: Link what?&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>MS-700 Managing Microsoft Teams exam Study Guide</title>
			<link>https://get-itips.capazero.net/posts/ms-700</link>
			<description>&lt;p&gt;Hello,&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/ms-700</guid>
			<pubDate>Fri, 13 Dec 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I have just came back from the Test Center where I took the MS-700 Managing Microsoft Teams (beta) exam, I still do not if I passed it (EDIT: I passed!), because, if you have taken beta exams before you might know that, results are given to you once it becomes official.&lt;/p&gt;
&lt;p&gt;Besides that, I would like to &lt;em&gt;emphasize on what you should focus&lt;/em&gt; if you want to take this exam:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All types of policies of Teams, Team Policies, App Setup policies, Messaging policies, Meeting policies, Calling policy and Live Events policies&lt;/li&gt;
&lt;li&gt;Org-Wide Settings versus specific settings/policies&lt;/li&gt;
&lt;li&gt;Analytics &amp;amp; Reports / Call Quality Dashboard / Network Planner&lt;/li&gt;
&lt;li&gt;Guest access&lt;/li&gt;
&lt;li&gt;Coexistence mode with SfB, Teams Upgrade&lt;/li&gt;
&lt;li&gt;Retention policies&lt;/li&gt;
&lt;li&gt;Meeting settings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be honest, I expected way more questions &lt;em&gt;about telephony&lt;/em&gt; but only a couple, maybe an specific exam about Phone System/Telephony is coming soon.&lt;/p&gt;
&lt;p&gt;The format is the usual Microsoft has us used to, questions where we can not go back, scenario questions and classic questions where we can go back, I left some feedback on some questions where I thought that &lt;em&gt;some information was missing&lt;/em&gt; to be able to give an answer, this might be expected on a beta exam ;)&lt;/p&gt;
&lt;h2 id="study-resources"&gt;Study Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[Microsoft Ignite 2019] &lt;a href="https://myignite.techcommunity.microsoft.com/sessions/85219?source=sessions"&gt;Exam Prep session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Microsoft Learn] &lt;a href="https://docs.microsoft.com/en-us/learn/paths/m365-manage-team-collaboration/"&gt;Manage Team Collaboration with Microsoft Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Microsoft Learn] &lt;a href="https://docs.microsoft.com/en-us/learn/paths/m365-teams-upgrade/"&gt;Upgrade Microsoft Teams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[docs] &lt;a href="https://docs.microsoft.com/en-us/MicrosoftTeams/Microsoft-Teams"&gt;Official docs Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Your own demo tenant, play with the features, policies and settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope this quick guide helps anyone that will give a shot to this beta exam, let me know your thoughts too leaving a message here!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Team Foundation Server SQL Query to get Releases and approvals</title>
			<link>https://get-itips.capazero.net/posts/tfs-release-query</link>
			<description>&lt;p&gt;&lt;img src="/images/sqltfs.png" class="img-fluid" alt="tfssql"&gt;&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/tfs-release-query</guid>
			<pubDate>Wed, 25 Sep 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="/images/sqltfs.png" class="img-fluid" alt="tfssql" /&gt;&lt;/p&gt;
&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I created a SQL query to be run against Team Foundation Server collection database to get a list of all releases per project.
TFS Collection database is not documented at all, so I had to hack into it to understand the relationship of the tables.&lt;/p&gt;
&lt;p&gt;Essentially when running this Query you will get this columns:&lt;/p&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].[Id]&lt;/td&gt;
&lt;td&gt;Id of the Step inside the environment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[dbo].[tbl_Projects].project_name&lt;/td&gt;
&lt;td&gt;Project that this release belongs to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[Release].[tbl_Release].Name&lt;/td&gt;
&lt;td&gt;Release version name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[Release].[tbl_Release].[Description]&lt;/td&gt;
&lt;td&gt;Description of the Release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[dbo].[ADObjects].DisplayName&lt;/td&gt;
&lt;td&gt;Account that created the release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[Release].[tbl_Release].CreatedOn&lt;/td&gt;
&lt;td&gt;Creation Date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[dbo].[ADObjects].DisplayName (A)&lt;/td&gt;
&lt;td&gt;Group Approver resultant from a join&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[dbo].[ADObjects].DisplayName (B)&lt;/td&gt;
&lt;td&gt;Real Approver resultant from a join&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[Release].[tbl_ReleaseEnvironment].Name&lt;/td&gt;
&lt;td&gt;Environment Name, for example DEV&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].[ApproverComment]&lt;/td&gt;
&lt;td&gt;Approver comment for the release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].[CreatedOn]&lt;/td&gt;
&lt;td&gt;Date that the step was started&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].[ModifiedOn]&lt;/td&gt;
&lt;td&gt;Date that the step was last modified&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="the-query-itself"&gt;The query itself&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;	       SELECT [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].[Id]
             [Tfs_Collection].[dbo].[tbl_Projects].project_name AS 'Project'
         ,[Tfs_Collection].[Release].[tbl_Release].Name as 'Version'
         ,replace(replace([Tfs_Collection].[Release].[tbl_Release].[Description],char(10),''),char(13),'') AS 'Description'
         ,C.DisplayName AS 'Creator'
         ,[Tfs_Collection].[Release].[tbl_Release].CreatedOn as 'CreationDate'
      ,A.DisplayName AS 'ApproverGroup'
      ,B.DisplayName AS 'Approver'
         ,[Tfs_Collection].[Release].[tbl_ReleaseEnvironment].Name AS 'Environment'
      ,[ApproverComment] as 'ApproverComment'
      ,[Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].[CreatedOn]  as 'StepCreationDate'
      ,[Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].[ModifiedOn] as 'StepModDate'
  FROM [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep]
  INNER JOIN [Tfs_Collection].[dbo].[ADObjects] A
  ON A.TeamFoundationId = [ApproverId]
  INNER JOIN [Tfs_Collection].[dbo].[ADObjects] B
  ON B.TeamFoundationId = [ActualApproverId]

  INNER JOIN [Tfs_Collection].[Release].[tbl_Release]
  ON [Tfs_Collection].[Release].[tbl_Release].[ID] = [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].ReleaseID
  AND [Tfs_Collection].[Release].[tbl_Release].[PartitionID] = [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].PartitionID
AND [Tfs_Collection].[Release].[tbl_Release].[DataspaceId] = [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].DataspaceId

  INNER JOIN [Tfs_Collection].[dbo].[ADObjects] C
  ON C.TeamFoundationId = [Tfs_Collection].[Release].[tbl_Release].[CreatedBy]
    
    INNER JOIN [Tfs_Collection].[Release].[tbl_ReleaseEnvironment]
  ON [Tfs_Collection].[Release].[tbl_ReleaseEnvironment].Id = [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].ReleaseEnvironmentId
AND [Tfs_Collection].[Release].[tbl_ReleaseEnvironment].DefinitionEnvironmentId = [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].DefinitionEnvironmentId
   AND [Tfs_Collection].[Release].[tbl_ReleaseEnvironment].[PartitionID] = [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].PartitionID
     AND [Tfs_Collection].[Release].[tbl_ReleaseEnvironment].[DataspaceId] = [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].DataspaceId
      AND  [Tfs_Collection].[Release].[tbl_ReleaseEnvironment].[ReleaseId] = [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].ReleaseID

   INNER JOIN [Tfs_Collection].[dbo].[tbl_Dataspace]
  on [Tfs_Collection].[dbo].[tbl_Dataspace].DataspaceId  = [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].DataspaceId

   INNER JOIN [Tfs_Collection].[dbo].[tbl_Projects] ON
    [Tfs_Collection].[dbo].[tbl_Projects].Project_Id = [Tfs_Collection].[dbo].[tbl_Dataspace].DataspaceIdentifier

  
 and [Tfs_Collection].[Release].[tbl_ReleaseEnvironment].Name  IN ('PROD', 'TEST','DEV')

   where 
   [Tfs_Collection].[Release].[tbl_Release].CreatedOn &amp;gt; = &amp;#64;FromDate 
   and
   [Tfs_Collection].[Release].[tbl_Release].CreatedOn &amp;lt; = &amp;#64;ToDate


   order by [Tfs_Collection].[Release].[tbl_ReleaseEnvironmentStep].[CreatedOn] 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will have to pass as parameters the &amp;#64;fromDate and &amp;#64;toDate to tailor the result and please take into account the enviroment names which are
hard-coded in this query.&lt;/p&gt;
&lt;p&gt;Hope you find it useful!&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>New-RetentionCompliancePolicy and Teams</title>
			<link>https://get-itips.capazero.net/posts/teams-retention-policies</link>
			<description>&lt;p&gt;&lt;img src="/images/mugatu.PNG" class="img-fluid" alt="teamsSoHot"&gt;&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/teams-retention-policies</guid>
			<pubDate>Wed, 21 Aug 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="/images/mugatu.PNG" class="img-fluid" alt="teamsSoHot" /&gt;&lt;/p&gt;
&lt;p&gt;There is a nice post &lt;a href="https://techcommunity.microsoft.com/t5/Microsoft-Teams-Blog/Retention-policies-for-Microsoft-Teams/ba-p/178011"&gt;here&lt;/a&gt;
explaining how Retention policies for Microsoft Teams work, the intention of this blog post is not to talk about that but is kinda a
quick cheat sheet if you happen to use the New-RetentionCompliancePolicy cmdlet for Teams.&lt;/p&gt;
&lt;p&gt;New-RetentionCompliancePolicy includes four parameters related to Teams:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TeamsChannelLocation&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The TeamsChannelLocation parameter is used to target specific Teams to include in the policy&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TeamsChannelLocationException&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This parameter specifies the Teams to exclude when you use the value All for the TeamsChannelLocation parameter&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TeamsChatLocation&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The TeamsChatLocation parameter is used to target specific Teams users to include in the policy&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TeamsChatLocationException&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This parameter specifies the Teams users to exclude when you use the value All for the TeamsChatLocation parameter&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="now-some-examples"&gt;Now, some examples:&lt;/h2&gt;
&lt;h3 id="example-1"&gt;Example 1&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;New-RetentionCompliancePolicy -Name &amp;quot;Example1&amp;quot; -TeamsChannelLocation &amp;quot;All&amp;quot; -TeamsChannelLocationException &amp;quot;32996b0b-67f6-4159-b4bf-f738d12a5f86&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example the Retention applies to all Teams except the Team with GUID 32996b0b-67f6-4159-b4bf-f738d12a5f86, we can only specify an
Exception when &amp;quot;All&amp;quot; is used for the location parameter.&lt;/p&gt;
&lt;h3 id="example-2"&gt;Example 2&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;New-RetentionCompliancePolicy -Name &amp;quot;Example2&amp;quot; -TeamsChannelLocation &amp;quot;operations&amp;#64;M365x71714.onmicrosoft.com&amp;quot;,&amp;quot;systems&amp;#64;M365x71714.onmicrosoft.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example the Retention applies to the Teams operations and systems, as you can see, we are specifying the Teams with email address.&lt;/p&gt;
&lt;h3 id="example-3"&gt;Example 3&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;New-RetentionCompliancePolicy -Name &amp;quot;Example3&amp;quot; -TeamsChatLocation &amp;quot;All&amp;quot; -TeamsChatLocationException
 &amp;quot;Allan Deyoung&amp;quot;,&amp;quot;Cameron White&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example the Retention applies to all users except Allan and Cameron, see that we are specifying them with their Name.&lt;/p&gt;
&lt;h3 id="example-4"&gt;Example 4&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;New-RetentionCompliancePolicy -Name &amp;quot;Example4&amp;quot; -TeamsChatLocation &amp;quot;41f18a1c-2e21-4c6c-bca9-3b51a8d18a80&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example the Retention applies only to user with id 41f18a1c-2e21-4c6c-bca9-3b51a8d18a80, see that we are specifying them with their id
we can get this id thru Azure AD.&lt;/p&gt;
&lt;p&gt;We can specify Teams with their name, email, guid and users with their name, email, DN and guid.&lt;/p&gt;
&lt;h2 id="one-more-thing"&gt;One more thing...&lt;/h2&gt;
&lt;p&gt;One thing I noticed, is that, policies created using Powershell can't be edited later using the Office 365 Security &amp;amp; Compliance portal, hope
Microsoft fix this soon.
Also, if you use &lt;a href="https://docs.microsoft.com/en-us/powershell/module/exchange/policy-and-compliance-retention/get-retentioncompliancepolicy?view=exchange-ps"&gt;Get-RetentionCompliancePolicy&lt;/a&gt;
to retrieve the newly created policies, you will notice that these attributes will be empty:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;TeamsChatLocation             : {}

TeamsChatLocationException    : {}

TeamsChannelLocation          : {}

TeamsChannelLocationException : {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reason for that is that you need to use the -DistributionDetail parameter with it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;TeamsChatLocation             : {Debra Berger, Allan Deyoung}
TeamsChatLocationException    : {}
TeamsChannelLocation          : {}
TeamsChannelLocationException : {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope this is useful for somebody.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>The specified module 'Microsoft.SharePoint.MigrationTool.PowerShell' was not loaded because no valid module file was found in any module directory</title>
			<link>https://get-itips.capazero.net/posts/spmt-module</link>
			<description>&lt;p&gt;Hi,&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/spmt-module</guid>
			<pubDate>Wed, 17 Jul 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Hopefully, this is only useful temporarily until it is fixed in the installation package, but currently, if you install the &lt;a href="https://docs.microsoft.com/en-us/sharepointmigration/introducing-the-sharepoint-migration-tool"&gt;Sharepoint Migration Tool&lt;/a&gt;
module files will be copied to &lt;code&gt;$env:UserProfile\Documents\WindowsPowerShell\Modules\Microsoft.SharePoint.MigrationTool.PowerShell&lt;/code&gt; as the &lt;a href="https://docs.microsoft.com/en-us/sharepointmigration/overview-spmt-ps-cmdlets"&gt;documentation&lt;/a&gt; says.&lt;/p&gt;
&lt;p&gt;But if you try to import the module, you will receive an error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS C:\Users\user\Documents\WindowsPowerShell\Modules\Microsoft.SharePoint.MigrationTool.PowerShell&amp;gt; Import-Module Mi
crosoft.SharePoint.MigrationTool.PowerShell
Import-Module : The specified module 'Microsoft.SharePoint.MigrationTool.PowerShell' was not loaded because no
valid module file was found in any module directory.
At line:1 char:1
+ Import-Module Microsoft.SharePoint.MigrationTool.PowerShell
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (Microsoft.Share...Tool.PowerShell:String) [Import-Module], File
   NotFoundException
    + FullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simply copy the &lt;code&gt;Microsoft.SharePoint.MigrationTool.PowerShell&lt;/code&gt; folder in &lt;code&gt;C:\Program Files\WindowsPowerShell\Modules&lt;/code&gt; and you will be able to import it.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Export TFS Release Definitions to a CSV file</title>
			<link>https://get-itips.capazero.net/posts/Export-TFSReleaseDefinitions</link>
			<description>&lt;p&gt;Hi,&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/Export-TFSReleaseDefinitions</guid>
			<pubDate>Thu, 23 May 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I created a simple small script in Powershell to query Team Foundation Server to get a list of all Release Definitions per project, the
output of the script is a csv file with this header&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Project;ReleaseDefinition&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It uses the REST API to query for this information and if the project does not have release definition it will appear with a NULL value on
the ReleaseDefinition column, only one time of course.&lt;/p&gt;
&lt;h3 id="input-parameters"&gt;Input parameters&lt;/h3&gt;
&lt;p&gt;It asks for FQDN, CollectionName and Path for the CSV file.&lt;/p&gt;
&lt;h3 id="current-limitations"&gt;Current limitations&lt;/h3&gt;
&lt;p&gt;It was only tested against Team Foundation Server 2017, I expect to improve it including more versions.
Have to change the way the FQDN is asked, as http is currently hard-coded.&lt;/p&gt;
&lt;p&gt;Full script can be found here &lt;a href="https://github.com/get-itips/AzureDevopsTools/blob/master/azuredevopstools-ps/Export-TFSReleaseDefinitions.ps1"&gt;Export-TFSReleaseDefinitions.ps1&lt;/a&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>SfB On-Prem decommission and InterpretedUserType</title>
			<link>https://get-itips.capazero.net/posts/sfbonprem-interpretedusertype</link>
			<description>&lt;p&gt;&lt;img src="/images/DeploymentLocator.png" class="img-fluid" alt="msRTCSip-DeploymentLocator"&gt;&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/sfbonprem-interpretedusertype</guid>
			<pubDate>Sun, 05 May 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="/images/DeploymentLocator.png" class="img-fluid" alt="msRTCSip-DeploymentLocator" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SEPTEMBER 2020 - UPDATE&lt;/strong&gt;
&lt;strong&gt;Microsoft has just recently added a note to an &lt;a href="https://docs.microsoft.com/skypeforbusiness/hybrid/cloud-consolidation-disabling-hybrid"&gt;official Docs article&lt;/a&gt;, recommending not to clear any attributes unless directed by Support services.&lt;/strong&gt;
&lt;strong&gt;As you will read in this blog post, it includes the clearing of some attributes, in our case this was done in accordance with the customer and in this specific scenario, it fixed our problem.&lt;/strong&gt;
&lt;strong&gt;Please be sure to know what you are doing in your scenario before applying any of our recommendations, this post is provided AS IS without any warranty.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hi!
I was involved in a project with my colleage &lt;a href="https://twitter.com/dariomws"&gt;Dario Woitasen&lt;/a&gt; to remove Skype for Business from an hybrid deployment with SfB Online and experienced some odd things that we had to deal with.
I want to share them if anyone experiences the same as we did.&lt;/p&gt;
&lt;p&gt;As a start, we followed this excellent guide &lt;a href="https://blogs.technet.microsoft.com/fasttracktips/2017/06/27/decommissioning-skypelync-on-premises/"&gt;Decommissioning Skype/Lync on-premises&lt;/a&gt; but, as usual, as we progressed we saw that there were more things to take into account.&lt;/p&gt;
&lt;p&gt;One of the steps includes running this cmdlet for all users&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disable-CsUser&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, this cmdlet should:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clear all msRTCSip- attributes of every enabled user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But actually:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Did not fully clear the msRTCSip- attributes, specially msRTCSip-DeploymentLocator, more info on this attrib &lt;a href="https://docs.microsoft.com/en-us/skypeforbusiness/schema-reference/active-directory-schema-extensions-classes-and-attributes/schema-attributes-and-descriptions"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Removed sip:user&amp;#64;contoso.com from proxyAddresses attribute!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This lead to two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single sign-on stopped working for the SfB client&lt;/strong&gt;, later, we identified that this was caused by the sip:user&amp;#64;contoso.com entry not being present in proxyAddresses (remember that Disable-CsUser deleted this?), so we created a script to fix this in local AD domain:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$csv=import-csv &amp;quot;D:\Users.csv&amp;quot;

foreach($user in $csv){
        $userUpn=$user.SipAddress.Replace(&amp;quot;sip:&amp;quot;,&amp;quot;&amp;quot;)
        #Do not add proxyAddress if it is present already
        $proxies=Get-ADUser -Filter &amp;quot;UserPrincipalName -eq '$userupn'&amp;quot; -properties * | Select-Object &amp;#64;{Name=“proxyAddresses”;Expression={$_.proxyAddresses}}


        if(($null -eq $proxies) -or ($proxies.proxyAddresses -join ' ' -notmatch &amp;quot;sip:&amp;quot;)) #empty list of ProxyAddresses
        {
            write-host &amp;quot;Adding sip&amp;quot;
            Get-ADUser -Filter &amp;quot;UserPrincipalName -eq '$userupn'&amp;quot; | Set-ADUser -Add &amp;#64;{&amp;quot;proxyAddresses&amp;quot;=$user.SipAddress}
        }
        else
        {
            write-host &amp;quot;No need to Add sip&amp;quot;
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look that this is a portion of the real script, that is reading a csv file with the output of users that need to be treated, csv has a column for the User's Sip Address exported from SfB Online Powershell, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;&amp;quot;SipAddress&amp;quot;
&amp;quot;sip:debrab&amp;#64;contoso.com&amp;quot;
&amp;quot;sip:johnd&amp;#64;contoso.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we added this attribute to the local AD, &lt;em&gt;single sign-on worked again&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Where were we? oh yes... the presence of values in msRTCSip-DeploymentLocator attribute in the local Active Directory lead to the SfB Online deployment (after Azure AD Sync) to &amp;quot;think&amp;quot; or &amp;quot;interpret&amp;quot; that the users were still hybrid or OnPrem and this prevented (or at least we feared) to remove the last on-prem servers.
We concluded this looking at the InterpretedUserType of the users and in the process, we identified all of these possible values for  an SfB Online user account:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;DirSyncDisabledDisabledUser
DirSyncDisabledNoService
DirSyncDisabledSfBUser
DirSyncDisabledUser
DirSyncNoService
DirSyncSfBUser
DirSyncSfBUserNeedsProvisioning
HybridOnlineDisabledUser
HybridOnlineDisabledUserNeedsProvisioning
HybridOnlineDisabledUserWithDeletedLicenses
HybridOnlineSfBUser
HybridOnlineSfBUserWithDeletedLicenses
HybridOnpremDisabledUser
HybridOnpremSfBUser
PureOnlineNoService
PureOnlineNoServiceWithDeletedLicenses
PureOnlineSfBUser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are not sure of the complete enumeration of this type of data, but as you may see, the list is big, this excellent post tries to explain some of them &lt;a href="http://www.be-com.eu/?p=3286"&gt;InterpretedUserType to the rescue for Hybrid Deployments&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="interpretedusertype"&gt;InterpretedUserType&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;We could not find official documentation about the exact meaning of every value, so I will try to match them to other values I observed, so please use this at your own risk, if I found out that some of this values is incorrect or get any official documentation I will update this&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DirSyncDisabledDisabledUser&lt;/strong&gt;: User account disabled in SfB online and disabled in local AD, has a sipAddress attribute online, RegistrarPool has a value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DirSyncDisabledNoService&lt;/strong&gt;: User account disabled in SfB online and does not have a sipAddress attribute online, RegistrarPool empty, OnPremHostingProvider shows sipfed.online.lync.com&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DirSyncDisabledSfBUser&lt;/strong&gt;: User account disabled in SfB online and has a sipAddress attribute online, also, has a RegistrarPool value and OnPremHostingProvider is empty&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DirSyncDisabledUser&lt;/strong&gt;: User account disabled in SfB online and disabled in local AD, does not have a RegistrarPool value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DirSyncNoService&lt;/strong&gt;: To this day, I still do not know exactly what that means.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DirSyncSfBUser&lt;/strong&gt;: Enabled in SfB Online, has a SipAddress and has a RegistrarPool, this is the best value we can get.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DirSyncSfBUserNeedsProvisioning&lt;/strong&gt;: This appears to be a temporal state before DirSyncSfBUser&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HybridOnlineDisabledUser&lt;/strong&gt;: User account disabled in SfB online, has a SipAddress attribute online and OnPremHostingProvider is not empty.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HybridOnlineDisabledUserNeedsProvisioning&lt;/strong&gt;: User account disabled in SfB online, hasn't a SipAddress attribute online and OnPremHostingProvider is not empty.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HybridOnlineDisabledUserWithDeletedLicenses&lt;/strong&gt;: It's like HybridOnlineDisabledUser but, it seems that license is not assigned.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HybridOnlineSfBUser&lt;/strong&gt;: User account enabled and DirSynched, has a SipAddress and a OnPremHostingProvider and RegistrarPool.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HybridOnlineSfBUserWithDeletedLicenses&lt;/strong&gt;: Same as HybridOnlineSfBUser but judging by the name, it seems that license is not present.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HybridOnpremDisabledUser&lt;/strong&gt;: User account disabled in SfB OnPrem, OnPremHostingProvider has &amp;quot;SRV:&amp;quot; value and RegistrarPool is empty.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HybridOnpremSfBUser&lt;/strong&gt;: According to Johan Delimon's Blog, the account is created at Customer AD, DirSynched and uses SfB OnPrem, we can judge this by the presence of OnPremHostingProvider&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PureOnlineNoService&lt;/strong&gt;: I still do not know exactly what that means.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PureOnlineNoServiceWithDeletedLicenses&lt;/strong&gt;: User account created in Office 365, has no local AD account, so is not DirSynched, has no SfB license.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PureOnlineSfBUser&lt;/strong&gt;: User account created in Office 365, has no local AD account, so is not DirSynched, and uses SfB Online.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, as I said, &lt;em&gt;Disable-CsUser&lt;/em&gt; did not clear the &lt;em&gt;msRTCSIP-DeploymentLocator&lt;/em&gt; value, this lead to having most of the users in an undesired state. OnPremHostingProvider is an Online attribute that is synced with it, for more information, see &lt;a href="http://toregj.blogspot.com/2017/03/skype-online-user-is-disabled-although.html"&gt;Skype Online user is disabled, although Skype Online license assigned!&lt;/a&gt; so we first cleared all the msRTCSIP- attributes in local AD for a user and waited for sync... when synced happened, we observe the attribute InterpretedUserType changing for example from HybridOnlineSfbUser to DirSyncSfBUserNeedsProvisioning until it went to the final state DirSyncSfBUser, but for this, we had to wait hours.&lt;/p&gt;
&lt;p&gt;So, we created an script to clear all msRTCSIP- for every user in local Active Directory domain:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;#ok lets clear msRTCSIP-* Attributes
        write-host &amp;quot;Clearing msRTCSIP-* Attributes&amp;quot;
        Get-ADUser -Filter &amp;quot;UserPrincipalName -eq '$userupn'&amp;quot; | Set-ADUser -clear msRTCSIP-ApplicationOptions,msRTCSIP-DeploymentLocator,msRTCSIP-Line,msRTCSIP-OwnerUrn,msRTCSIP-PrimaryUserAddress,msRTCSIP-UserEnabled,msRTCSIP-OptionFlags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I recommend running this cmdlet against the same Domain Controller using the -Server parameter)&lt;/p&gt;
&lt;p&gt;That's it, we waited some hours and started to see the expected value for the users (DirSyncSfBUser), then, we followed the guide and removed the last servers and ran Disable-CsAdDomain and Disable-CsAdForest.&lt;/p&gt;
&lt;p&gt;Hope this post helps anyone that stumble upon the same scenario as Dario and me got.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>It's like SysInternals, but for Git-Hub!</title>
			<link>https://get-itips.capazero.net/posts/PwshGitHubTools</link>
			<description>&lt;p&gt;Hi!
(Well... If the great Mark Russinovich allows me... obviously)
I am back! It's been a busy year, hopefully, I'll write more often.
Last year I started contributing in GitHub, more specifically as a Collaborator for docs.microsoft.com creating Pull Requests to improve the documentation based on user feedback.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/PwshGitHubTools</guid>
			<pubDate>Sat, 02 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hi!
(Well... If the great Mark Russinovich allows me... obviously)
I am back! It's been a busy year, hopefully, I'll write more often.
Last year I started contributing in GitHub, more specifically as a Collaborator for docs.microsoft.com creating Pull Requests to improve the documentation based on user feedback.&lt;/p&gt;
&lt;p&gt;Let me tell you that is an activity I really enjoy to do! I think Microsoft has made the right choice open-sourcing the documentation of their solutions.&lt;/p&gt;
&lt;p&gt;So as I am a PowerShell guy (now a PowerShell Core guy) I created a small script to check the status of Issues.&lt;/p&gt;
&lt;p&gt;The name of this Script is Get-GitHubIssuesState.ps1&lt;/p&gt;
&lt;p&gt;Example Use&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS &amp;gt; .\Get-GitHubIssuesState.ps1 -Owner MicrosoftDocs -Repo officedocs-SkypeForBusiness -Issues 834,817,803,779,777,772,771,774,663 -OAuthtoken x02ab2e5xxx34ef25fea707cfb02542e9d7xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The reason behind needing OAuthToken is because of a limit in requests per hour that an anonymous user can make.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The repo is located &lt;a href="https://github.com/get-itips/PwshGitHubTools"&gt;here&lt;/a&gt; and I expect to create other small tools to do things with GitHub through PowerShell.&lt;/p&gt;
&lt;p&gt;Remember, PowerShell makes you PowerFULL&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Error cannot lock ref Git fetch failed with exit code 1 unable to update local ref</title>
			<link>https://get-itips.capazero.net/posts/cannot-lock</link>
			<description>&lt;p&gt;Hi,&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/cannot-lock</guid>
			<pubDate>Wed, 19 Sep 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Had to troubleshoot this error on one of my customers and wanted to share so if anyone encounter this can use this solution.
Basically, when executing a Build using TFS Build Agents, we were seeing this error&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2018-09-17T19:10:10.9599867Z  * [new branch]        ABZ-Branch -&amp;gt; origin/ABZ-Branch
2018-09-17T19:10:10.9599867Z error: cannot lock ref 'refs/remotes/origin/Abz-Branch': is at 551a179d8451f1154e0b38b85993a439d8c39af2 but expected e887cf2f4e449bd480560b8aee827bf140faf65a
2018-09-17T19:10:10.9599867Z  ! e887cf2f..087dcca9  Abz-Branch -&amp;gt; origin/Abz-Branch  (unable to update local ref)
2018-09-17T19:10:11.0381160Z ##[error]Git fetch failed with exit code: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Strange huh? if you do a search you won't find exactly this error, on similar situations we can recommendations to do a git prune, but I did this with no luck.&lt;/p&gt;
&lt;p&gt;So, I saw something, as you can see in the extracted log, there is ABZ-Branch and Abz-Branch, they might seem the same branch but they are different in case!!&lt;/p&gt;
&lt;p&gt;TFS, at least 2017 update 3 is not preventing you from creating branches with the same name but different case.&lt;/p&gt;
&lt;p&gt;The Git install where the Build agents are, is not making difference of this, so it is not case sensitive, (as digging into Agent's work folder at for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E:\Agents\Agent01\_work\2\s\.git\config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can see there that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ignorecase = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so it is processing the git fetch as if ABZ-Branch and Abz-Branch were the same! leading  to the error saying that it is expecting other digest.&lt;/p&gt;
&lt;p&gt;So if you encounter exactly this, check if you have two branches with the same name but different case.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Script to call POSH-LTM-Rest cmdlets to enable or disable Pool Members on a F5 LTM Load Balancer</title>
			<link>https://get-itips.capazero.net/posts/ScriptPoshLTM</link>
			<description>&lt;p&gt;Hi,&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/ScriptPoshLTM</guid>
			<pubDate>Wed, 21 Mar 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Had to do this PS Script for a customer, they use TFS and wanted to control F5 LTM (Load Balancer) to disable or enable nodes in a release definition,
so they can disable a node, update the binaries on it, and enable it again.
So, I found this excellent &lt;a href="https://github.com/joel74/POSH-LTM-Rest"&gt;Powershell modules&lt;/a&gt; from &lt;a href="https://github.com/joel74"&gt;Joel74&lt;/a&gt; that include the needed functions.
First of all, you have to install the POSH-LTM modules as the creator says on his github page on the computer that will be used to run the PS Script,
then, save this PS Script on the same computer.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt; param (
    [Parameter(Mandatory=$true)][string]$LTMName,
    [Parameter(Mandatory=$true)][string]$Partition,
    [Parameter(Mandatory=$true)][string]$PoolName,
    [Parameter(Mandatory=$true)][string]$MemberName,
    [switch]$disable = $false,
    [Parameter(Mandatory=$true)][string]$F5Username,
    [Parameter(Mandatory=$true)][string]$F5Password
)

$passwd = $F5Password
$user=$F5Username

$secpasswd = ConvertTo-SecureString $passwd -AsPlainText -Force
$ltmCreds = New-Object System.Management.Automation.PSCredential ($user, $secpasswd)


#Se solicita una sesion al F5 BIG-IP
$session = $null
$session = New-F5Session -LTMCredentials $ltmCreds -LTMName $LTMName -PassThrough

if($session -ne $null){
    if($Disable){
    Write-Verbose &amp;quot;Trying to disable $LTMName|$Partition|$PoolName|$MemberName&amp;quot;
    Disable-PoolMember -F5Session $session -PoolName $PoolName -Partition $Partition -Name $MemberName

    }else{
    Write-Verbose &amp;quot;Trying to enable $LTMName|$Partition|$PoolName|$MemberName&amp;quot;
    Enable-PoolMember -F5Session $session -PoolName $PoolName -Partition $Partition -Name $MemberName
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go to the release definition of your project of choice, and add a &amp;quot;Powershell on target Machines&amp;quot; task, fill the fields as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Machines: fill with the hostname or IP of the computer with the PS Module and PS Script saved in the last step.&lt;/li&gt;
&lt;li&gt;Admin Login / Password: Credentials to connect to this computer&lt;/li&gt;
&lt;li&gt;Protocol: HTTP or HTTPS&lt;/li&gt;
&lt;li&gt;Powershell Script: Full path to the PS Script saved in the last step, for example C:\Scripts\F5Manage-TeamMember.ps1&lt;/li&gt;
&lt;li&gt;Script Arguments: Arguments needed by my script, for example, using release variables:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-LTMName $(LTMName) -Partition $(Partition) -PoolName $(PoolName) -MemberName $(MemberName) -F5Username $(Username) -F5Password $(Password)&lt;/p&gt;
&lt;p&gt;Remember to create this variables in the release definition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Test it. always test it on your environment.&lt;/strong&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>The Open Office Space is a fiasco</title>
			<link>https://get-itips.capazero.net/posts/open-office-fiasco</link>
			<description>&lt;p&gt;This time I took the liberty of talking about something that it is not IT related, but it is work related, here it goes:&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/open-office-fiasco</guid>
			<pubDate>Thu, 22 Feb 2018 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;This time I took the liberty of talking about something that it is not IT related, but it is work related, here it goes:&lt;/p&gt;
&lt;p&gt;Some years now, we saw a new trend in offices, &amp;quot;let's remove the cubicles&amp;quot;, &amp;quot;let's remove the walls&amp;quot;, &amp;quot;this way, we can be more productive&amp;quot;.
Ok, the intention was good but, as a consultant that visits many companies I observed (and suffered) some things about this.&lt;/p&gt;
&lt;p&gt;First of all, you feel in a jungle, you hear multiple people talking, even on top of your own voice in your head, you loose focus if you need to concentrate, in this jungle, you will find people that is either yelling to someone on the phone, listening to their favourite music, making jokes to their partner or whatever that does not have anything to do with your job, so you maybe start to use headphones, a thing that is not always possible in every situation or if it is, the people on the office will surely start to think that you have some kind of social relationship problem, &amp;quot;hey, here comes that weird solo-guy&amp;quot;&lt;/p&gt;
&lt;p&gt;Another thing that happens in this jungle is constant interruption of your work: &amp;quot;hey, didn't send you an email because I saw you that we were in the same floor, please stop what you are doing right now and see my big little problem, come on, I also brought to you my notebook to your desk&amp;quot;&lt;/p&gt;
&lt;p&gt;Why? why office designers did you have to do this? did you even work in an office before? did you experience your great idea before releasing it to the world? or are you testing the beta version of it?&lt;/p&gt;
&lt;p&gt;I am not saying that we must return to the cubicle maze, but hey, let's find something in between of that, maybe we can have a more classic area and an open area in the same building so people can choose where they are more productive.&lt;/p&gt;
&lt;p&gt;My two cents on this. I really want to know what is your opinion&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Call failed to establish due to a media connectivity failure when both endpoints are...</title>
			<link>https://get-itips.capazero.net/posts/call-failed</link>
			<description>&lt;p&gt;internal&lt;br&gt;
external&lt;br&gt;
or one endpoint is internal and the other is federated or remote...&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/call-failed</guid>
			<pubDate>Fri, 21 Jul 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;internal&lt;br /&gt;
external&lt;br /&gt;
or one endpoint is internal and the other is federated or remote...&lt;/p&gt;
&lt;p&gt;any situation will do.&lt;/p&gt;
&lt;p&gt;This was happening to me on an On-Premise deployment of Skype For Business (Front end and Edge Server) calling to Unified Messaging contact on Exchange Online.&lt;/p&gt;
&lt;p&gt;ICE Candidate negotiation was happening but eventually no &lt;code&gt;remote-candidates&lt;/code&gt; were negotiated.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cmd"&gt;ms-client-diagnostics: 22; reason=&amp;quot;Call failed to establish due to a media connectivity failure when both endpoints are internal&amp;quot;;UserType=&amp;quot;Callee&amp;quot;;MediaType=&amp;quot;audio&amp;quot;;MediaChanBlob=&amp;quot;NetworkErr=no error,ErrTime=0,RTPSeq=0,SeqDelta=0,RTPTime=0,RTCPTime=0,TransptRecvErr=0x0,RecvErrTime=0,TransptSendErr=0x0,SendErrTime=0,InterfacesStall=0x0,InterfacesConnCheck=0x0,MediaTimeout=0,RtcpByeSent=0,RtcpByeRcvd=0,BlobVer=1&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this must be firewall-related, this is almost always firewall-related, it seems first that the NAT was maybe responding with another external IP from de ISP Pool, but that was ok, the rules were correct, we checked and re-rechecked, and after so many hours of troubleshooting with Snooper and Wireshark, we started to look more deeply on the firewall and tried weird things.&lt;/p&gt;
&lt;p&gt;The firewall, a Fortigate one, had a NAT button enabled on the rule, you would say, that is obvious that must be activated... but we tried and deactivated that and... Voilá! we saw the face of god at that moment, it worked, the remote-candidates were negotiated at that moment  (so always be sure that this line is present if you want to know that it is working ok)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cmd"&gt;a=remote-candidates:1 65.55.127.80 54860 2 65.55.127.80 54721
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and we lived happily ever after.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Powershell Script to CSV all AD Permissions for a particular Receive Connector</title>
			<link>https://get-itips.capazero.net/posts/csv-adPerm</link>
			<description>&lt;p&gt;Hi,&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/csv-adPerm</guid>
			<pubDate>Wed, 08 Feb 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Had to do this PS Script for me to troubleshoot a receive connector permissions problem.
This will output to a CSV all permissions assigned to a receive connector, please change the $path and $connector variables to suit your needs&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$path = &amp;quot;E:\path\dumpRights.csv&amp;quot;
$csv = &amp;quot;user,identity,deny,accessrights,extendedrights`r`n&amp;quot;
$connector=&amp;quot;connectorName&amp;quot;
$perms=Get-adpermission $connector

foreach($perm in $perms){
    $perm
    $csv+=$perm.user.RawIdentity+ &amp;quot;,&amp;quot; + $perm.identity.ToString() + &amp;quot;,&amp;quot; + $perm.deny.IsPresent + &amp;quot;,&amp;quot; + $perm.accessrights + &amp;quot;,&amp;quot; + $perm.extendedrights
    $csv +=&amp;quot;`n&amp;quot;
}

$fso = new-object -comobject scripting.filesystemobject
$file = $fso.CreateTextFile($path,$true)
$file.write($csv)
$file.close()
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
		<item>
			<title>Handy SMTP Handshake for testing with Telnet</title>
			<link>https://get-itips.capazero.net/posts/handy-handshake</link>
			<description>&lt;p&gt;Hi,&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/handy-handshake</guid>
			<pubDate>Wed, 08 Feb 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;It's always useful to test SMTP service, using Telnet, so these are the commands needed:&lt;/p&gt;
&lt;p&gt;First of all, connect through Command Prompt or Powershell&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cmd"&gt;Telnet x.x.x.x tcpPort
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For Example &lt;code&gt;Telnet 10.0.2.1 25&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You will get a welcome message from SMTP Server, like this one:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;220 exc02.contoso.com Microsoft ESMTP MAIL Service ready at Wed&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then write sequentially hitting enter at each line what is coloured in green here (no color lines are server responses)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-code"&gt;EHLO mailtesting
AUTH LOGIN
334 VXNlcm5hbWU6
Y29udG9zb1xhY2NvdW50
334 UGFzc3dvcmQ6
dGhlUGFzc3dvcmQ=
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-code"&gt;MAIL FROM:
RCPT TO:
DATA
Subject: here comes the test 
This is the email content.
.
250 Queued mail for delivery 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Important notes:&lt;/strong&gt;
You have to hit enter twice after subject input.
account name and password are entered Base64 encoded, so first encode that information using for example &lt;a href="https://www.base64encode.org/"&gt;this site.&lt;/a&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>How to succesfully import Root CA to Trend IWSVA</title>
			<link>https://get-itips.capazero.net/posts/import-ca-trend-iwsva</link>
			<description>&lt;p&gt;Customer reached me to get help importing Root CA certificate to InterScan Web Security Virtual Appliance,&lt;br&gt;
from Trend Micro documentation:&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/import-ca-trend-iwsva</guid>
			<pubDate>Tue, 13 Dec 2016 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Customer reached me to get help importing Root CA certificate to InterScan Web Security Virtual Appliance,&lt;br /&gt;
from Trend Micro documentation:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&amp;quot;By default, IWSVA acts as a private Certificate Authority (CA) and dynamically generates digital certificates&lt;br /&gt;
that are sent to client browsers to complete a secure passage for HTTPS connections. However, the default CA
is not signed by a well-known (trusted) CA on the Internet.Client browsers always display a certificate
warning every time users access an HTTPS Web site.
Although users can safely ignore the certificate warning, Trend Micro recommends using a signed root certificate for IWSVA.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, if you want your users not to receive a warning from their browsers you have to use, typical,an internal Certification Authority that all client computers trust, for example an Enterprise Windows CA like this was the case.&lt;/p&gt;
&lt;p&gt;So, first of all, I had to export the CA Root Certificate including the Private Key,&lt;br /&gt;
go on and logon the Certification Authority computer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to 'Start' -&amp;gt; 'Run' -&amp;gt; mmc.exe&lt;/li&gt;
&lt;li&gt;Click on 'File' -&amp;gt; 'Add / Remove Snap-in'&lt;/li&gt;
&lt;li&gt;Click the 'Add...' button&lt;/li&gt;
&lt;li&gt;Select 'Certificates' then click 'Add'&lt;/li&gt;
&lt;li&gt;Select 'Computer Account' -&amp;gt; 'Next' -&amp;gt; 'Local Computer' -&amp;gt; 'Finish'&lt;/li&gt;
&lt;li&gt;click 'Close' -&amp;gt; 'OK'&lt;/li&gt;
&lt;li&gt;Expand Certificates -&amp;gt; and click on 'Personal' -&amp;gt; 'Certificates'&lt;/li&gt;
&lt;li&gt;Right click the CA cert and choose 'All Tasks' -&amp;gt; 'Export'&lt;/li&gt;
&lt;li&gt;Click 'Next' -&amp;gt; Select 'Yes, Export the private key' -&amp;gt; 'Next'&lt;/li&gt;
&lt;li&gt;Uncheck all of the options here. PKCS 12 should be the only option available. Click 'Next'&lt;/li&gt;
&lt;li&gt;Give the private key a password of your choice&lt;/li&gt;
&lt;li&gt;Give a filename to save as and click 'Next', then 'Finish'&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that you have a .pfx file we will need to use the excellent tool called OpenSSL, as I was using Windows, I used OpenSSL for Windows binaries that you can get here &lt;a href="http://gnuwin32.sourceforge.net/packages/openssl.htm"&gt;http://gnuwin32.sourceforge.net/packages/openssl.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install it and copy the pfx to your computer.&lt;/p&gt;
&lt;p&gt;start a command prompt or PowerShell and run:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cmd"&gt;openssl pkcs12 -in -clcerts -nokeys -out certificate.cer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cmd"&gt;openssl pkcs12 -in -nocerts -out pkey-encrypted.key 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will end up with two files: certificate.cer and pkey-encrypted.key&lt;/p&gt;
&lt;p&gt;If you import them right into IWSVA console it will fail saying &amp;quot;Root Certificate file is invalid. Try Again&amp;quot;&lt;/p&gt;
&lt;p&gt;This drove me nuts, documentation is not so good, it only says you need to provide a PEM file format,  base54 encoded and RSA based encrypted key, and I was sure I was providing just that...  but wait... after many tries and errors, I read that some systems do not accept anything below this line in public certificate key file:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-code"&gt;-----BEGIN CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this line for the private key file&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-code"&gt;-----BEGIN PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so I tried and deleted everything below that lines on both lines... and it worked! Apparently IWSVA can not handle well ignoring the information that comes there.&lt;/p&gt;
&lt;p&gt;Hope is useful for someone else.&lt;/p&gt;
</content:encoded>
		</item>
	</channel>
</rss>