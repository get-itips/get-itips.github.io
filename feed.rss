<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Andrés Gorzelany</title>
		<link>https://get-itips.capazero.net/</link>
		<description>Get-ITips</description>
		<copyright>2023</copyright>
		<pubDate>Tue, 29 Aug 2023 22:00:18 GMT</pubDate>
		<lastBuildDate>Tue, 29 Aug 2023 22:00:18 GMT</lastBuildDate>
		<item>
			<title>Collaborative Notes in Microsoft Teams – The good, the bad and the ugly</title>
			<link>https://get-itips.capazero.net/posts/collaborative-notes-review</link>
			<description>&lt;p&gt;&lt;img src="/images/collabmeetingnotes.png" class="img-fluid" alt="introimage"&gt;&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/collaborative-notes-review</guid>
			<pubDate>Fri, 25 Aug 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;img src="/images/collabmeetingnotes.png" class="img-fluid" alt="introimage" /&gt;&lt;/p&gt;
&lt;p&gt;I’ve been using Teams Collaborative Notes for a while now and decided to write a blog post with my opinion of the good, the bad, and the ugly of this feature. Let me know if you agree or have a different opinion. 😉&lt;/p&gt;
&lt;h1 id="the-good"&gt;The good &lt;/h1&gt;
&lt;p&gt;It’s a loop component, which means it’s collaborative and synced in real-time and can be shared in Teams chat, Outlook emails, Whiteboards, and other places. Don’t know what a Loop Component is? Read here &lt;a href="https://learn.microsoft.com/microsoft-365/loop/loop-components-teams?view=o365-worldwide?WT.mc_id=M365-MVP-5004663"&gt;Overview of Loop components in the Microsoft 365 ecosystem | Microsoft Learn&lt;/a&gt; want to read the Collaborative Notes announcement? Read here &lt;a href="https://techcommunity.microsoft.com/t5/microsoft-teams-public-preview/now-in-public-preview-amp-targeted-release-collaborative-meeting/m-p/3848392"&gt;Now in public preview: Collaborative notes in Microsoft Teams Meetings - Microsoft Community Hub&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;It’s easy to access while in a meeting, just by clicking Notes on a Teams Meeting, it’s there and everyone can collaborate on the same notes at real-time, which means it is better than OneNote, at least in my opinion, as it takes fewer steps to take notes and find the correct page/section. &lt;/p&gt;
&lt;p&gt;It creates tasks automatically if you want, no need to go to Planner, you just enter new tasks and the assignment in the Follow-up tasks section. &lt;/p&gt;
&lt;h1 id="the-bad"&gt;The bad &lt;/h1&gt;
&lt;p&gt;Recurring meetings and Collaborative notes create some confusion, let’s say John creates a recurring meeting with 10+ people and forgets to create the Collaborative notes for an occurrence, as an attendee, you need to chase the meeting organizer to create the Collaborative notes in advance of the meeting, Adam wants to add some topics to be discussed in the meeting, but he can’t because the loop component was not created by the Organizer. There is a workaround, Adam can start the meeting anytime, which will enable the Notes button, and because of that, will be able to create the Collaborative Notes. (There is a caveat in the following section), but everyone invited will also see someone started the meeting in advance of the scheduled time, more confusion. &lt;/p&gt;
&lt;p&gt;Also on recurring meetings, if you expand the details of an occurrence in Teams, there is a banner on top of the loop component warning you that you are viewing the meeting notes for that occurrence, however, is that visible enough? &lt;/p&gt;
&lt;h1 id="the-ugly"&gt;The Ugly &lt;/h1&gt;
&lt;p&gt;The .loop file or component will be created in the OneDrive of the person who created the Collaborative Notes for the meeting, being the organizer or the first person that clicked on Notes, imagine a recurring meeting that spans for a year, with different moderators that add topics to be discussed, you will have this .loop files spread into different personal OneDrive's, each one for every occurrence of a meeting, what if someone leaves the company and the OneDrive site is finally deleted? What if the .loop file is deleted by the creator? (I tested this, an ugly You don’t have access to this file message will be shown in the meeting details). This in the end adds more IT work to train users or act upon these situations. Somehow, I think it would be better organized if this file were created always in the same location, the OneDrive of the organizer. &lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Collaborative Notes in Teams Meetings are a powerful tool, Customers asked me and I said, I prefer it over OneNote or another solution, however, they require training for your users not to mess up with meeting notes that ultimately create tickets in the support systems, and I also think they can be improved, I'm pretty sure that will happen once Microsoft listens to the feedback by users.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Convert Microsoft Teams group chat to team</title>
			<link>https://get-itips.capazero.net/posts/convert-teams-group-chat-to-team</link>
			<description>&lt;p&gt;Microsoft Teams Group Chat members can grow, sometimes, a conversation that is happening in a Group Chat would be better and deserve its own Microsoft Teams team, let's say
we have a Group Chat with 25 members, what it takes to get the list of members is not straigthforward. So, with a little PowerShell magic, we can "convert" a group chat into a team.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/convert-teams-group-chat-to-team</guid>
			<pubDate>Mon, 20 Mar 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Microsoft Teams Group Chat members can grow, sometimes, a conversation that is happening in a Group Chat would be better and deserve its own Microsoft Teams team, let's say
we have a Group Chat with 25 members, what it takes to get the list of members is not straigthforward. So, with a little PowerShell magic, we can &amp;quot;convert&amp;quot; a group chat into a team.&lt;/p&gt;
&lt;p&gt;Actually, what the script does is creating a team with the same membership as the group chat, the group chat will stay as is and you will have to redirect the users to the
new team. It will ask you a couple of things and then run the required commands.&lt;/p&gt;
&lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Latest stable Microsoft Graph PowerShell module&lt;/li&gt;
&lt;li&gt;Latest stable Microsoft Teams module&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="the-script"&gt;The script&lt;/h1&gt;
&lt;p&gt;You can find it &lt;a href="https://github.com/get-itips/MiscScripts/blob/main/Teams/CreateTeamFromGroupChat.ps1"&gt;here&lt;/a&gt; and I expect to update it with new features, contributions are welcomed.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Teams Wiki internals and possible migration</title>
			<link>https://get-itips.capazero.net/posts/migrating-teams-wiki</link>
			<description>&lt;p&gt;I knew this was a long-time request by the community and that there isn't an out-of-the-box method to do this, I was asked
if I could find a way to migrate a Wiki tab from one channel in one team to another channel in another team.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/migrating-teams-wiki</guid>
			<pubDate>Wed, 30 Nov 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I knew this was a long-time request by the community and that there isn't an out-of-the-box method to do this, I was asked
if I could find a way to migrate a Wiki tab from one channel in one team to another channel in another team.&lt;/p&gt;
&lt;p&gt;I found this Tech Community post, I tried to use it but SharePoint Designer was not an option, but it helped me understand a few things, so thanks to the
person behind it &lt;a href="https://techcommunity.microsoft.com/t5/microsoft-teams/how-to-copy-teams-wiki-pages-answered/m-p/2785567."&gt;https://techcommunity.microsoft.com/t5/microsoft-teams/how-to-copy-teams-wiki-pages-answered/m-p/2785567.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I spent several days figuring it out how Teams handles wiki tabs, from creation, to updating and to removal, so I decided to share
my findings with the community, &lt;strong&gt;this is provided as-is, with no guarantee whatsoever, as you will see it is a very craft-made process&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="the-wiki-tab"&gt;The Wiki tab&lt;/h1&gt;
&lt;p&gt;&lt;img src="/images/SourceWiki.png" class="img-fluid" alt="Source Wiki" /&gt;&lt;/p&gt;
&lt;p&gt;When a Teams Wiki tab is added to a Channel, the following is created on the SharePoint site belonging to the Team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A SharePoint Document library named &lt;em&gt;Teams Wiki Data&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://contoso.sharepoint.com/sites/TeamName/Teams%20Wiki%20Data/Forms/AllItems.aspx"&gt;https://contoso.sharepoint.com/sites/TeamName/Teams%20Wiki%20Data/Forms/AllItems.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This document library contains .mht files generated by the Wiki tab when someone edits the wiki, it will also contain the images inserted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A SharePoint List, like this, (but it is hidden by default)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://contoso.sharepoint.com/sites/TeamName/Lists/19pYZDaUICINpaAq7iFZpRNyuEGeXK8gqb5yUC3ja4oc1threa"&gt;https://contoso.sharepoint.com/sites/TeamName/Lists/19pYZDaUICINpaAq7iFZpRNyuEGeXK8gqb5yUC3ja4oc1threa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(The list gets its name from the Team Channel id)&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/SourceSiteContents.png" class="img-fluid" alt="SourceSite Contents" /&gt;&lt;/p&gt;
&lt;p&gt;Teams will also save this information about the tab and we can query it using Graph API:&lt;/p&gt;
&lt;p&gt;HTTP Request&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-http"&gt;https://graph.microsoft.com/v1.0/teams/2c009003-bf45-47ab-ac9d-fe4f3f3967f5/channels/19:Kb8nmcctoGWrOYfiB-Cf7wVgX8Lnk0UL8BH-WB6s7hQ1&amp;#64;thread.tacv2/tabs
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;&amp;#64;odata.context&amp;quot;: &amp;quot;https://graph.microsoft.com/v1.0/$metadata#teams('d925b426-bcff-4d41-8e40-dda0bd157044')/channels('19%3AXV4JrShhjXTNB_EVNNZyoBiMRQkXcWFECKy_aFmZ1Qs1%40thread.tacv2')/tabs&amp;quot;,
    &amp;quot;&amp;#64;odata.count&amp;quot;: 1,
    &amp;quot;value&amp;quot;: [
        {
            &amp;quot;id&amp;quot;: &amp;quot;e06b5ed7-404b-4a9e-b9d8-608d3b456bd5&amp;quot;,
            &amp;quot;displayName&amp;quot;: &amp;quot;Wiki&amp;quot;,
            &amp;quot;webUrl&amp;quot;: &amp;quot;https://teams.microsoft.com/l/channel/19%3aXV4JrShhjXTNB_EVNNZyoBiMRQkXcWFECKy_aFmZ1Qs1%40thread.tacv2/tab%3a%3ae06b5ed7-404b-4a9e-b9d8-608d3b456bd5?label=Wiki&amp;amp;groupId=d925b426-bcff-4d41-8e40-dda0bd157044&amp;amp;tenantId=239cf0aa-5769-4830-bda9-8eb6f978424e&amp;quot;,
            &amp;quot;configuration&amp;quot;: {
                &amp;quot;entityId&amp;quot;: null,
                &amp;quot;contentUrl&amp;quot;: null,
                &amp;quot;removeUrl&amp;quot;: null,
                &amp;quot;websiteUrl&amp;quot;: null,
                &amp;quot;hasContent&amp;quot;: true,
                &amp;quot;wikiTabId&amp;#64;odata.type&amp;quot;: &amp;quot;#Int64&amp;quot;,
                &amp;quot;wikiTabId&amp;quot;: 2,
                &amp;quot;dateAdded&amp;quot;: &amp;quot;2022-11-30T12:21:37.605Z&amp;quot;,
                &amp;quot;isPrivateMeetingWiki&amp;quot;: false,
                &amp;quot;meetingNotes&amp;quot;: false,
                &amp;quot;scenarioName&amp;quot;: &amp;quot;wiki_init_context&amp;quot;
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the property named wikiTabId? that's an important one and it is used by Teams to identify a specific Teams Wiki tab within
the channel, as you might know, we can have more than one Wiki per channel, and if we create 3 Wiki tabs, we should have
wikiTabId 1, 2 and 3, those numbers are assigned incrementally by Teams, this wikiTabId is important because, it is referenced in the
list I mentioned is created in the site, but we'll return to this later.&lt;/p&gt;
&lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt;
&lt;p&gt;Install the latest PnP PowerShell module version, you can check here &lt;a href="https://msshells.net,"&gt;https://msshells.net,&lt;/a&gt; we will use it for several things.
I won't go into the details on how to use PnP PowerShell, there are &lt;a href="https://pnp.github.io/powershell/"&gt;good resources&lt;/a&gt; for that.&lt;/p&gt;
&lt;h1 id="the-scenario"&gt;The scenario&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Two Team's teams, let's call them SourceTeam and DestinationTeam&lt;/li&gt;
&lt;li&gt;One wiki per team&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="procedure"&gt;Procedure&lt;/h1&gt;
&lt;p&gt;The DestinationTeam has to have at least an empty Wiki, so it creates the &lt;em&gt;Teams Wiki Data&lt;/em&gt; DL for us and also the SharePoint list,
let's call these placeholder DL and List. So create an empty Wiki tab on DestinationTeam using the regular procedure.&lt;/p&gt;
&lt;p&gt;Then, use PnP PowerShell to connect to the source site:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;connect-pnponline -Interactive -Url https://contoso.sharepoint.com/sites/SourceTeam
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get the List name by calling &lt;a href="https://pnp.github.io/powershell/cmdlets/Get-PnPList.html?q=get-pnplist"&gt;Get-PnpList&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-PnpList
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The one we are looking for is named something like this &amp;quot;19:XV4JrShhjXTNB_EVNNZyoBiMRQkXcWFECKy_aFmZ1Qs1&amp;#64;thread.tacv2_wiki&amp;quot;&lt;/p&gt;
&lt;p&gt;Get the template of the list and also add the data to it, customize the $list variable and if you want the $template location.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$template = &amp;quot;.\sourceTeamWiki.xml&amp;quot;
$list = &amp;quot;19:XV4JrShhjXTNB_EVNNZyoBiMRQkXcWFECKy_aFmZ1Qs1&amp;#64;thread.tacv2_wiki&amp;quot;
Get-PnPSiteTemplate -Out $template -ListsToExtract $list -Handlers Lists
Add-PnPDataRowsToSiteTemplate -Path $template -List $list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unhide the List with &lt;a href="https://pnp.github.io/powershell/cmdlets/Set-PnPList.html?q=set-pnplist"&gt;Set-PnpList&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Set-PnpList -Identity bdd7b031-57f6-47fd-9922-67cc1c68cb6e -Hidden:$false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we will probably need to review it on the site.&lt;/p&gt;
&lt;p&gt;Now, let's do the same with the destination List, so we will have two xml files to compare.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$template = &amp;quot;.\destinationTeamWiki.xml&amp;quot;
$list = &amp;quot;19:7BvdpssdDqtYTSLvKDRRUlF-RKLX5XUMnfSvinc4lFA1&amp;#64;thread.tacv2_wiki&amp;quot;
Get-PnPSiteTemplate -Out $template -ListsToExtract $list -Handlers Lists
Add-PnPDataRowsToSiteTemplate -Path $template -List $list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open both .xml files, compare the structure and get familiar with how things are organized there.&lt;/p&gt;
&lt;p&gt;On the source .xml file, we need to replace any occurrence of the list guid of the source with the guid of the destination (in the 2nd xml file), for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;19:XV4JrShhjXTNB_EVNNZyoBiMRQkXcWFECKy_aFmZ1Qs1&amp;#64;thread.tacv2_wiki
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;19:7BvdpssdDqtYTSLvKDRRUlF-RKLX5XUMnfSvinc4lFA1&amp;#64;thread.tacv2_wiki
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;19XV4JrShhjXTNB_EVNNZyoBiMRQkXcWFECKy_aFmZ1Qs1thre
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;197BvdpssdDqtYTSLvKDRRUlFRKLX5XUMnfSvinc4lFA1threa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save this .xml file as migratedTeamWiki.xml or something like that, browse to the destination site and delete the empty list (be sure not to be on the source site!)&lt;/p&gt;
&lt;p&gt;Grab the PnP connection against the destination Sharepoint Site and import it into the site with &lt;a href="https://pnp.github.io/powershell/cmdlets/Invoke-PnPSiteTemplate.html"&gt;Invoke-PnPSiteTemplate&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Invoke-PnPSiteTemplate -Path C:\temp\Wiki\migratedTeamWiki.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should leave you with a list of the same name on the destination site.&lt;/p&gt;
&lt;p&gt;Browse to both source and the destination's site &lt;em&gt;Teams Wiki Data&lt;/em&gt; Document Library, download and copy all the mht files from the source &lt;em&gt;Teams Wiki Data&lt;/em&gt; to the destination's &lt;em&gt;Teams Wiki Data&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/TeamsWikiData.png" class="img-fluid" alt="TeamsWikiData Contents" /&gt;&lt;/p&gt;
&lt;p&gt;Open the Team's destination team and clic on the Wiki tab, it should load the migrated Wiki, if everything was done correctly, if something looks odd, review the steps taken.&lt;/p&gt;
&lt;h1 id="developer-tools"&gt;Developer tools&lt;/h1&gt;
&lt;p&gt;If we dig deeper activating the browser's developer tools, we can see that, when the wiki loads, it is using this request&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-http"&gt;https://contoso.sharepoint.com/sites/DestinationTeam/_api/web/lists/getbytitle('19:7BvdpssdDqtYTSLvKDRRUlF-RKLX5XUMnfSvinc4lFA1&amp;#64;thread.tacv2_wiki')/items?$filter=(Id eq '10' or (wikiCanvasId eq '10' and wikiDeleted eq 'false'))&amp;amp;$top=5000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(The HTTP url is already decoded)&lt;/p&gt;
&lt;p&gt;If we look closer, it queries the Wiki list and filters by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Id eq 10&lt;/li&gt;
&lt;li&gt;wikiCanvasId eq 10&lt;/li&gt;
&lt;li&gt;wikiDeleted eq false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(It will differ in your case)&lt;/p&gt;
&lt;p&gt;What I don't understand is how the wiki &lt;strong&gt;will still load when the Id does not eq what Teams is expecting&lt;/strong&gt;, this Id corresponds to the wikiTabId I mentioned earlier, and unfortunately, there is &lt;a href="https://learn.microsoft.com/en-us/graph/teams-configuring-builtin-tabs#wiki-tabs"&gt;no supported way of updating it&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;HTTP Request:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-http"&gt;https://graph.microsoft.com/v1.0/teams/2c009003-bf45-47ab-ac9d-fe4f3f3967f5/channels/19:Kb8nmcctoGWrOYfiB-Cf7wVgX8Lnk0UL8BH-WB6s7hQ1&amp;#64;thread.tacv2/tabs/6dd527de-ee8e-4f65-a389-ca8920adf3e0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;configuration&amp;quot;: {
        &amp;quot;wikiTabId&amp;quot;: 1
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;error&amp;quot;: {
        &amp;quot;code&amp;quot;: &amp;quot;BadRequest&amp;quot;,
        &amp;quot;message&amp;quot;: &amp;quot;Setting the tab configuration for app 'com.microsoft.teamspace.tab.wiki' is not supported.&amp;quot;,
        &amp;quot;innerError&amp;quot;: {
            &amp;quot;message&amp;quot;: &amp;quot;Setting the tab configuration for app 'com.microsoft.teamspace.tab.wiki' is not supported.&amp;quot;,
            &amp;quot;code&amp;quot;: &amp;quot;InvalidRequest&amp;quot;,
            &amp;quot;innerError&amp;quot;: {},
            &amp;quot;date&amp;quot;: &amp;quot;2022-11-25T20:19:19&amp;quot;,
            &amp;quot;request-id&amp;quot;: &amp;quot;da8fd32f-f0e4-4f11-b7f3-bee20ddb2b30&amp;quot;,
            &amp;quot;client-request-id&amp;quot;: &amp;quot;58eef061-4999-feda-86d6-44105932a1c5&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information about that Graph API Call see &lt;a href="https://learn.microsoft.com/en-us/graph/api/channel-patch-tabs?view=graph-rest-1.0?WT.mc_id=M365-MVP-5004663"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So Teams will keep looking for whatever &lt;strong&gt;wikiTabId&lt;/strong&gt; has in its own configuration, and also, unfortunately, Microsoft does not provide much information about this, as the effort and recommendations now seem to be &lt;strong&gt;to move on to OneNote&lt;/strong&gt;, and this might be the small detail that makes this whole process still not perfect (?).&lt;/p&gt;
&lt;h1 id="extra"&gt;Extra&lt;/h1&gt;
&lt;p&gt;If you want to dig deeper into this, browse to the List in the source and destination site and create a SharePoint List view adding this columns:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/CustomListView.png" class="img-fluid" alt="Custom List View" /&gt;&lt;/p&gt;
&lt;h1 id="final-thoughts"&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;If you have to do this because maybe you can't migrate content manually, I think you can follow this procedure but, test, test and test, until you get the desired results, and if you find an error or improvement to this guide, please, share it with me so I can update the post and share with the community.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Using Conditional Access Policies with Microsoft Teams Rooms devices - Part 1</title>
			<link>https://get-itips.capazero.net/posts/tmr-conditional-access</link>
			<description>&lt;p&gt;Upon customer request, I needed to investigate how to restrict the resource account used by a Microsoft Teams Rooms device, the goal was to prevent this account from logging in from other devices than the MTR device, I think that is not so crazy request, right?&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/tmr-conditional-access</guid>
			<pubDate>Thu, 24 Nov 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Upon customer request, I needed to investigate how to restrict the resource account used by a Microsoft Teams Rooms device, the goal was to prevent this account from logging in from other devices than the MTR device, I think that is not so crazy request, right?&lt;/p&gt;
&lt;p&gt;In this blog post, that I hope it becomes a blog series, I want to share my findings about this, and also thank &lt;a href="https://twitter.com/randychapman"&gt;Randy Chapman&lt;/a&gt;, &lt;a href="https://twitter.com/LCansby"&gt;Linus Cansby&lt;/a&gt;, &lt;a href="https://twitter.com/thegrahamwalsh"&gt;Graham Walsh&lt;/a&gt; for providing some more information.&lt;/p&gt;
&lt;h1 id="what-are-our-options"&gt;What are our options?&lt;/h1&gt;
&lt;p&gt;According to Microsoft, &lt;em&gt;Filter for devices&lt;/em&gt;, which is a &lt;em&gt;Conditional Access Policy&lt;/em&gt; condition, is &lt;strong&gt;supported&lt;/strong&gt; in Microsoft Teams Rooms on Android and on Windows. See here &lt;a href="https://learn.microsoft.com/microsoftteams/rooms/supported-ca-and-compliance-policies?WT.mc_id=M365-MVP-5004663"&gt;Supported Conditional Access and Intune device compliance policies for Microsoft Teams Rooms and Teams Android Devices&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, we also found this statement&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;You can't use a resource account to apply device-level conditional access policies in Azure Active Directory and Endpoint Manager as device info is not passed when using this grant type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/microsoftteams/rooms/rooms-authentication?WT.mc_id=M365-MVP-5004663"&gt;Authentication in Microsoft Teams Rooms on Windows - Microsoft Teams | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So if we read both those pages, it is a little contradictory, right? Is it or is it not supported to use &lt;em&gt;filter for devices&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;So, upon testing, I found out that Microsoft Teams Rooms devices based on windows &lt;strong&gt;do not send the device information on the sign-in event&lt;/strong&gt; of the Microsoft Resource Account (Room Mailbox), see here an example:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/MTR_Windows_SignIn.png" class="img-fluid" alt="TMR Windows Sign In event" /&gt;&lt;/p&gt;
&lt;p&gt;Decided to give it a try &lt;a href="https://support.microsoft.com/en-us/account-billing/register-your-personal-device-on-your-work-or-school-network-8803dd61-a613-45e3-ae6c-bd1ab25bf8a8"&gt;Azure AD Registering the device&lt;/a&gt;, also with no luck. Then, I received confirmation from Microsoft that the device needs to be AADJ (Azure AD Joined/Enrolled) to send this information, I still could verify this but I hope I can do it for my 2nd blog post of these series.&lt;/p&gt;
&lt;p&gt;So, that leaves me with the MTRoA devices, the idea, was to create a Conditional Access Policy like this:&lt;/p&gt;
&lt;h1 id="the-conditional-access-policy"&gt;The Conditional Access Policy&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Users&lt;/strong&gt;: The specific resource account&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud Apps&lt;/strong&gt;: All cloud apps (or at least, Exchange Online, Microsoft Teams, and SharePoint Online as explained here &lt;a href="https://learn.microsoft.com/en-us/microsoftteams/rooms/conditional-access-and-compliance-for-devices?WT.mc_id=M365-MVP-5004663"&gt;Conditional Access and compliance best practices for Microsoft Teams Rooms - Microsoft Teams | Microsoft Learn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conditions&lt;/strong&gt; : &lt;strong&gt;Filter for Devices&lt;/strong&gt;: &lt;em&gt;Exclude filtered devices&lt;/em&gt;, Configure: Yes, Exclude filtered devices from policy: deviceId Equals e592fe64-fd2b-4ced-ae96-91657183cdb8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grant&lt;/strong&gt;: Block access&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The policy should be read like this: &lt;em&gt;Block resource account from logging in from any device but the ones that match the condition of deviceId&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As said, this unfortunately din’t work with a MTRoW, as-is or Azure AD Registered, but what about Microsoft Teams Rooms on Android?&lt;/p&gt;
&lt;p&gt;These devices showed as Azure AD Registered by default and upon testing, they send the device information upon sign-in.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/MTR_Android_SignIn.png" class="img-fluid" alt="TMR Android Sign In event" /&gt;&lt;/p&gt;
&lt;p&gt;So, we could use CAPs with Android-based MTR devices without any other intervention (like AADJ/Enrolling, see &lt;a href="https://techcommunity.microsoft.com/t5/intune-customer-success/enrolling-microsoft-teams-rooms-on-windows-devices-with/ba-p/3246986?WT.mc_id=M365-MVP-5004663"&gt;Enrolling Microsoft Teams Rooms on Windows devices with Microsoft Endpoint Manager&lt;/a&gt;) in case you can't use Endpoint Manager/Intune for any reason.&lt;/p&gt;
&lt;h1 id="the-end"&gt;The end?&lt;/h1&gt;
&lt;p&gt;Hope these findings are useful and saves time for someone, as this took me a good couple of days to find out and test.&lt;/p&gt;
&lt;p&gt;I expect to continue sharing my findings with the community in a 2nd part of this blog post.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Automate adding tags to team members</title>
			<link>https://get-itips.capazero.net/posts/Add-TagsToUsers</link>
			<description>&lt;p&gt;Hello!&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/Add-TagsToUsers</guid>
			<pubDate>Wed, 19 Oct 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hello!&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I see that there is no way to ease the job of adding a tag to multiple users at the same time without having to look for the user in the edit tag window, so if you have
a large list of team members and you want to add the tag to a lot of them or all, it is a little tedious, so exploring the API as
these other posts &lt;a href="https://get-itips.capazero.net/posts/extra-information-federated-teams"&gt;Getting some extra information about Teams federated users using PowerShell&lt;/a&gt; and
&lt;a href="https://get-itips.capazero.net/posts/clear-teams-notifications"&gt;Mark Teams notifications as read&lt;/a&gt; we can script this calling the chat service API.&lt;/p&gt;
&lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt;
&lt;h2 id="tag-name"&gt;Tag name&lt;/h2&gt;
&lt;p&gt;The tag you want to add to users doesn't need to be already created, this also means that, for example you make a typo specifying the tag name, it will be created, so make sure
you type the right tag name.&lt;/p&gt;
&lt;h2 id="the-teams-object-id"&gt;The team's object id&lt;/h2&gt;
&lt;p&gt;Every entity in Teams is represented by an MRI, in this case we would need to grab the object id part of the mri from the URL.&lt;/p&gt;
&lt;p&gt;Instructions&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Teams using the Web browser&lt;/li&gt;
&lt;li&gt;Click on the three &amp;quot;...&amp;quot; and Manage team&lt;/li&gt;
&lt;li&gt;Look at the address bar, for example &lt;a href="https://teams.microsoft.com/_#/teamDashboard/Sales%20and%20Marketing/19:PwiCdKrPbQ2IyrQy7W2EVrXpHTAA3G00WuHUgP6PY1&amp;#64;thread.tacv2/td.members"&gt;https://teams.microsoft.com/_#/teamDashboard/Sales%20and%20Marketing/19:PwiCdKrPbQ2IyrQy7W2EVrXpHTAA3G00WuHUgP6PY1&amp;#64;thread.tacv2/td.members&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Copy everything between &amp;quot;:&amp;quot; and &amp;quot;&amp;#64;&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-userids"&gt;The UserIds&lt;/h2&gt;
&lt;p&gt;You can grab the user ids, using the official Microsoft Teams PowerShell module, using the &lt;code&gt;Get-TeamUser&lt;/code&gt; cmdlet, take note of the UserId you need (corresponding to the user
you need to assign a tag to).&lt;/p&gt;
&lt;h2 id="the-csv-file"&gt;The CSV file&lt;/h2&gt;
&lt;p&gt;The format of the csv file is this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;objectid;userId;tag
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;objectid;userId;tag
PwiCdKrPbQ2IyrQy7W2EVrXpHTAA3G00WuHUgP6PY1;e69b51ea-2d84-4881-a7df-99f651c62d68;ITPro
PwiCdKrPbQ2IyrQy7W2EVrXpHTAA3G00WuHUgP6PY1;2e59f376-9231-44b6-8654-e53f866daa65;ITPro
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="the-script"&gt;The script&lt;/h1&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;function Add-TagsToUsers{

  #CSV file containing the team objectId, user id and tag name
  $userAndTags=&amp;quot;usersAndTags.csv&amp;quot;
  $csv = Import-CSV -Delimiter &amp;quot;;&amp;quot; -Path $userAndTags

  #Authentication
  ## Let's load the great AADInternals module
  Import-Module AADInternals
  #Let's request a chat service token
  $token = Get-AADIntAccessToken -Resource https://chatsvcagg.teams.microsoft.com -ClientId &amp;quot;1fec8e78-bce4-4aaf-ab1b-5451cc387264&amp;quot;

  #Some variable definitions - Do not change this
  $urlPart1=&amp;quot;https://teams.microsoft.com/api/csa/amer/api/v1/teams/19:&amp;quot;
  $urlPart3=&amp;quot;&amp;#64;thread.tacv2/memberTags/?action=add&amp;quot;

  #For each entry in the csv we will try to add the user to the tag
  foreach($entry in $csv){

      $objectId=$entry.objectId
      $userId=$entry.userId
      $tag=$entry.tag

      $uri = $urlPart1+$objectId+$urlPart3
      Write-Verbose $uri
      $body = &amp;quot;{`&amp;quot;tagNames`&amp;quot;:[`&amp;quot;$tag`&amp;quot;],`&amp;quot;memberIds`&amp;quot;:[`&amp;quot;8:orgid:$userId`&amp;quot;]}&amp;quot;  
      Write-Verbose $body  
      $path=&amp;quot;/api/csa/amer/api/v1/teams/19:$objectId&amp;#64;thread.tacv2/memberTags/?action=add&amp;quot;
      Write-Verbose $path
      $guid=(New-Guid).Guid
      
      $Result=Invoke-WebRequest -UseBasicParsing -Uri $uri `
      -Method &amp;quot;POST&amp;quot; `
      -Headers &amp;#64;{
      &amp;quot;authority&amp;quot;=&amp;quot;teams.microsoft.com&amp;quot;
        &amp;quot;method&amp;quot;=&amp;quot;POST&amp;quot;
        &amp;quot;path&amp;quot;=$path
        &amp;quot;scheme&amp;quot;=&amp;quot;https&amp;quot;
        &amp;quot;accept&amp;quot;=&amp;quot;json&amp;quot;
        &amp;quot;accept-encoding&amp;quot;=&amp;quot;gzip, deflate, br&amp;quot;
        &amp;quot;accept-language&amp;quot;=&amp;quot;es,es-ES;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;quot;
        &amp;quot;authorization&amp;quot;=&amp;quot;Bearer $token&amp;quot;
        &amp;quot;origin&amp;quot;=&amp;quot;https://teams.microsoft.com&amp;quot;
        &amp;quot;referer&amp;quot;=&amp;quot;https://teams.microsoft.com/_&amp;quot;
        &amp;quot;sec-ch-ua&amp;quot;=&amp;quot;`&amp;quot;Chromium`&amp;quot;;v=`&amp;quot;106`&amp;quot;, `&amp;quot;Microsoft Edge`&amp;quot;;v=`&amp;quot;106`&amp;quot;, `&amp;quot;Not;A=Brand`&amp;quot;;v=`&amp;quot;99`&amp;quot;&amp;quot;
        &amp;quot;sec-ch-ua-mobile&amp;quot;=&amp;quot;?0&amp;quot;
        &amp;quot;sec-ch-ua-platform&amp;quot;=&amp;quot;`&amp;quot;Windows`&amp;quot;&amp;quot;
        &amp;quot;sec-fetch-dest&amp;quot;=&amp;quot;empty&amp;quot;
        &amp;quot;sec-fetch-mode&amp;quot;=&amp;quot;cors&amp;quot;
        &amp;quot;sec-fetch-site&amp;quot;=&amp;quot;same-origin&amp;quot;
        &amp;quot;x-ms-client-env&amp;quot;=&amp;quot;pds-prod-c1-ussc-01&amp;quot;
        &amp;quot;x-ms-client-type&amp;quot;=&amp;quot;web&amp;quot;
        &amp;quot;x-ms-client-version&amp;quot;=&amp;quot;1415/1.0.0.2022092126&amp;quot;
        &amp;quot;x-ms-scenario-id&amp;quot;=&amp;quot;511&amp;quot;
        &amp;quot;x-ms-session-id&amp;quot;=$guid
        &amp;quot;x-ms-user-type&amp;quot;=&amp;quot;null&amp;quot;
        &amp;quot;x-ringoverride&amp;quot;=&amp;quot;general&amp;quot;
      } `
      -ContentType &amp;quot;application/json&amp;quot; `
      -Body $body `

      $Result
  }

}
Add-TagsToUsers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The script uses the great AADInternals module to ease the token retrieval and then mimics what the Teams client does when adding tags to users.
Once run, you should have all the users you specified in the csv file with the specified tag in the specified team.&lt;/p&gt;
&lt;p&gt;I invite everyone that wants to contribute to this script to do so here in this &lt;a href="https://github.com/get-itips/MiscScripts/blob/dev/Teams/Add-TagsToUsers.ps1"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>How to export Azure AD Connect metaverse using sqlcmd</title>
			<link>https://get-itips.capazero.net/posts/azure-ad-connect-db-query</link>
			<description>&lt;p&gt;The Synchronization Service Manager app is good to review the status and check the configuration of synchronization to and from an Azure AD tenant,
and it also includes a Metaverse Search option where you can query the SQL database that Azure AD Connect uses.
One of the things that is recommended in a swing migration is to compare the number of objects between installations, however this UI does not handle correctly
a big number objects, I found that if you click &lt;em&gt;Search&lt;/em&gt; on the &lt;em&gt;Metaverse Search&lt;/em&gt; option, with 50,000 items or more, and then you try to copy all the results (I do this to
understand which accounts will not be part of the new installation, hence, deleted from Azure AD), the UI will hang.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/azure-ad-connect-db-query</guid>
			<pubDate>Tue, 06 Sep 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The Synchronization Service Manager app is good to review the status and check the configuration of synchronization to and from an Azure AD tenant,
and it also includes a Metaverse Search option where you can query the SQL database that Azure AD Connect uses.
One of the things that is recommended in a swing migration is to compare the number of objects between installations, however this UI does not handle correctly
a big number objects, I found that if you click &lt;em&gt;Search&lt;/em&gt; on the &lt;em&gt;Metaverse Search&lt;/em&gt; option, with 50,000 items or more, and then you try to copy all the results (I do this to
understand which accounts will not be part of the new installation, hence, deleted from Azure AD), the UI will hang.&lt;/p&gt;
&lt;h1 id="analysis"&gt;Analysis&lt;/h1&gt;
&lt;p&gt;So I needed a way to query the objects but using the command line, I didn't want to install SQL Management Studio on the Azure AD Connect Server.&lt;/p&gt;
&lt;p&gt;First of all, we need to get the named pipes connection string, (these instructions are if using the LocalDB version of SQL Server's Azure AD Connect, otherwise, if using an standalone SQL
Server you would already know the server name, instance name and protocol).&lt;/p&gt;
&lt;h1 id="the-solution"&gt;The Solution?&lt;/h1&gt;
&lt;p&gt;SQL Server's Azure AD Connect uses named pipes as protocol, so we need to take that into account, open the error.log file that is present in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Users\[Account Running Microsoft Azure AD Sync Service]\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\ADSync2019
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;also found on this path&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Windows\ServiceProfiles\ADSync\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\ADSync2019
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;find a line similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Server local connection provider is ready to accept connection on [ \\.\pipe\LOCALDB#SHEA4A65\tsql\query ].
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;take note of the whole pipe \.\pipe\LOCALDB#SHEA4A65\tsql\query (it differs from installation to installation, yours will be different)&lt;/p&gt;
&lt;p&gt;then, open a command prompt and run this command, making the required adjustments&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cmd"&gt;sqlcmd -S np:\\.\pipe\LOCALDB#SHEA4A65\tsql\query -d &amp;quot;ADSync&amp;quot; -E -Q &amp;quot;select displayName FROM [ADSync].[dbo].[mms_metaverse]&amp;quot; -o &amp;quot;ExportAADC.txt&amp;quot; -h-1 -w 200
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command connects to the specified named pipe (-S np:\.\pipe\LOCALDB#SHEA4A65\tsql\query), against the specified database (-d &amp;quot;ADSync&amp;quot;), runs the specified T-SQL
(-Q &amp;quot;select displayName FROM [ADSync].[dbo].[mms_metaverse]&amp;quot;) and produces the specified output text file (-o &amp;quot;ExportAADC.txt&amp;quot;)
This command will produce a text file with the output of the query, unfortunately, a lot of white lines will be present on the file, you can remove them easily using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Edit -&amp;gt; Line operations -&amp;gt; Remove Empty Lines (Containing Blank characters)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;option from Notepad++.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This method is useful if you do not want to add any other piece of software in the server, which it is usually not recommended or easy in customer's installations, sqlcmd comes with the Azure AD Connect installation and is right there.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Renewing Web Management Service certificate from SHA1 to SHA256 in Exchange Server</title>
			<link>https://get-itips.capazero.net/posts/wmsvc-sha256-exchange</link>
			<description>&lt;p&gt;The &lt;a href="https://microsoft.github.io/CSS-Exchange/Diagnostics/HealthChecker/"&gt;Exchange Health Checker&lt;/a&gt; checks for the presence of SHA1 signed certificates in the output of Get-ExchangeCertificate, upon checking on a customer where I ran the script, a warning was raised about SHA1 certificates being present, the only SHA1-signed certificate was the one that Exchange creates for the Web Management service of IIS (WMSvc) when installing Exchange. This certificate can be SHA1-signed if, at the time of the setup, Exchange did not create certificates with a signature algorithm of SHA256.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/wmsvc-sha256-exchange</guid>
			<pubDate>Thu, 07 Jul 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="background"&gt;Background&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://microsoft.github.io/CSS-Exchange/Diagnostics/HealthChecker/"&gt;Exchange Health Checker&lt;/a&gt; checks for the presence of SHA1 signed certificates in the output of Get-ExchangeCertificate, upon checking on a customer where I ran the script, a warning was raised about SHA1 certificates being present, the only SHA1-signed certificate was the one that Exchange creates for the Web Management service of IIS (WMSvc) when installing Exchange. This certificate can be SHA1-signed if, at the time of the setup, Exchange did not create certificates with a signature algorithm of SHA256.&lt;/p&gt;
&lt;p&gt;It seems that &lt;a href="https://blog.rmilne.ca/2016/07/20/exchange-self-signed-sha2-certificates/"&gt;starting from CU13&lt;/a&gt; of Exchange 2013 and Exchange 2016 CU2, self-signed certificates created using New-ExchangeCertificate started to be created using SHA256.&lt;/p&gt;
&lt;h1 id="checking-if-using-sha1-for-wmsvc-service"&gt;Checking if using SHA1 for WMSvc service&lt;/h1&gt;
&lt;p&gt;If you are not sure, confirm that you are indeed using a SHA1-signed certificate for WMSvc&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;em&gt;IIS Manager&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click on the name of the server in the left pane&lt;/li&gt;
&lt;li&gt;2-Click on &lt;em&gt;Management Service&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Take note of the name of the SSL certificate (this will be the friendly name in the &lt;em&gt;Certificates&lt;/em&gt; snap-in)&lt;/li&gt;
&lt;li&gt;Open &lt;em&gt;mmc.exe&lt;/em&gt; and add the &lt;em&gt;certificates Snap-In&lt;/em&gt; for &lt;em&gt;local computer&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Search for the certificate, it will be something like “WMSvc - ServerName” in the personal store, open the properties of the certificate&lt;/li&gt;
&lt;li&gt;Click the &lt;em&gt;Details&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Check if &lt;em&gt;signature algorithm&lt;/em&gt; field is SHA1&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="getting-a-new-self-signed-certificate-sha256-signed"&gt;Getting a new self-signed certificate SHA256-signed&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Prerequisite:&lt;/strong&gt; You must be running Exchange 2013 CU13 or later or Exchange 2016 CU2, Exchange 2019 creates SHA2 certificates from RTM&lt;/p&gt;
&lt;p&gt;Open Exchange Management Shell and run this cmdlet to create a new self-signed certificate&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;New-ExchangeCertificate -SubjectName &amp;quot;cn=WMSvc-SHA2-SERVERNAME&amp;quot; -FriendlyName &amp;quot;WMSVC-SHA2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Replace SERVERNAME in the cmdlet with the actual name of your Exchange Server&lt;/p&gt;
&lt;h1 id="verify-the-new-certificate-was-generated-and-trust-it"&gt;Verify the new certificate was generated and trust it&lt;/h1&gt;
&lt;p&gt;If you still have the certificates snap-in open, you will now have a &lt;em&gt;Issued to&lt;/em&gt; certificate with the subject name we used in the step above.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Right-click &amp;amp; copy this certificate&lt;/li&gt;
&lt;li&gt;Select &lt;em&gt;Trusted Root Certification Authorities&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Right-click &amp;amp; paste this certificate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Swapping the certificate used by WMSvc service&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;em&gt;IIS Manager&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Click on the name of the server in the left pane&lt;/li&gt;
&lt;li&gt;2-Click on &lt;em&gt;Management Service&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Actions&lt;/em&gt; pane, click &lt;em&gt;Stop&lt;/em&gt;, accept any warning&lt;/li&gt;
&lt;li&gt;Now you can select different certificate in the &lt;em&gt;SSL Certificate&lt;/em&gt; drop-down, choose the newly generated cert&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Actions&lt;/em&gt; pane, click &lt;em&gt;Start&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should be it, you will now have a Web Management Service running a SHA2 signed certificate and the health checker should not raise you this warning.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Cmdlets run by the Hybrid Configuration Wizard</title>
			<link>https://get-itips.capazero.net/posts/hcw-cmdlets</link>
			<description>&lt;p&gt;Based on several runs of the Hybrid Configuration Wizard from different deployments, these appear to be the cmdlets ran either against On-Premises (Exchange Server) and against the Tenant (Exchange Online).
I'll update these if I found any missing cmdlets, and I also would like to split them between Minimal and Full hybrid options.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/hcw-cmdlets</guid>
			<pubDate>Wed, 29 Jun 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Based on several runs of the Hybrid Configuration Wizard from different deployments, these appear to be the cmdlets ran either against On-Premises (Exchange Server) and against the Tenant (Exchange Online).
I'll update these if I found any missing cmdlets, and I also would like to split them between Minimal and Full hybrid options.&lt;/p&gt;
&lt;h1 id="classic-or-modern-full"&gt;Classic or Modern Full&lt;/h1&gt;
&lt;h2 id="get-cmdlets"&gt;Get- cmdlets&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cmdlet&lt;/th&gt;
&lt;th&gt;Where&lt;/th&gt;
&lt;th&gt;Parameters&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Get-ExchangeServer&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-MailboxDatabase&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-IncludePreExchange2013: $true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-OrganizationConfig&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-HybridConfiguration&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-AcceptedDomain&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-FederatedOrganizationIdentifier&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-IncludeExtendedDomainInfo: $false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-FederationTrust&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-WebServicesVirtualDirectory&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-ADPropertiesOnly: $true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-RemoteDomain&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-OrganizationConfig&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-OnPremisesOrganization&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-AcceptedDomain&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-MigrationEndpoint&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-ExchangeCertificate&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Server &lt;ExchangeHost&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-RemoteDomain&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-EmailAddressPolicy&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-OrganizationRelationship&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-OrganizationConfig&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-OrganizationRelationship&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-OwaVirtualDirectory&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-ADPropertiesOnly: $true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-AvailabilityAddressSpace&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-SendConnector&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-ReceiveConnector&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Server &lt;ExchangeHost&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-FederationInformation*1&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-FederationTrust*1&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Identity 'Microsoft Federation Gateway'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-FederationTrust*1&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;-Identity MicrosoftOnline&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-OutboundConnector&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-InboundConnector&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-IntraOrganizationConfiguration&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-IntraOrganizationConfiguration&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;-OrganizationGuid '&lt;guid&gt;'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-IntraOrganizationConnector&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-IntraOrganizationConnector&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-AuthConfig&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-ActiveSyncVirtualDirectory&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-ADPropertiesOnly: $true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Get-PartnerApplication&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Identity 'Exchange Online'&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="new-set-update-cmdlets"&gt;New-, Set- &amp;amp; Update- cmdlets&lt;/h2&gt;
&lt;table class="table"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cmdlet&lt;/th&gt;
&lt;th&gt;Where&lt;/th&gt;
&lt;th&gt;Parameters (Example)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Update-EmailAddressPolicy&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Identity 'Default Policy' -UpdateSecondaryAddressesOnly: $true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New/Set-HybridConfiguration&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-ClientAccessServers $null -ExternalIPAddresses $null -Domains 'contoso.com','fabrikam.com' -OnPremisesSmartHost 'mail.contoso.com' -TLSCertificateName '&lt;I&gt;CN=WorldSSL DV CA, O=Sàrl, C=LU&amp;lt;S&amp;gt;CN=mail.contoso.com' -SendingTransportServers EXC01 -ReceivingTransportServers EXC01 -EdgeTransportServers $null -Features FreeBusy,MoveMailbox,Mailtips,MessageTracking,OwaRedirection,OnlineArchive,SecureMail,Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set-EmailAddressPolicy&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Identity 'Default Policy' -ForceUpgrade: $true -EnabledEmailAddressTemplates 'SMTP:&amp;#64;contoso.com','X400:c=US;a= ;p=Contoso;o=Contoso;','smtp:%m&amp;#64;contoso.mail.onmicrosoft.com'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New/Set-OrganizationRelationship&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-FreeBusyAccessEnabled: $true -FreeBusyAccessLevel LimitedDetails -MailTipsAccessEnabled: $true -MailTipsAccessLevel All -DeliveryReportEnabled: $true -PhotosEnabled: $true -TargetOwaURL '&lt;a href="https://outlook.office.com/mail%27"&gt;https://outlook.office.com/mail'&lt;/a&gt; -Identity 'On-premises to O365 - 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New/Set-OrganizationRelationship&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;-FreeBusyAccessEnabled: $true -FreeBusyAccessLevel LimitedDetails -TargetSharingEpr $null -MailTipsAccessEnabled: $true -MailTipsAccessLevel All -DeliveryReportEnabled: $true -PhotosEnabled: $true -TargetOwaURL '&lt;a href="https://mail.contoso.com/owa%27"&gt;https://mail.contoso.com/owa'&lt;/a&gt; -Identity 'O365 to On-premises - 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New/Set-SendConnector&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Name 'Outbound to Office 365 - 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76' -AddressSpaces 'smtp:contoso.mail.onmicrosoft.com;1' -DNSRoutingEnabled: $true -ErrorPolicies Default -Fqdn 'mail.contoso.com' -RequireTLS: $true -IgnoreSTARTTLS: $false -SourceTransportServers EXC01 -SmartHosts $null -TLSAuthLevel DomainValidation -DomainSecureEnabled: $false -TLSDomain 'mail.protection.outlook.com' -CloudServicesMailEnabled: $true -TLSCertificateName '&lt;I&gt;CN=Go mommy Secure Certificate Authority - G2, OU=&lt;a href="http://certs.gomommy.com/repository/,"&gt;http://certs.gomommy.com/repository/,&lt;/a&gt; O=&amp;quot;Gomommy.com, Inc.&amp;quot;, L=Scottsdale, S=Arizona, C=US&amp;lt;S&amp;gt;CN=mail.contoso.com' -Identity 'Outbound to Office 365 - 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set-ReceiveConnector&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-AuthMechanism 'Tls, Integrated, BasicAuth, BasicAuthRequireTLS, ExchangeServer' -Bindings '[&lt;span&gt;]:25','0.0.0.0:25' -Fqdn 'EXC01.contoso.com' -PermissionGroups 'AnonymousUsers, ExchangeServers, ExchangeLegacyServers' -RemoteIPRanges '&lt;/span&gt;-ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff','0.0.0.0-255.255.255.255' -RequireTLS: $false -TLSDomainCapabilities 'mail.protection.outlook.com:AcceptCloudServicesMail' -TLSCertificateName '&lt;I&gt;CN=Go mommy Secure Certificate Authority - G2, OU=&lt;a href="http://certs.gomommy.com/repository/,"&gt;http://certs.gomommy.com/repository/,&lt;/a&gt; O=&amp;quot;Gomommy.com, Inc.&amp;quot;, L=Scottsdale, S=Arizona, C=US&amp;lt;\S&amp;gt;CN=mail.contoso.com' -TransportRole FrontendTransport -Identity 'EXC01\Default Frontend EXC01'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New/Set-OutboundConnector&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;-Name 'Outbound to 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76' -RecipientDomains 'contoso.com','fabrikam.com' -SmartHosts 'mail.contoso.com' -ConnectorSource HybridWizard -ConnectorType OnPremises -TLSSettings DomainValidation -TLSDomain 'mail.contoso.com' -CloudServicesMailEnabled: $true -RouteAllMessagesViaOnPremises: $false -UseMxRecord: $false -IsTransportRuleScoped: $false -Identity 'Outbound to 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New/Set-InboundConnector&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;-Name 'Inbound from 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76' -CloudServicesMailEnabled: $true -ConnectorSource HybridWizard -ConnectorType OnPremises -RequireTLS: $true -SenderDomains '&lt;em&gt;' -SenderIPAddresses $null -RestrictDomainsToIPAddresses: $false -TLSSenderCertificateName '&lt;/em&gt;.contoso.com' -AssociatedAcceptedDomains $null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set-OnPremisesOrganization&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;-HybridDomains 'contoso.com','fabrikam.com' -InboundConnector 'Inbound from 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76' -OutboundConnector 'Outbound to 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76' -OrganizationRelationship 'O365 to On-premises - 6fc3a33e-3ca2-4528-8e3c-75e5d4e9db76'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New/Set-PartnerApplication&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Identity 'Exchange Online' -Enabled: $true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New-RemoteDomain&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Name 'Hybrid Domain - contoso.mail.onmicrosoft.com'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New-AcceptedDomain&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-DomainName 'contoso.mail.onmicrosoft.com' -Name 'contoso.mail.onmicrosoft.com'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New-IntraOrganizationConnector&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Name 'HybridIOC - &lt;guid&gt;' -DiscoveryEndpoint '&lt;a href="https://autodiscover-s.outlook.com/autodiscover/autodiscover.svc%27"&gt;https://autodiscover-s.outlook.com/autodiscover/autodiscover.svc'&lt;/a&gt; -TargetAddressDomains 'contoso.mail.onmicrosoft.com' -Enabled: $true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New-IntraOrganizationConnector&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;-Name 'HybridIOC - &lt;guid&gt;' -DiscoveryEndpoint '&lt;a href="https://mail.contoso.com/autodiscover/autodiscover.svc%27"&gt;https://mail.contoso.com/autodiscover/autodiscover.svc'&lt;/a&gt; -TargetAddressDomains 'contoso.com','fabrikam.com' -Enabled: $true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New-AuthServer&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Name 'ACS - &lt;guid&gt;' -AuthMetadataUrl '&lt;a href="https://accounts.accesscontrol.windows.net/22e190d2-28f3-4a09-898f-f7bb4c477af7/metadata/json/1%27"&gt;https://accounts.accesscontrol.windows.net/22e190d2-28f3-4a09-898f-f7bb4c477af7/metadata/json/1'&lt;/a&gt; -DomainName 'contoso.com','contoso.mail.onmicrosoft.com'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New-AuthServer&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Name 'EvoSts - &lt;guid&gt;' -AuthMetadataUrl '&lt;a href="https://login.windows.net/contoso.onmicrosoft.com/federationmetadata/2007-06/federationmetadata.xml%27"&gt;https://login.windows.net/contoso.onmicrosoft.com/federationmetadata/2007-06/federationmetadata.xml'&lt;/a&gt; -Type AzureAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New-FederationTrust*1&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-Name 'Microsoft Federation Gateway' -Thumbprint &lt;thumbprint&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set-FederatedOrganizationIdentifier&lt;/td&gt;
&lt;td&gt;Exchange Server&lt;/td&gt;
&lt;td&gt;-AccountNamespace 'contoso.com' -DelegationFederationTrust 'Microsoft Federation Gateway' -Enabled: $true -DefaultDomain $null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Set-FederatedOrganizationIdentifier&lt;/td&gt;
&lt;td&gt;Exchange Online&lt;/td&gt;
&lt;td&gt;-DefaultDomain 'contoso.mail.onmicrosoft.com' -Enabled: $true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;*1 Apparently only if Exchange 2010 is present in the Exchange Organization&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>The Microsoft Exchange Unified Messaging Call Router service rejected the call for the following reason</title>
			<link>https://get-itips.capazero.net/posts/um-call-rejected</link>
			<description>&lt;p&gt;In the process of adding an Exchange Server 2019 to a current Exchange organization with Exchange Server 2013, Auto Attendant/UM stopped working, investigating event viewer logs
in Exchange Server 2013 server, I found this event entry (Event Id 1647)&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/um-call-rejected</guid>
			<pubDate>Wed, 11 May 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In the process of adding an Exchange Server 2019 to a current Exchange organization with Exchange Server 2013, Auto Attendant/UM stopped working, investigating event viewer logs
in Exchange Server 2013 server, I found this event entry (Event Id 1647)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;The Microsoft Exchange Unified Messaging Call Router service rejected the call for the following reason: 15647;source=&amp;quot;ex2013.contoso.net&amp;quot;;reason=&amp;quot;Access to Active Directory error occured.&amp;quot; Microsoft.Exchange.UM.UMCore.CallRejectedException: The Mailbox server with the FQDN ex2019.contoso.net couldn't be located in Active Directory.
   at Microsoft.Exchange.UM.UMCore.EnterpriseRedirectionTarget.GetRoutingInformation(String serverFqdn, Boolean isSecuredCall, String&amp;amp; routingFqdn, Int32&amp;amp; routingPort)
   at Microsoft.Exchange.UM.UMCore.EnterpriseRedirectionTarget.GetBackEndBrickRedirectionTarget(ADUser user, IRoutingContext context)
   at Microsoft.Exchange.UM.UMCore.EnterpriseRedirectionTarget.GetForNonUserSpecificCall(OrganizationId orgId, IRoutingContext context)
   at Microsoft.Exchange.UM.UMCore.AutoAttendantCallHandler.HandleCall(CafeRoutingContext context)
   at Microsoft.Exchange.UM.UMCore.RouterCallHandler.InternalHandle(ICallHandler[] handlers, CafeRoutingContext context)
   at Microsoft.Exchange.UM.UcmaPlatform.UcmaCallRouterPlatform.TryHandleIncomingCall(CallReceivedEventArgs`1 args, Exception&amp;amp; error, Boolean&amp;amp; isDiagnosticCall)
   at Microsoft.Exchange.UM.UcmaPlatform.UcmaUtils.&amp;lt;&amp;gt;c__DisplayClassf.&amp;lt;ProcessPlatformRequestAndReportErrors&amp;gt;b__d()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The error might be misleading as it implies some Active Directory connection issue, but it was mentioning the newly incorporated Exchange Server 2019 and I thought, why?&lt;/p&gt;
&lt;p&gt;I then remember I migrated System Mailboxes to Exchange 2019 box, especially, these two, that have UM-related capabilities:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Name                  : SystemMailbox{bb558c35-97f1-4cb9-8ff7-d53741dc928c}
PersistedCapabilities : {OrganizationCapabilityUMGrammarReady, OrganizationCapabilityPstProvider,
                        OrganizationCapabilityMessageTracking, OrganizationCapabilityMailRouting,
                        OrganizationCapabilityClientExtensions, OrganizationCapabilityGMGen,
                        OrganizationCapabilityOABGen, OrganizationCapabilityUMGrammar}

Name                  : SystemMailbox{e0dc1c29-89c3-4034-b678-e6c29d823ed9}
PersistedCapabilities : {OrganizationCapabilityUMDataStorage}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Boom! that might be it... so I moved them back to Exchange 2013 mailbox database and AutoAttendant/UM started to work again.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Enabling Teams Shared Channels 101</title>
			<link>https://get-itips.capazero.net/posts/shared-channels-101</link>
			<description>&lt;p&gt;#Background&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/shared-channels-101</guid>
			<pubDate>Wed, 27 Apr 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;#Background&lt;/p&gt;
&lt;p&gt;Teams Shared Channels is a great new feature that is still in Public Preview, the goal of this post is to create a concise guide to follow in order to enable Shared Channels in your Tenant&lt;/p&gt;
&lt;h1 id="azure-ad-cross-tenant-access-policies"&gt;Azure AD Cross Tenant Access Policies&lt;/h1&gt;
&lt;p&gt;These are the basis of Teams Shared Channels and we must begin configuring them in order to enable Teams Shared Channels later.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Browse to &lt;a href="https://aad.portal.azure.com/"&gt;https://aad.portal.azure.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Azure Active Directory&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;External Identities&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Cross-Tenant access settings (preview)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Add Organization&lt;/strong&gt;, this would be the information of the other organization we would like to interact with.&lt;/li&gt;
&lt;li&gt;Enter the &lt;strong&gt;Tenant ID or domain name&lt;/strong&gt;, if you use the latter, it is in the form of tenantname.onmicrosoft.com&lt;/li&gt;
&lt;li&gt;It should resolve the Name and Tenant ID, click &lt;strong&gt;Add&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A new entry should be added on the list and a default of &amp;quot;&lt;strong&gt;Inherited from default&lt;/strong&gt;&amp;quot; in &lt;strong&gt;Inbound Access&lt;/strong&gt; and &lt;strong&gt;Outbound access&lt;/strong&gt; columns should be displayed.&lt;/li&gt;
&lt;li&gt;We are going to customize per organization instead of using the defaults, but you can also customize the defaults. Click on the &lt;strong&gt;Inherited from default&lt;/strong&gt; in the &lt;strong&gt;inbound access&lt;/strong&gt; column&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;B2B Direct connect&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Customize settings&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Verify &lt;strong&gt;Allow Access&lt;/strong&gt; and &lt;strong&gt;All External users and groups&lt;/strong&gt; are selected (Although it can be customized to scope to certain users and groups), and Click &lt;strong&gt;Save&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Applications&lt;/strong&gt; and verify &lt;strong&gt;Allow Access&lt;/strong&gt; and &lt;strong&gt;all applications&lt;/strong&gt; are selected (although it can be customized to certain applications), click &lt;strong&gt;Save&lt;/strong&gt; if you had to modify any setting here.&lt;/li&gt;
&lt;li&gt;Go back to the &lt;strong&gt;External identities&lt;/strong&gt; screen clicking on &lt;strong&gt;External Identities&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Inbound access is configured when the direction of the collaboration is ToMyTenancy, in other words when we want to invite someone from the other organization to a Shared channel created on our tenant.&lt;/li&gt;
&lt;li&gt;If you want your users to be able to participate in the other organization’s shared channels, configure the same settings under inherited from default in Outbound access column.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This configuration can be viewed with the Graph PowerShell cmdlet &lt;strong&gt;Get-MgPolicyCrossTenantAccessPolicy&lt;/strong&gt; (Microsoft.Graph.Identity.SignIns) and the Exchange Online PowerShell cmdlet &lt;strong&gt;Get-CrossTenantAccessPolicy&lt;/strong&gt;, although not yet so user-friendly.&lt;/p&gt;
&lt;p&gt;Check this great resources in case you want to understand more about these policies:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.michev.info/Blog/Post/3681/cross-tenant-access-policy-xtap-and-the-graph-api"&gt;https://www.michev.info/Blog/Post/3681/cross-tenant-access-policy-xtap-and-the-graph-api&lt;/a&gt;
&lt;a href="https://practical365.com/cross-tenant-access-policies/"&gt;https://practical365.com/cross-tenant-access-policies/&lt;/a&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/external-identities/b2b-direct-connect-overview"&gt;https://docs.microsoft.com/en-us/azure/active-directory/external-identities/b2b-direct-connect-overview&lt;/a&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/external-identities/cross-tenant-access-settings-b2b-direct-connect"&gt;https://docs.microsoft.com/en-us/azure/active-directory/external-identities/cross-tenant-access-settings-b2b-direct-connect&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="teams-admin-center"&gt;Teams Admin Center&lt;/h1&gt;
&lt;h2 id="teams-policies"&gt;Teams policies&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Browse to &lt;a href="https://admin.teams.microsoft.com/"&gt;https://admin.teams.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Teams – Teams policies&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Global (org-wide default)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Verify that &lt;strong&gt;Create shared channels&lt;/strong&gt; and &lt;strong&gt;Join external shared channels&lt;/strong&gt; is &lt;strong&gt;enabled&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You can also create a new policy if you don’t want to use the Global one&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="teams-update-policies"&gt;Teams update policies&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Click on &lt;strong&gt;Teams – Teams update policies&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Global (org-wide default)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Verify that under the &lt;strong&gt;Show preview features&lt;/strong&gt; combo, &lt;strong&gt;Enabled&lt;/strong&gt; is selected&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Apply&lt;/strong&gt; if necessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="teams-client"&gt;Teams client&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Click the &lt;strong&gt;…&lt;/strong&gt; in the Teams desktop client&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;About – Public Preview version&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Accept the agreement&lt;/li&gt;
&lt;li&gt;You should now be able to create a Shared Channel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Is not necessary to load Teams using the Public Preview version to later interact with the Channel once it is created.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>How to leave a Teams meeting chat, even if you are the organizer</title>
			<link>https://get-itips.capazero.net/posts/leave-from-meeting-chat</link>
			<description>&lt;p&gt;I noticed that, if you schedule a Teams Meeting, (and you are the organizer), these are the options available for the meeting chat/conversation:&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/leave-from-meeting-chat</guid>
			<pubDate>Thu, 10 Feb 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I noticed that, if you schedule a Teams Meeting, (and you are the organizer), these are the options available for the meeting chat/conversation:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/NoLeaveOption.png" class="img-fluid" alt="Teams Meetings No Leave Option" /&gt;&lt;/p&gt;
&lt;p&gt;See? No &lt;strong&gt;Leave&lt;/strong&gt; option.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Did you know? Leave option will show up to attendes only if the meeting has &amp;gt; 2 participants&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/LeaveOption.png" class="img-fluid" alt="Teams Meetings Leave Option" /&gt;&lt;/p&gt;
&lt;h1 id="the-problem"&gt;The problem?&lt;/h1&gt;
&lt;p&gt;What about if, for some reason, you are not anymore in the topic, you switched roles in your company, or you just want to leave the conversation for good?&lt;/p&gt;
&lt;p&gt;Sure, you can mute or hide the conversation, but it will show up again if someone writes into the meeting chat.&lt;/p&gt;
&lt;p&gt;So, I investigated a little bit with Developer tools, as I did in &lt;a href="https://get-itips.capazero.net/posts/extra-information-federated-teams"&gt;Getting some extra information about Teams federated users using PowerShell&lt;/a&gt; and &lt;a href="https://get-itips.capazero.net/posts/clear-teams-notifications"&gt;Mark Teams notifications as read&lt;/a&gt; to see what happens when a non-organizer leaves a Meeting chat/conversation and found out that a REST API is called to do that, so decided to give it a try and force an organizer to Leave a Teams meeting chat.&lt;/p&gt;
&lt;h1 id="prerequisites"&gt;PreRequisites&lt;/h1&gt;
&lt;p&gt;The tricky part is that we need to specify two things in the URL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Some sort of thread ID created for the meeting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our Teams User ID&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Sample URL&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;https://amer.ng.msg.teams.microsoft.com/v1/threads/19:meeting_MjRkYTA1ZWItZjVhYi00MDVjWJiZDQtMDQwZGU3OTkwZTIz&amp;#64;thread.v2/members/8:orgid:cb13db92-6e3a-4f30-a4a1-3be0d94d4ede 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So how do we get these values? Currently, I am trying to figure out a scripted way to do this, but for now, we can extract the thread ID related to the meeting by editing the meeting itself from Teams web, look in the address bar and copy and paste the whole URL to your favorite text editor.&lt;/p&gt;
&lt;p&gt;Then, grab everything between the &lt;strong&gt;19:meeting&lt;/strong&gt; and &lt;strong&gt;&amp;#64;thread.v2&lt;/strong&gt;, (including those strings), you will end up with something similar to this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;19:meeting_NTNjZGZmODItYjc0NS00yLTkyOWMtZmRhOWEwNDc2ZWEy&amp;#64;thread.v2 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s get our user id, the id of the organizer and for this, I used Teams PowerShell, but there are probably other options.&lt;/p&gt;
&lt;p&gt;I run&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-TeamUser -GroupId 13854e5-baf1-403e-ad3f-b26687383541 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using a &lt;code&gt;GroupId&lt;/code&gt; of a team where the organizer belongs, and in the results, the column on the left will show you the &lt;code&gt;UserId&lt;/code&gt; that we need, something like&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cb13db92-6e3a-4f30-a4a1-3be0d94d4ede&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ok, now we have everything we need, this is the script, go and replace the thread ID and userId in the lines that begin with &lt;code&gt;Invoke-WebRequest&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt;, you have to provide the credentials of the organizer when asked&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Import-Module AADInternals  

#This will prompt for credentials so it supports MFA login  

$token = Get-AADIntAccessTokenForTeams  

$skypeToken = Get-AADIntSkypeToken -AccessToken $token 

Invoke-WebRequest -UseBasicParsing -Uri &amp;quot;https://amer.ng.msg.teams.microsoft.com/v1/threads/&amp;lt;MEETING_ID_GOES_HERE&amp;gt;/members/8:orgid:&amp;lt;YOUR_USERID&amp;gt;&amp;quot; ` 

-Method &amp;quot;DELETE&amp;quot; ` 

-Headers &amp;#64;{ 

&amp;quot;method&amp;quot;=&amp;quot;DELETE&amp;quot; 

  &amp;quot;authority&amp;quot;=&amp;quot;amer.ng.msg.teams.microsoft.com&amp;quot; 

  &amp;quot;scheme&amp;quot;=&amp;quot;https&amp;quot; 

  &amp;quot;path&amp;quot;=&amp;quot;/v1/threads/&amp;lt;MEETING_ID_GOES_HERE&amp;gt;/members/8:orgid:&amp;lt;YOUR_USERID&amp;gt;&amp;quot; 

  &amp;quot;sec-ch-ua&amp;quot;=&amp;quot;`&amp;quot; Not A;Brand`&amp;quot;;v=`&amp;quot;99`&amp;quot;, `&amp;quot;Chromium`&amp;quot;;v=`&amp;quot;98`&amp;quot;, `&amp;quot;Microsoft Edge`&amp;quot;;v=`&amp;quot;98`&amp;quot;&amp;quot; 

  &amp;quot;x-ms-session-id&amp;quot;=&amp;quot;edba78e0-8e34-767a-2aae-fcb1e3d8bb68&amp;quot; 

  &amp;quot;behavioroverride&amp;quot;=&amp;quot;redirectAs404&amp;quot; 

  &amp;quot;x-ms-scenario-id&amp;quot;=&amp;quot;738&amp;quot; 

  &amp;quot;x-ms-client-env&amp;quot;=&amp;quot;pds-prod-comm-usce-01&amp;quot; 

  &amp;quot;x-ms-client-type&amp;quot;=&amp;quot;web&amp;quot; 

  &amp;quot;sec-ch-ua-mobile&amp;quot;=&amp;quot;?0&amp;quot; 

  &amp;quot;clientinfo&amp;quot;=&amp;quot;os=windows; osVer=10; proc=x86; lcid=es-es; deviceType=1; country=es; clientName=skypeteams; clientVer=1415/1.0.0.2022020411; utcOffset=-06:00; timezone=America/Costa_Rica&amp;quot; 

  &amp;quot;x-ms-client-version&amp;quot;=&amp;quot;1415/1.0.0.2022020411&amp;quot; 

  &amp;quot;x-ms-user-type&amp;quot;=&amp;quot;null&amp;quot; 

  &amp;quot;authentication&amp;quot;=&amp;quot;skypetoken=$skypeToken&amp;quot; 

  &amp;quot;sec-ch-ua-platform&amp;quot;=&amp;quot;`&amp;quot;Windows`&amp;quot;&amp;quot; 

  &amp;quot;origin&amp;quot;=&amp;quot;https://teams.microsoft.com&amp;quot; 

  &amp;quot;sec-fetch-site&amp;quot;=&amp;quot;same-site&amp;quot; 

  &amp;quot;sec-fetch-mode&amp;quot;=&amp;quot;cors&amp;quot; 

  &amp;quot;sec-fetch-dest&amp;quot;=&amp;quot;empty&amp;quot; 

  &amp;quot;referer&amp;quot;=&amp;quot;https://teams.microsoft.com/&amp;quot; 

  &amp;quot;accept-encoding&amp;quot;=&amp;quot;gzip, deflate, br&amp;quot; 

  &amp;quot;accept-language&amp;quot;=&amp;quot;es&amp;quot; 

} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(This script is a very first version, that means I would like to improve it, and it is provided without any guarantee.)&lt;/p&gt;
&lt;p&gt;Once run, you will receive a 200 status code HTTP output, and this will appear now in the Meeting chat/conversation&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/Removed.png" class="img-fluid" alt="Removed from Teams Meetings Chat" /&gt;&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This might be useful for very specific cases, and, until Microsoft provides a UI for an organizer to leave a Teams meeting chat for good, we can use this little script.
If, for some reason, you want to return to the Meeting chat, you can ask a member of the Meeting chat (roster) to add you again&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Mark Teams notifications as read</title>
			<link>https://get-itips.capazero.net/posts/clear-teams-notifications</link>
			<description>&lt;p&gt;Hello!&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/clear-teams-notifications</guid>
			<pubDate>Tue, 04 Jan 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hello!&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The idea behind this blog post comes from the same idea behind this other blog post &lt;a href="https://get-itips.capazero.net/posts/extra-information-federated-teams"&gt;Getting some extra information about Teams federated users using PowerShell&lt;/a&gt;, so you can read more details about how this is done and what it requires there.&lt;/p&gt;
&lt;p&gt;Essentially, I continued exploring client-side API calls made by the Teams client, and I decided to play around with the one that is called to mark the notifications that appear under Activity in the Teams app bar as read.&lt;/p&gt;
&lt;h1 id="why"&gt;Why&lt;/h1&gt;
&lt;p&gt;Maybe you are returning from vacations/holidays and you have a lot of notifications to mark as read, there isn't currently an easy way to do this using the Teams client, you have to mark as read every single one, so you might want to clear the clutter more easily.&lt;/p&gt;
&lt;h1 id="the-script"&gt;The Script&lt;/h1&gt;
&lt;p&gt;This script is a very first version, that means I would like to improve it a lot, and it is provided without any guarantee.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;# Clear all Microsoft Teams notifications

Import-Module AADInternals

#This will prompt for credentials so it supports MFA login
$token = Get-AADIntAccessTokenForTeams

$skypeToken = Get-AADIntSkypeToken -AccessToken $token

$result=Invoke-WebRequest -UseBasicParsing -Uri &amp;quot;https://amer.ng.msg.teams.microsoft.com/v1/users/ME/conversations/48%3Anotifications/messages?view=msnp24Equivalent|supportsMessageProperties&amp;amp;pageSize=200&amp;quot; `
-Headers &amp;#64;{
&amp;quot;method&amp;quot;=&amp;quot;GET&amp;quot;
  &amp;quot;authority&amp;quot;=&amp;quot;amer.ng.msg.teams.microsoft.com&amp;quot;
  &amp;quot;scheme&amp;quot;=&amp;quot;https&amp;quot;
  &amp;quot;path&amp;quot;=&amp;quot;/v1/users/ME/conversations/48%3Anotifications/messages?view=msnp24Equivalent|supportsMessageProperties&amp;amp;pageSize=200&amp;quot;
  &amp;quot;sec-ch-ua&amp;quot;=&amp;quot;`&amp;quot; Not A;Brand`&amp;quot;;v=`&amp;quot;99`&amp;quot;, `&amp;quot;Chromium`&amp;quot;;v=`&amp;quot;96`&amp;quot;, `&amp;quot;Microsoft Edge`&amp;quot;;v=`&amp;quot;96`&amp;quot;&amp;quot;
  &amp;quot;x-ms-session-id&amp;quot;=&amp;quot;ae16f178-a088-a7bb-603b-27aad38b6c88&amp;quot;
  &amp;quot;behavioroverride&amp;quot;=&amp;quot;redirectAs404&amp;quot;
  &amp;quot;x-ms-scenario-id&amp;quot;=&amp;quot;130&amp;quot;
  &amp;quot;x-ms-client-cpm&amp;quot;=&amp;quot;ApplicationLaunch&amp;quot;
  &amp;quot;x-ms-client-env&amp;quot;=&amp;quot;pds-prod-azsc-usce-01&amp;quot;
  &amp;quot;x-ms-client-type&amp;quot;=&amp;quot;web&amp;quot;
  &amp;quot;sec-ch-ua-mobile&amp;quot;=&amp;quot;?0&amp;quot;
  &amp;quot;clientinfo&amp;quot;=&amp;quot;os=windows; osVer=10; proc=x86; lcid=en-us; deviceType=1; country=us; clientName=skypeteams; clientVer=1415/1.0.0.2021120940; utcOffset=-06:00; timezone=America/Costa_Rica&amp;quot;
  &amp;quot;x-ms-client-version&amp;quot;=&amp;quot;1415/1.0.0.2021120940&amp;quot;
  &amp;quot;x-ms-user-type&amp;quot;=&amp;quot;null&amp;quot;
  &amp;quot;authentication&amp;quot;=&amp;quot;skypetoken=$skypeToken&amp;quot;
  &amp;quot;sec-ch-ua-platform&amp;quot;=&amp;quot;`&amp;quot;Windows`&amp;quot;&amp;quot;
  &amp;quot;origin&amp;quot;=&amp;quot;https://teams.microsoft.com&amp;quot;
  &amp;quot;sec-fetch-site&amp;quot;=&amp;quot;same-site&amp;quot;
  &amp;quot;sec-fetch-mode&amp;quot;=&amp;quot;cors&amp;quot;
  &amp;quot;sec-fetch-dest&amp;quot;=&amp;quot;empty&amp;quot;
  &amp;quot;referer&amp;quot;=&amp;quot;https://teams.microsoft.com/&amp;quot;
  &amp;quot;accept-encoding&amp;quot;=&amp;quot;gzip, deflate, br&amp;quot;
  &amp;quot;accept-language&amp;quot;=&amp;quot;es,es-ES;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;quot;
}

$messages=ConvertFrom-Json -InputObject $result.Content


$NotificationsToClear=$messages.messages | where-object {$_.properties.isread -ne &amp;quot;True&amp;quot;}


foreach($notifications in $notificationsToClear)
{

$urlFQDN=&amp;quot;https://amer.ng.msg.teams.microsoft.com&amp;quot;
$urlPart1=&amp;quot;/v1/users/ME/conversations/48%3Anotifications/messages/&amp;quot;
$urlPart3=&amp;quot;/properties?name=isread&amp;quot;
$finalUrl=$urlFQDN+$urlPart1+$notifications.Id+$urlPart3

Write-Host &amp;quot;Clearing notification&amp;quot; $notifications.Id

$result=Invoke-WebRequest -UseBasicParsing -Uri $finalUrl `
-Method &amp;quot;PUT&amp;quot; `
-Headers &amp;#64;{
&amp;quot;method&amp;quot;=&amp;quot;PUT&amp;quot;
  &amp;quot;authority&amp;quot;=&amp;quot;amer.ng.msg.teams.microsoft.com&amp;quot;
  &amp;quot;scheme&amp;quot;=&amp;quot;https&amp;quot;
  &amp;quot;path&amp;quot;=$urlPart1+$notifications.Id+$urlPart3
  &amp;quot;sec-ch-ua&amp;quot;=&amp;quot;`&amp;quot; Not A;Brand`&amp;quot;;v=`&amp;quot;99`&amp;quot;, `&amp;quot;Chromium`&amp;quot;;v=`&amp;quot;96`&amp;quot;, `&amp;quot;Microsoft Edge`&amp;quot;;v=`&amp;quot;96`&amp;quot;&amp;quot;
  &amp;quot;x-ms-user-type&amp;quot;=&amp;quot;null&amp;quot;
  &amp;quot;x-ms-client-type&amp;quot;=&amp;quot;web&amp;quot;
  &amp;quot;x-ms-client-version&amp;quot;=&amp;quot;1415/1.0.0.2021120940&amp;quot;
  &amp;quot;authentication&amp;quot;=&amp;quot;skypetoken=$skypeToken&amp;quot;
  &amp;quot;sec-ch-ua-platform&amp;quot;=&amp;quot;`&amp;quot;Windows`&amp;quot;&amp;quot;
  &amp;quot;x-ms-scenario-id&amp;quot;=&amp;quot;716&amp;quot;
  &amp;quot;x-ms-client-env&amp;quot;=&amp;quot;pckgsvc-prod-c1-usea-01&amp;quot;
  &amp;quot;sec-ch-ua-mobile&amp;quot;=&amp;quot;?0&amp;quot;
  &amp;quot;clientinfo&amp;quot;=&amp;quot;os=windows; osVer=10; proc=x86; lcid=en-us; deviceType=1; country=us; clientName=skypeteams; clientVer=1415/1.0.0.2021120940; utcOffset=-06:00; timezone=America/Costa_Rica&amp;quot;
  &amp;quot;behavioroverride&amp;quot;=&amp;quot;redirectAs404&amp;quot;
  &amp;quot;x-ms-client-caller&amp;quot;=&amp;quot;markReadStatus&amp;quot;
  &amp;quot;origin&amp;quot;=&amp;quot;https://teams.microsoft.com&amp;quot;
  &amp;quot;sec-fetch-site&amp;quot;=&amp;quot;same-site&amp;quot;
  &amp;quot;sec-fetch-mode&amp;quot;=&amp;quot;cors&amp;quot;
  &amp;quot;sec-fetch-dest&amp;quot;=&amp;quot;empty&amp;quot;
  &amp;quot;referer&amp;quot;=&amp;quot;https://teams.microsoft.com/&amp;quot;
  &amp;quot;accept-encoding&amp;quot;=&amp;quot;gzip, deflate, br&amp;quot;
  &amp;quot;accept-language&amp;quot;=&amp;quot;es,es-ES;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;quot;
} `
-ContentType &amp;quot;application/json&amp;quot; `
-Body &amp;quot;{`&amp;quot;isread`&amp;quot;:true}&amp;quot;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="next-version"&gt;Next version&lt;/h1&gt;
&lt;p&gt;There are different types of notifications, like mentions, reply, etc, this very first and raw version of the script clears all notifications however I would like to work on it to selectively clear different types of notifications (for example everything but mentions).
I invite everyone that wants to contribute to this script to do so here in this &lt;a href="https://github.com/get-itips/MiscScripts/blob/main/Teams/Set-NotificationsAsRead.ps1"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Getting some extra information about Teams federated users using PowerShell</title>
			<link>https://get-itips.capazero.net/posts/extra-information-federated-teams</link>
			<description>&lt;p&gt;&lt;strong&gt;Last update:&lt;/strong&gt; 27th of January - 2022 Added TFL support.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/extra-information-federated-teams</guid>
			<pubDate>Mon, 20 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;strong&gt;Last update:&lt;/strong&gt; 27th of January - 2022 Added TFL support.&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Inspired by my friend's Alexander Holmeset excellent blog post: &lt;a href="https://alexholmeset.blog/2021/12/13/microsoft-teams-speed-dial-contacts-provisioning/"&gt;Microsoft Teams Speed Dial Contacts Provisioning&lt;/a&gt;, I decided to investigate some other API calls made by the Teams client (as Alexander explains, easier to see using Teams web and activating browser's developer tools) and I was interested in one in particular, a request that is made when starting a new chat with external contacts, other tenants or Skype consumer.&lt;/p&gt;
&lt;p&gt;I said, let's see how it discovers those contacts, just for fun or learning purposes, but I discovered more information is outputted than what the end user actually sees.&lt;/p&gt;
&lt;h1 id="useful-information"&gt;Useful information?&lt;/h1&gt;
&lt;p&gt;The URL that we will be querying is:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://teams.microsoft.com/api/mt/part/amer-03/beta/users/%5Bsip_uri%5D/externalsearchv3"&gt;https://teams.microsoft.com/api/mt/part/amer-03/beta/users/[sip_uri]/externalsearchv3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If I use it to query another Teams tenant user information:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;tenantId          : ceffd5d3-edcb-482e-a7ed-3ecedfe5519c
isShortProfile    : False
accountEnabled    : True
featureSettings   : &amp;#64;{coExistenceMode=TeamsOnly}
userPrincipalName : freddiem&amp;#64;snoopcore.com
givenName         : freddiem&amp;#64;snoopcore.com
surname           :
email             : freddiem&amp;#64;snoopcore.com
displayName       : Freddie Mercury
type              : Federated
mri               : 8:orgid:87da1b0b-e2a5-4964-9fcc-70bf0a186fe0
objectId          : 87da1b0b-e2a5-4964-9fcc-70bf0a186fe0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And yes, we can even know if the other party is in TeamsOnly or in Islands mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;featureSettings   : &amp;#64;{coExistenceMode=Islands}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is another example, a company that does not have tenancy but Skype For Business on-premises:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;tenantId          : ac23bebc-10b0-4f0f-bae2-48b14c65af41
isShortProfile    : False
accountEnabled    : True
featureSettings   : &amp;#64;{coExistenceMode=Unknown}
userPrincipalName : john.doe&amp;#64;contoso.com
givenName         : john.doe&amp;#64;contoso.com
surname           :
email             : john.doe&amp;#64;contoso.com
displayName       : john.doe&amp;#64;contoso.com
type              : Federated
mri               : 8:sfb:e1c75ab3-bc2d-4733-ba24-c4186f48d1d0
objectId          : e1c75ab3-bc2d-4733-ba24-c4186f48d1d0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See how the mri now says sfb?&lt;/p&gt;
&lt;p&gt;also a Skype (consumer) user:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;skypeId           : megan.bowen
city              : Ciudad Autonoma de Buenos Aires
state             : Buenos Aires
country           : Argentina
avatarUrl         : https://api.skype.com/users/megan.bowen/profile/avatar
isShortProfile    : False
accountEnabled    : True
userPrincipalName : megan.bowen&amp;#64;hotmail.com
email             : megan.bowen&amp;#64;hotmail.com
displayName       : megan bowen
type              : SkypeConsumer
mri               : 8:megan.bowen
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is more information that I was expecting... :)&lt;/p&gt;
&lt;p&gt;Is this useful? I do not exactly know, but I decided to share, maybe an administrator receives a call saying that the CEO is unable to communicate with another external user, you get the SIP URI of this user and you can, using this script understand if at least at federation level everything is how it supposed to be.&lt;/p&gt;
&lt;p&gt;Also, if you are a heavy Teams user/Administrator/Consultant you already received the &amp;quot;Due to organization policy changes...&amp;quot; message, and I think this could help troubleshoot that and other federation scenarios.&lt;/p&gt;
&lt;h1 id="the-script"&gt;The Script&lt;/h1&gt;
&lt;p&gt;Here is the script, I basically modified the great output of &amp;quot;Copy as PowerShell&amp;quot; feature of Edge's developer tool, as I see this more as learning purposes, I did not put much effort into it, there is a lot of room to improve it. Credits also to the great module &lt;a href="https://o365blog.com/aadinternals/"&gt;AADInternals&lt;/a&gt; to get the required tokens (Teams token and x-skypetoken)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;
$urlPart1=&amp;quot;https://teams.microsoft.com/api/mt/part/amer-03/beta/users/&amp;quot;
$userToSearch=&amp;quot;meganb&amp;#64;contoso.com&amp;quot; #Replace this with the other party's SIP URI you want to search more information for
$urlPart3=&amp;quot;/externalsearchv3?includeTFLUsers=true&amp;quot;

$FinalUrl=$urlPart1+$userToSearch+$urlPart3

Import-Module AADInternals

$user = &amp;quot;admin&amp;#64;M365BV2XXX.onmicrosoft.com&amp;quot; #Replace this with your tenant's username
$password = &amp;quot;P&amp;#64;ssw0rd&amp;quot; #And your password
$secpwd = ConvertTo-SecureString $password -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential ($user,$secpwd)

$token = Get-AADIntAccessTokenForTeams -Credentials $cred

$skypeToken = Get-AADIntSkypeToken -AccessToken $token


$Result=Invoke-WebRequest -UseBasicParsing -Uri $finalUrl `
-Headers &amp;#64;{
&amp;quot;method&amp;quot;=&amp;quot;GET&amp;quot;
  &amp;quot;authority&amp;quot;=&amp;quot;teams.microsoft.com&amp;quot;
  &amp;quot;scheme&amp;quot;=&amp;quot;https&amp;quot;
  &amp;quot;path&amp;quot;=&amp;quot;/api/mt/part/amer-03/beta/users/$userToSearch/externalsearchv3?includeTFLUsers=true&amp;quot;
  &amp;quot;sec-ch-ua&amp;quot;=&amp;quot;`&amp;quot; Not A;Brand`&amp;quot;;v=`&amp;quot;99`&amp;quot;, `&amp;quot;Chromium`&amp;quot;;v=`&amp;quot;96`&amp;quot;, `&amp;quot;Microsoft Edge`&amp;quot;;v=`&amp;quot;96`&amp;quot;&amp;quot;
  &amp;quot;x-ms-user-type&amp;quot;=&amp;quot;null&amp;quot;
  &amp;quot;x-ms-client-type&amp;quot;=&amp;quot;web&amp;quot;
  &amp;quot;authorization&amp;quot;=&amp;quot;Bearer $token&amp;quot;
  &amp;quot;x-skypetoken&amp;quot;=$skypeToken
  &amp;quot;x-ms-client-version&amp;quot;=&amp;quot;1415/1.0.0.2021120724&amp;quot;
  &amp;quot;sec-ch-ua-platform&amp;quot;=&amp;quot;`&amp;quot;Windows`&amp;quot;&amp;quot;
  &amp;quot;x-ms-session-id&amp;quot;=&amp;quot;8f622a27-5f89-bf7f-ad89-9bb9550300c8&amp;quot;
  &amp;quot;x-ms-scenario-id&amp;quot;=&amp;quot;309&amp;quot;
  &amp;quot;x-anchormailbox&amp;quot;=$user
  &amp;quot;x-ms-client-env&amp;quot;=&amp;quot;pds-prod-azsc-usea-01&amp;quot;
  &amp;quot;sec-ch-ua-mobile&amp;quot;=&amp;quot;?0&amp;quot;
  &amp;quot;accept&amp;quot;=&amp;quot;application/json, text/plain, */*&amp;quot;
  &amp;quot;x-ms-client-caller&amp;quot;=&amp;quot;search_externally_people_resolver&amp;quot;
  &amp;quot;x-ringoverride&amp;quot;=&amp;quot;general&amp;quot;
  &amp;quot;sec-fetch-site&amp;quot;=&amp;quot;same-origin&amp;quot;
  &amp;quot;sec-fetch-mode&amp;quot;=&amp;quot;cors&amp;quot;
  &amp;quot;sec-fetch-dest&amp;quot;=&amp;quot;empty&amp;quot;
  &amp;quot;referer&amp;quot;=&amp;quot;https://teams.microsoft.com/_&amp;quot;
  &amp;quot;accept-encoding&amp;quot;=&amp;quot;gzip, deflate, br&amp;quot;
  &amp;quot;accept-language&amp;quot;=&amp;quot;es,es-ES;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;quot;
  }
  
  ConvertFrom-Json -InputObject $result.Content

&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
		</item>
		<item>
			<title>You no longer have access to &lt;Guid&gt; on Planner</title>
			<link>https://get-itips.capazero.net/posts/you-no-longer-have-access-to-planner</link>
			<description>&lt;p&gt;I was called by a customer running into this error, essentially, they create company Azure AD accounts for external users (not using guests accounts) to access some resources.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/you-no-longer-have-access-to-planner</guid>
			<pubDate>Fri, 12 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h2 id="symptoms"&gt;Symptoms&lt;/h2&gt;
&lt;p&gt;I was called by a customer running into this error, essentially, they create company Azure AD accounts for external users (not using guests accounts) to access some resources.&lt;/p&gt;
&lt;p&gt;One of these resources is Microsoft Planner, the users started reporting that they couldn't comment on the assigned tasks of Planner.&lt;/p&gt;
&lt;p&gt;The error received (in red) was&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;You no longer have access to &amp;lt;Guid&amp;gt;. Technical Details&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Correlation Id. &amp;lt;Correlation Id&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="investigation"&gt;Investigation&lt;/h2&gt;
&lt;p&gt;Looking for the error on a web search brings this official &lt;strong&gt;Docs&lt;/strong&gt; article:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/office/troubleshoot/planner/guests-cannot-comment-assigned-tasks"&gt;Guests can't add comments to assigned Planner tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, as said, these users were not accessing Planner using Guests account, but company accounts. Anyway, I checked if the account's SMTP address was also present in other account or contact object, as the article says, but it was not.&lt;/p&gt;
&lt;p&gt;There is one special ingredient in this scenario, they have &lt;strong&gt;Exchange Online doing hybrid with Exchange On-Premises&lt;/strong&gt; and &lt;strong&gt;they don't create Mailboxes for these external resources&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Digging with developer tools, I could see that the HTTP request that was failing was a call to this Graph API:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tasks.office.com/contoso.com/GraphApiV1/PostReplyInGroupConversationThreadAsync"&gt;https://tasks.office.com/contoso.com/GraphApiV1/PostReplyInGroupConversationThreadAsync&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;PostReplyInGroupConversation&amp;quot;, so it must has something to do with the e-mail that is sent to the 365 Group when a new comment is made on a task.&lt;/p&gt;
&lt;p&gt;I thought &amp;quot;they do not have mailboxes, not even On-Premises&amp;quot;. There is this support article &lt;a href="https://support.microsoft.com/en-us/office/comment-on-tasks-in-microsoft-planner-fd4aedde-7785-4cd0-96ee-122fbc9140e1"&gt;Comment on tasks in Microsoft Planner&lt;/a&gt; that says&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If your organization is not using Exchange Online for your account, you may not be able to comment on tasks in Planner&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="resolution"&gt;Resolution&lt;/h2&gt;
&lt;p&gt;I asked to create mailboxes for these users (Exchange Server Mailboxes, but if we run into any issue we will migrate them to Online), we waited for replication, and Voilá! the users could start commenting on Tasks and the email to the group was succesfully sent.&lt;/p&gt;
&lt;p&gt;I hope this is useful for anyone looking for this error and not using guest accounts.&lt;/p&gt;
&lt;p&gt;I also would like to add that, if you invite a Guest user that also happens to have a 365 Tenant, they will be able to comment in a Task without any issue.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>The recording ended unexpectedly</title>
			<link>https://get-itips.capazero.net/posts/the-recording-ended-unexpectedly</link>
			<description>&lt;p&gt;Recently, Microsoft announced through a &lt;a href="https://admin.microsoft.com/#/MessageCenter/:/messages/MC222640"&gt;Message Center notification&lt;/a&gt; that every customer will automatically have meeting recordings saved to OneDrive and SharePoint.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/the-recording-ended-unexpectedly</guid>
			<pubDate>Wed, 11 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Recently, Microsoft announced through a &lt;a href="https://admin.microsoft.com/#/MessageCenter/:/messages/MC222640"&gt;Message Center notification&lt;/a&gt; that every customer will automatically have meeting recordings saved to OneDrive and SharePoint.&lt;/p&gt;
&lt;p&gt;Once you stop the recording or end a meeting that is being recorded, the recording should be uploaded to your OneDrive For Business\SharePoint document library depending on the type of meeting.&lt;/p&gt;
&lt;p&gt;The recording will be uploaded as the user that initiated the recording, so, if for example, Megan Bowen started the recording, that is the name we will see in the SharePoint document library named &amp;quot;Recordings&amp;quot; as the creator/modifier of the file.&lt;/p&gt;
&lt;p&gt;If for any reason, this upload fails, an error message will appear in red letters saying &amp;quot;The recording ended unexpectedly&amp;quot; and a link to download it will be available stating it &amp;quot;expires in 20 day(s)&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/tmr_error.png" class="img-fluid" alt="Teams Meetings Recording Error" /&gt;&lt;/p&gt;
&lt;p&gt;Besides it would be very strange, I forced that error removing the permissions to save to this Recordings folder to the user initiating the recording.
According to the &lt;a href="https://docs.microsoft.com/MicrosoftTeams/tmr-meeting-recording-change"&gt;documentation&lt;/a&gt;, when this happens, the recording is uploaded to Azure Media Services:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If a Teams meeting recording fails to successfully upload to OneDrive/SharePoint, the recording will instead be temporarily saved to Azure Media Services (AMS). Once stored in AMS, no retry attempts are made to automatically upload the recording to OneDrive/SharePoint or Stream.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Take note of that, no retry attempts will be made to automatically upload the recording again, so upon fixing the issue that prevented the uploading, you should download the recording and upload it manually either to the your OneDrive For Business\SharePoint document library.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>The Data Collector Set or one of its dependencies is already in use</title>
			<link>https://get-itips.capazero.net/posts/data-collector-cortex</link>
			<description>&lt;p&gt;I was troubleshooting a high CPU usage of lsass.exe process in some Domain Controllers and I found this article &lt;a href="https://docs.microsoft.com/troubleshoot/windows-server/identity/troubleshoot-high-lsass.exe-cpu-utilization"&gt;How to troubleshoot high Lsass.exe CPU utilization on Active Directory Domain Controllers&lt;/a&gt;.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/data-collector-cortex</guid>
			<pubDate>Tue, 03 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I was troubleshooting a high CPU usage of lsass.exe process in some Domain Controllers and I found this article &lt;a href="https://docs.microsoft.com/troubleshoot/windows-server/identity/troubleshoot-high-lsass.exe-cpu-utilization"&gt;How to troubleshoot high Lsass.exe CPU utilization on Active Directory Domain Controllers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In that article, it recommends to run the Active Directory Data Collector, when I tried to do it I got&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The Data Collector Set or one of its dependencies is already in use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I checked if it was already running, any Data Collector, but they were all stopped, I also found this event in &lt;strong&gt;Microsoft&lt;/strong&gt; &amp;gt; &lt;strong&gt;Windows&lt;/strong&gt; &amp;gt; &lt;strong&gt;Diagnosis-PLA&lt;/strong&gt; &amp;gt; &lt;strong&gt;Operational&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Data collector set system\Active Directory Diagnostics failed to start as DOMAIN\DCACCOUNT$ with error code 0x803000AA.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On an internet search I found multiple things, restart the server, look for running data collectors, I tried everything I found as a possible fix with no luck, until I noticed a pattern, all DCs where I couldn't run the said Data Collector were running PaloAlto Cortex, I also found some Data Collectors that seemed to belong to the product in Startup Event Trace Sessions under System Data Collector sets in Performance Monitor, and in particular, XdrAgentLog was enabled.&lt;/p&gt;
&lt;h2 id="resolution"&gt;Resolution&lt;/h2&gt;
&lt;p&gt;I asked the customer to disable the Cortex agent and I could succesfully run the Active Directory Data Collector, we later re-enabled it and will probably open a support ticket to find a way not to do that while we need to run the data collector.&lt;/p&gt;
&lt;p&gt;Publishing this in case anyone faces the same, hope anyone find this useful.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Task did NOT pass the parameter validation, the error message is The target site does not exist</title>
			<link>https://get-itips.capazero.net/posts/spmt-site-does-not-exists</link>
			<description>&lt;p&gt;Hello,&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/spmt-site-does-not-exists</guid>
			<pubDate>Tue, 27 Jul 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;Doing some tests migrations from SharePoint Server (on-premises) to SharePoint Online using SPMT (&lt;a href="https://docs.microsoft.com/en-us/sharepointmigration/new-and-improved-features-in-the-sharepoint-migration-tool"&gt;SharePoint Migration Tool&lt;/a&gt;) using the SPMT PowerShell module I faced this error message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Task did NOT pass the parameter validation, the error message is The target site does not exist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first, I checked if, maybe I mispelled the target SPO site, but it was ok, reading the logs I found this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Microsoft.SharePoint.Migration.Common.Exceptions.WebTransportException ---&amp;gt; System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a send. ---&amp;gt; System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host. ---&amp;gt; System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.Net.FixedSizeReader.ReadPacket(Byte[] buffer, Int32 offset, Int32 count)
   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Net.TlsStream.ProcessAuthentication(LazyAsyncResult result)
   at System.Net.TlsStream.Write(Byte[] buffer, Int32 offset, Int32 size)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm... SSL... This must be related to TLS 1.2 in PowerShell, to check, tried to use &lt;code&gt;Invoke-WebRequest&lt;/code&gt; against an SSL site and it failed with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Invoke-WebRequest : The request was aborted: Could not create SSL/TLS secure channel.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I run in PowerShell:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And voilá, the error was gone and the migration finished with no issues. Keep in mind, that command will only last for the duration of the PowerShell session.&lt;/p&gt;
&lt;p&gt;To make it permanent I ran this one-liners:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Set-ItemProperty -Path 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord
Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope this is useful for someone as it was for me.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>M365 Enterprise Demo Customizer</title>
			<link>https://get-itips.capazero.net/posts/m365entdemo-customizer</link>
			<description>&lt;p&gt;Hello,&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/m365entdemo-customizer</guid>
			<pubDate>Mon, 26 Jul 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I am a heavy Microsoft 365 Enterprise Demos user (&lt;a href="https://demos.microsoft.com"&gt;https://demos.microsoft.com&lt;/a&gt;), from Customer Digital Experiences (CDX - &lt;a href="https://cdx.transform.microsoft.com/"&gt;https://cdx.transform.microsoft.com/&lt;/a&gt;) you can recognize them as Microsoft assigns to them tenant domain names like this M365x######.OnMicrosoft.com.&lt;/p&gt;
&lt;p&gt;There are plenty of tenant templates, EDU-content tenant names receive domain names like this M365EDU###### and so on, however, probably the most popular is the Microsoft 365 Enterprise Demo Content.&lt;/p&gt;
&lt;p&gt;These demo tenants have two durations, 90 days or one year, I usually create a one-year duration demo tenant and two 90-day tenants.&lt;/p&gt;
&lt;p&gt;The thing is, they expire, and with that, you have to start over customizing it with your needs, the thing that I do most is assigning administrative roles to different users, this helps me in my &lt;a href="https://Docs.Microsoft.com"&gt;https://Docs.Microsoft.com&lt;/a&gt; collaborator/Pull Request reviewer job to test different permissions with different Azure AD built-in roles and also to test different scenarios before executing on customers.&lt;/p&gt;
&lt;p&gt;So I decided to create a simple script, named it Customize-M365EnterpriseDemo.ps1, to assign different roles to the different users provided in the tenant template, decided to share the script to the community, maybe you find it useful, &lt;a href="https://github.com/get-itips/M365EnterpriseDemoCustomizer"&gt;the script is hosted in a GitHub repository&lt;/a&gt;, that way, anyone can easily file a bug or collaborate by adding some feature to it.&lt;/p&gt;
&lt;p&gt;The script takes a .csv file as input, this file can be customized if you want or does not fit your demo tenant or needs, however, if you run it as-is, you will end up with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allan Deyoung as Exchange and SharePoint admin&lt;/li&gt;
&lt;li&gt;Isaiah Langer as Teams Administrator&lt;/li&gt;
&lt;li&gt;Irvin Sayers as Teams Communication Support Specialist&lt;/li&gt;
&lt;li&gt;Lee Gu as Global Reader&lt;/li&gt;
&lt;li&gt;And so on...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted all administrative users to have a license, with the provided licenses of the demo tenant, this means assigning more than one role to some users, so I tried to assign totally not-related roles when assigning more than one role to a user.&lt;/p&gt;
&lt;p&gt;I hope you find it useful, this is still version 0.1, it surely needs more work and adjustments, contributions are very well welcomed!&lt;/p&gt;
&lt;p&gt;Andrés&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>PnP Teams Cmdlets Review - Part II</title>
			<link>https://get-itips.capazero.net/posts/teams-pnp-part2</link>
			<description>&lt;p&gt;Back in October 2020 I made a review of PnP Teams cmdlets, you can find that review &lt;a href="https://get-itips.capazero.net/posts/teams-pnp"&gt;here&lt;/a&gt;.
However, that review is now outdated as PnP project had a major change in the architecture, now being built in .NET Core 3.1 / .NET Framework 4.6.1 and, hence, supporting PowerShell core, so because of that fact, let's make another review to see what has changed.&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/teams-pnp-part2</guid>
			<pubDate>Tue, 29 Jun 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Back in October 2020 I made a review of PnP Teams cmdlets, you can find that review &lt;a href="https://get-itips.capazero.net/posts/teams-pnp"&gt;here&lt;/a&gt;.
However, that review is now outdated as PnP project had a major change in the architecture, now being built in .NET Core 3.1 / .NET Framework 4.6.1 and, hence, supporting PowerShell core, so because of that fact, let's make another review to see what has changed.&lt;/p&gt;
&lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt;
&lt;h2 id="pnp-module-version"&gt;PnP Module Version&lt;/h2&gt;
&lt;p&gt;Be sure to be running the latest stable version of the PnP PowerShell module, to this date, that is 1.6.0.&lt;/p&gt;
&lt;p&gt;also, we can check, which commands are currently available for Teams related tasks running&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-Command -Module *PnP* -Name &amp;quot;*Teams*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Add-PnPTeamsChannel                                1.6.0      PnP.PowerShell
Cmdlet          Add-PnPTeamsTab                                    1.6.0      PnP.PowerShell
Cmdlet          Add-PnPTeamsTeam                                   1.6.0      PnP.PowerShell
Cmdlet          Add-PnPTeamsUser                                   1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsApp                                    1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsChannel                                1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsChannelMessage                         1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsTab                                    1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsTeam                                   1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsUser                                   1.6.0      PnP.PowerShell
Cmdlet          New-PnPTeamsApp                                    1.6.0      PnP.PowerShell
Cmdlet          New-PnPTeamsTeam                                   1.6.0      PnP.PowerShell
Cmdlet          New-PnPTenantSequenceTeamSite                      1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsApp                                 1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsChannel                             1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsTab                                 1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsTeam                                1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsUser                                1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsChannel                                1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsTab                                    1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsTeam                                   1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsTeamArchivedState                      1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsTeamPicture                            1.6.0      PnP.PowerShell
Cmdlet          Submit-PnPTeamsChannelMessage                      1.6.0      PnP.PowerShell
Cmdlet          Sync-PnPAppToTeams                                 1.6.0      PnP.PowerShell
Cmdlet          Update-PnPTeamsApp                                 1.6.0      PnP.PowerShell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems the same list of cmdlets that were available at the time I made the first part of my review, no new cmdlets.&lt;/p&gt;
&lt;h2 id="graph-api-permissions"&gt;Graph API Permissions&lt;/h2&gt;
&lt;p&gt;To run any of those cmdlets, we will need special Graph API Permissions, thankfully, those are documented at Microsoft Docs, for example for the &lt;code&gt;Get-PnPTeamsTeam&lt;/code&gt; cmdlet, we will need either Group.Read.All or Group.ReadWrite.All.&lt;/p&gt;
&lt;h2 id="connecting-to-pnp-online"&gt;Connecting to PnP Online&lt;/h2&gt;
&lt;p&gt;If we try to use any &lt;em&gt;PnPTeams&lt;/em&gt; cmdlet without the required permissions we will receive an error like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;Connect-PnPOnline: AADSTS65001: The user or administrator has not consented to use the application with ID '31359c7f-bd7e-475c-86db-fdb8c937548e' named 'PnP Management Shell'. Send an interactive authorization request for this user and resource.
Trace ID: 185aa11a-cb90-4434-8aee-6c5538a3d800
Correlation ID: d72ec6f1-75a5-4ccb-9d97-c537a4c59f1a
Timestamp: 2021-06-29 17:38:00Z
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To understand how to connect it is better to read the source information from the PnP team &lt;a href="https://pnp.github.io/powershell/articles/connecting.html"&gt;here&lt;/a&gt; as the process changed, for example &lt;code&gt;-Scopes&lt;/code&gt; parameter is not there anymore in &lt;code&gt;Connect-PnpOnline&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="the-teams-pnp-cmdlets"&gt;The Teams PnP cmdlets&lt;/h1&gt;
&lt;p&gt;Back in the Part I, I showed the output of &lt;code&gt;Get-PnPTeamsTeam&lt;/code&gt; and &lt;code&gt;Get-PnPTeamsChannelMessage&lt;/code&gt; and an example use of &lt;code&gt;Submit-PnPTeamsChannelMessage&lt;/code&gt;, they haven't changed much so let's try other cmdlets&lt;/p&gt;
&lt;h2 id="set-pnpteamschannel"&gt;Set-PnPTeamsChannel&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;IsFavoriteByDefault&lt;/code&gt; boolean parameter described in the &lt;a href="https://docs.microsoft.com/powershell/module/sharepoint-pnp/set-pnpteamschannel?view=sharepoint-ps"&gt;documentation&lt;/a&gt; got my attention, however, I receive an error trying to use it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;Set-PnPTeamsChannel: Failed to execute backend request.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An &lt;a href="https://github.com/pnp/powershell/issues/563"&gt;issue&lt;/a&gt; is already created in the PnP GitHub repository, so eventually it will be fixed.&lt;/p&gt;
&lt;p&gt;If you try to change any property of a built-in Channel, like General, it will fail with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;Set-PnPTeamsChannel: General channel cannot be patched.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Besides that, I was able to run:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;set-PnPTeamsChannel -Team &amp;quot;Contoso&amp;quot; -Identity &amp;quot;CustomChannel&amp;quot; -DisplayName &amp;quot;Custom Channel&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On a custom made channel.&lt;/p&gt;
&lt;h2 id="add-pnpteamstab"&gt;Add-PnPTeamsTab&lt;/h2&gt;
&lt;p&gt;Let's test this interesting cmdlet to add a custom tab of type &amp;quot;WebSite&amp;quot; to a Teams Channel&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;Add-PnPTeamsTab -Team &amp;quot;Contoso&amp;quot; -Channel &amp;quot;Custom Channel&amp;quot; -DisplayName &amp;quot;MSShells&amp;quot; -Type WebSite -ContentUrl &amp;quot;https://msshells.net&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked great, adding a web site to a Teams channel.&lt;/p&gt;
&lt;h1 id="conclussions"&gt;Conclussions&lt;/h1&gt;
&lt;p&gt;PnP Teams cmdlets didn't change so much since Part I of these series, it would be interesting to see more cmdlets and more parameters in next releases however it is fantastic to have a community alternative to the official Teams module, the same way we have an alternative to the official SharePoint Online module.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Useful community tools to administer Microsoft 365</title>
			<link>https://get-itips.capazero.net/posts/useful-community-tools</link>
			<description>&lt;p&gt;This post is intended to list all the sites/tools I use to administer Microsoft 365. I hope you find them useful:&lt;/p&gt;</description>
			<guid>https://get-itips.capazero.net/posts/useful-community-tools</guid>
			<pubDate>Mon, 28 Jun 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;This post is intended to list all the sites/tools I use to administer Microsoft 365. I hope you find them useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msportals.io/"&gt;MSPortals&lt;/a&gt; by Adam Fowler, it's a great site that summarizes all the different official portals created by Microsoft to administer all the Microsoft 365 solutions, it even has a search function.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://changewindows.org/"&gt;ChangeWindows&lt;/a&gt;, a very complete site that keeps track of all the releases of Windows.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.whatismytenantid.com/"&gt;What is my Tenant ID?&lt;/a&gt;, actually, a Microsoft Partner is behind this site, it is very useful to find your (or others) tenant ID.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://m365maps.com/"&gt;M365 Maps&lt;/a&gt;, a very useful site to understand what is really included in each Microsoft 365 license offering.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://MSShells.net"&gt;MSShells&lt;/a&gt;, this site belongs to me and as I open-sourced it, it receives contributions from the community, keeps tracks of the different versions of the official modules to administer Microsoft 365 and Azure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bonus-track"&gt;Bonus Track:&lt;/h3&gt;
&lt;p&gt;Not really community tools as they are provided by Microsoft or Microsoft employees, however, they are useful and not so well documented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://o365atp.com/"&gt;ATP Safe Links decoder&lt;/a&gt; every link that goes thru ATP is rewritten and encoded so it can be analyzed before the user is presented with the destination and real website, this handy tool can decode the ATP link so we can see the real website behind it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mha.azurewebsites.net/"&gt;Message Header Analyzer&lt;/a&gt; This is very useful for EXO administrators, essentially, paste the mail message header of a Microsoft 365 e-mail, and this tool will present it in a much more friendly way the information contained in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do you have other that isn't listed here? Share it with me please. Thank you!&lt;/p&gt;
</content:encoded>
		</item>
	</channel>
</rss>