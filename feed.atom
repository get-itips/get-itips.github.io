<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<link rel="self" href="https://get-itips.capazero.net/" />
	<id>https://get-itips.capazero.net/</id>
	<title>Andrés Gorzelany</title>
	<rights>2022</rights>
	<updated>2022-02-10T14:35:42Z</updated>
	<subtitle>Get-ITips</subtitle>
	<entry>
		<link href="https://get-itips.capazero.net/posts/leave-from-meeting-chat" />
		<id>https://get-itips.capazero.net/posts/leave-from-meeting-chat</id>
		<title>How to leave a Teams meeting chat, even if you are the organizer</title>
		<updated>2022-02-10T00:00:00Z</updated>
		<content>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I noticed that, if you schedule a Teams Meeting, (and you are the organizer), these are the options available for the meeting chat/conversation:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/NoLeaveOption.png" class="img-fluid" alt="Teams Meetings No Leave Option" /&gt;&lt;/p&gt;
&lt;p&gt;See? No &lt;strong&gt;Leave&lt;/strong&gt; option.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Did you know? Leave option will show up to attendes only if the meeting has &amp;gt; 2 participants&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/LeaveOption.png" class="img-fluid" alt="Teams Meetings Leave Option" /&gt;&lt;/p&gt;
&lt;h1 id="the-problem"&gt;The problem?&lt;/h1&gt;
&lt;p&gt;What about if, for some reason, you are not anymore in the topic, you switched roles in your company, or you just want to leave the conversation for good?&lt;/p&gt;
&lt;p&gt;Sure, you can mute or hide the conversation, but it will show up again if someone writes into the meeting chat.&lt;/p&gt;
&lt;p&gt;So, I investigated a little bit with Developer tools, as I did in &lt;a href="https://get-itips.capazero.net/posts/extra-information-federated-teams"&gt;Getting some extra information about Teams federated users using PowerShell&lt;/a&gt; and &lt;a href="https://get-itips.capazero.net/posts/clear-teams-notifications"&gt;Mark Teams notifications as read&lt;/a&gt; to see what happens when a non-organizer leaves a Meeting chat/conversation and found out that a REST API is called to do that, so decided to give it a try and force an organizer to Leave a Teams meeting chat.&lt;/p&gt;
&lt;h1 id="prerequisites"&gt;PreRequisites&lt;/h1&gt;
&lt;p&gt;The tricky part is that we need to specify two things in the URL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Some sort of thread ID created for the meeting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our Teams User ID&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Sample URL&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;https://amer.ng.msg.teams.microsoft.com/v1/threads/19:meeting_MjRkYTA1ZWItZjVhYi00MDVjWJiZDQtMDQwZGU3OTkwZTIz&amp;#64;thread.v2/members/8:orgid:cb13db92-6e3a-4f30-a4a1-3be0d94d4ede 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So how do we get these values? Currently, I am trying to figure out a scripted way to do this, but for now, we can extract the thread ID related to the meeting by editing the meeting itself from Teams web, look in the address bar and copy and paste the whole URL to your favorite text editor.&lt;/p&gt;
&lt;p&gt;Then, grab everything between the &lt;strong&gt;19:meeting&lt;/strong&gt; and &lt;strong&gt;&amp;#64;thread.v2&lt;/strong&gt;, (including those strings), you will end up with something similar to this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;19:meeting_NTNjZGZmODItYjc0NS00yLTkyOWMtZmRhOWEwNDc2ZWEy&amp;#64;thread.v2 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s get our user id, the id of the organizer and for this, I used Teams PowerShell, but there are probably other options.&lt;/p&gt;
&lt;p&gt;I run&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-TeamUser -GroupId 13854e5-baf1-403e-ad3f-b26687383541 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using a &lt;code&gt;GroupId&lt;/code&gt; of a team where the organizer belongs, and in the results, the column on the left will show you the &lt;code&gt;UserId&lt;/code&gt; that we need, something like&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cb13db92-6e3a-4f30-a4a1-3be0d94d4ede&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ok, now we have everything we need, this is the script, go and replace the thread ID and userId in the lines that begin with &lt;code&gt;Invoke-WebRequest&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt;, you have to provide the credentials of the organizer when asked&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Import-Module AADInternals  

#This will prompt for credentials so it supports MFA login  

$token = Get-AADIntAccessTokenForTeams  

$skypeToken = Get-AADIntSkypeToken -AccessToken $token 

Invoke-WebRequest -UseBasicParsing -Uri &amp;quot;https://amer.ng.msg.teams.microsoft.com/v1/threads/19:meeting_MjRkYTA1ZWItZjVhYi00MDVjLWJiZDQtMDQwZGU3OTkwZTIz&amp;#64;thread.v2/members/8:orgid:cb13db92-6e3a-4f30-a4a1-3be0d94d4ede&amp;quot; ` 

-Method &amp;quot;DELETE&amp;quot; ` 

-Headers &amp;#64;{ 

&amp;quot;method&amp;quot;=&amp;quot;DELETE&amp;quot; 

  &amp;quot;authority&amp;quot;=&amp;quot;amer.ng.msg.teams.microsoft.com&amp;quot; 

  &amp;quot;scheme&amp;quot;=&amp;quot;https&amp;quot; 

  &amp;quot;path&amp;quot;=&amp;quot;/v1/threads/19:meeting_MjRkYTA1ZWItZjVhYi00MDVjLWJiZDQtMDQwZGU3OTkwZTIz&amp;#64;thread.v2/members/8:orgid:cb13db92-6e3a-4f30-a4a1-3be0d94d4ede&amp;quot; 

  &amp;quot;sec-ch-ua&amp;quot;=&amp;quot;`&amp;quot; Not A;Brand`&amp;quot;;v=`&amp;quot;99`&amp;quot;, `&amp;quot;Chromium`&amp;quot;;v=`&amp;quot;98`&amp;quot;, `&amp;quot;Microsoft Edge`&amp;quot;;v=`&amp;quot;98`&amp;quot;&amp;quot; 

  &amp;quot;x-ms-session-id&amp;quot;=&amp;quot;edba78e0-8e34-767a-2aae-fcb1e3d8bb68&amp;quot; 

  &amp;quot;behavioroverride&amp;quot;=&amp;quot;redirectAs404&amp;quot; 

  &amp;quot;x-ms-scenario-id&amp;quot;=&amp;quot;738&amp;quot; 

  &amp;quot;x-ms-client-env&amp;quot;=&amp;quot;pds-prod-comm-usce-01&amp;quot; 

  &amp;quot;x-ms-client-type&amp;quot;=&amp;quot;web&amp;quot; 

  &amp;quot;sec-ch-ua-mobile&amp;quot;=&amp;quot;?0&amp;quot; 

  &amp;quot;clientinfo&amp;quot;=&amp;quot;os=windows; osVer=10; proc=x86; lcid=es-es; deviceType=1; country=es; clientName=skypeteams; clientVer=1415/1.0.0.2022020411; utcOffset=-06:00; timezone=America/Costa_Rica&amp;quot; 

  &amp;quot;x-ms-client-version&amp;quot;=&amp;quot;1415/1.0.0.2022020411&amp;quot; 

  &amp;quot;x-ms-user-type&amp;quot;=&amp;quot;null&amp;quot; 

  &amp;quot;authentication&amp;quot;=&amp;quot;skypetoken=$skypeToken&amp;quot; 

  &amp;quot;sec-ch-ua-platform&amp;quot;=&amp;quot;`&amp;quot;Windows`&amp;quot;&amp;quot; 

  &amp;quot;origin&amp;quot;=&amp;quot;https://teams.microsoft.com&amp;quot; 

  &amp;quot;sec-fetch-site&amp;quot;=&amp;quot;same-site&amp;quot; 

  &amp;quot;sec-fetch-mode&amp;quot;=&amp;quot;cors&amp;quot; 

  &amp;quot;sec-fetch-dest&amp;quot;=&amp;quot;empty&amp;quot; 

  &amp;quot;referer&amp;quot;=&amp;quot;https://teams.microsoft.com/&amp;quot; 

  &amp;quot;accept-encoding&amp;quot;=&amp;quot;gzip, deflate, br&amp;quot; 

  &amp;quot;accept-language&amp;quot;=&amp;quot;es&amp;quot; 

} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(This script is a very first version, that means I would like to improve it, and it is provided without any guarantee.)&lt;/p&gt;
&lt;p&gt;Once run, you will receive a 200 status code HTTP output, and this will appear now in the Meeting chat/conversation&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/Removed.png" class="img-fluid" alt="Removed from Teams Meetings Chat" /&gt;&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This might be useful for very specific cases, and, until Microsoft provides a UI for an organizer to leave a Teams meeting chat for good, we can use this little script.
If, for some reason, you want to return to the Meeting chat, you can ask a member of the Meeting chat (roster) to add you again&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I noticed that, if you schedule a Teams Meeting, (and you are the organizer), these are the options available for the meeting chat/conversation:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/clear-teams-notifications" />
		<id>https://get-itips.capazero.net/posts/clear-teams-notifications</id>
		<title>Mark Teams notifications as read</title>
		<updated>2022-01-04T00:00:00Z</updated>
		<content>&lt;p&gt;Hello!&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The idea behind this blog post comes from the same idea behind this other blog post &lt;a href="https://get-itips.capazero.net/posts/extra-information-federated-teams"&gt;Getting some extra information about Teams federated users using PowerShell&lt;/a&gt;, so you can read more details about how this is done and what it requires there.&lt;/p&gt;
&lt;p&gt;Essentially, I continued exploring client-side API calls made by the Teams client, and I decided to play around with the one that is called to mark the notifications that appear under Activity in the Teams app bar as read.&lt;/p&gt;
&lt;h1 id="why"&gt;Why&lt;/h1&gt;
&lt;p&gt;Maybe you are returning from vacations/holidays and you have a lot of notifications to mark as read, there isn't currently an easy way to do this using the Teams client, you have to mark as read every single one, so you might want to clear the clutter more easily.&lt;/p&gt;
&lt;h1 id="the-script"&gt;The Script&lt;/h1&gt;
&lt;p&gt;This script is a very first version, that means I would like to improve it a lot, and it is provided without any guarantee.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;# Clear all Microsoft Teams notifications

Import-Module AADInternals

#This will prompt for credentials so it supports MFA login
$token = Get-AADIntAccessTokenForTeams

$skypeToken = Get-AADIntSkypeToken -AccessToken $token

$result=Invoke-WebRequest -UseBasicParsing -Uri &amp;quot;https://amer.ng.msg.teams.microsoft.com/v1/users/ME/conversations/48%3Anotifications/messages?view=msnp24Equivalent|supportsMessageProperties&amp;amp;pageSize=200&amp;quot; `
-Headers &amp;#64;{
&amp;quot;method&amp;quot;=&amp;quot;GET&amp;quot;
  &amp;quot;authority&amp;quot;=&amp;quot;amer.ng.msg.teams.microsoft.com&amp;quot;
  &amp;quot;scheme&amp;quot;=&amp;quot;https&amp;quot;
  &amp;quot;path&amp;quot;=&amp;quot;/v1/users/ME/conversations/48%3Anotifications/messages?view=msnp24Equivalent|supportsMessageProperties&amp;amp;pageSize=200&amp;quot;
  &amp;quot;sec-ch-ua&amp;quot;=&amp;quot;`&amp;quot; Not A;Brand`&amp;quot;;v=`&amp;quot;99`&amp;quot;, `&amp;quot;Chromium`&amp;quot;;v=`&amp;quot;96`&amp;quot;, `&amp;quot;Microsoft Edge`&amp;quot;;v=`&amp;quot;96`&amp;quot;&amp;quot;
  &amp;quot;x-ms-session-id&amp;quot;=&amp;quot;ae16f178-a088-a7bb-603b-27aad38b6c88&amp;quot;
  &amp;quot;behavioroverride&amp;quot;=&amp;quot;redirectAs404&amp;quot;
  &amp;quot;x-ms-scenario-id&amp;quot;=&amp;quot;130&amp;quot;
  &amp;quot;x-ms-client-cpm&amp;quot;=&amp;quot;ApplicationLaunch&amp;quot;
  &amp;quot;x-ms-client-env&amp;quot;=&amp;quot;pds-prod-azsc-usce-01&amp;quot;
  &amp;quot;x-ms-client-type&amp;quot;=&amp;quot;web&amp;quot;
  &amp;quot;sec-ch-ua-mobile&amp;quot;=&amp;quot;?0&amp;quot;
  &amp;quot;clientinfo&amp;quot;=&amp;quot;os=windows; osVer=10; proc=x86; lcid=en-us; deviceType=1; country=us; clientName=skypeteams; clientVer=1415/1.0.0.2021120940; utcOffset=-06:00; timezone=America/Costa_Rica&amp;quot;
  &amp;quot;x-ms-client-version&amp;quot;=&amp;quot;1415/1.0.0.2021120940&amp;quot;
  &amp;quot;x-ms-user-type&amp;quot;=&amp;quot;null&amp;quot;
  &amp;quot;authentication&amp;quot;=&amp;quot;skypetoken=$skypeToken&amp;quot;
  &amp;quot;sec-ch-ua-platform&amp;quot;=&amp;quot;`&amp;quot;Windows`&amp;quot;&amp;quot;
  &amp;quot;origin&amp;quot;=&amp;quot;https://teams.microsoft.com&amp;quot;
  &amp;quot;sec-fetch-site&amp;quot;=&amp;quot;same-site&amp;quot;
  &amp;quot;sec-fetch-mode&amp;quot;=&amp;quot;cors&amp;quot;
  &amp;quot;sec-fetch-dest&amp;quot;=&amp;quot;empty&amp;quot;
  &amp;quot;referer&amp;quot;=&amp;quot;https://teams.microsoft.com/&amp;quot;
  &amp;quot;accept-encoding&amp;quot;=&amp;quot;gzip, deflate, br&amp;quot;
  &amp;quot;accept-language&amp;quot;=&amp;quot;es,es-ES;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;quot;
}

$messages=ConvertFrom-Json -InputObject $result.Content


$NotificationsToClear=$messages.messages | where-object {$_.properties.isread -ne &amp;quot;True&amp;quot;}


foreach($notifications in $notificationsToClear)
{

$urlFQDN=&amp;quot;https://amer.ng.msg.teams.microsoft.com&amp;quot;
$urlPart1=&amp;quot;/v1/users/ME/conversations/48%3Anotifications/messages/&amp;quot;
$urlPart3=&amp;quot;/properties?name=isread&amp;quot;
$finalUrl=$urlFQDN+$urlPart1+$notifications.Id+$urlPart3

Write-Host &amp;quot;Clearing notification&amp;quot; $notifications.Id

$result=Invoke-WebRequest -UseBasicParsing -Uri $finalUrl `
-Method &amp;quot;PUT&amp;quot; `
-Headers &amp;#64;{
&amp;quot;method&amp;quot;=&amp;quot;PUT&amp;quot;
  &amp;quot;authority&amp;quot;=&amp;quot;amer.ng.msg.teams.microsoft.com&amp;quot;
  &amp;quot;scheme&amp;quot;=&amp;quot;https&amp;quot;
  &amp;quot;path&amp;quot;=$urlPart1+$notifications.Id+$urlPart3
  &amp;quot;sec-ch-ua&amp;quot;=&amp;quot;`&amp;quot; Not A;Brand`&amp;quot;;v=`&amp;quot;99`&amp;quot;, `&amp;quot;Chromium`&amp;quot;;v=`&amp;quot;96`&amp;quot;, `&amp;quot;Microsoft Edge`&amp;quot;;v=`&amp;quot;96`&amp;quot;&amp;quot;
  &amp;quot;x-ms-user-type&amp;quot;=&amp;quot;null&amp;quot;
  &amp;quot;x-ms-client-type&amp;quot;=&amp;quot;web&amp;quot;
  &amp;quot;x-ms-client-version&amp;quot;=&amp;quot;1415/1.0.0.2021120940&amp;quot;
  &amp;quot;authentication&amp;quot;=&amp;quot;skypetoken=$skypeToken&amp;quot;
  &amp;quot;sec-ch-ua-platform&amp;quot;=&amp;quot;`&amp;quot;Windows`&amp;quot;&amp;quot;
  &amp;quot;x-ms-scenario-id&amp;quot;=&amp;quot;716&amp;quot;
  &amp;quot;x-ms-client-env&amp;quot;=&amp;quot;pckgsvc-prod-c1-usea-01&amp;quot;
  &amp;quot;sec-ch-ua-mobile&amp;quot;=&amp;quot;?0&amp;quot;
  &amp;quot;clientinfo&amp;quot;=&amp;quot;os=windows; osVer=10; proc=x86; lcid=en-us; deviceType=1; country=us; clientName=skypeteams; clientVer=1415/1.0.0.2021120940; utcOffset=-06:00; timezone=America/Costa_Rica&amp;quot;
  &amp;quot;behavioroverride&amp;quot;=&amp;quot;redirectAs404&amp;quot;
  &amp;quot;x-ms-client-caller&amp;quot;=&amp;quot;markReadStatus&amp;quot;
  &amp;quot;origin&amp;quot;=&amp;quot;https://teams.microsoft.com&amp;quot;
  &amp;quot;sec-fetch-site&amp;quot;=&amp;quot;same-site&amp;quot;
  &amp;quot;sec-fetch-mode&amp;quot;=&amp;quot;cors&amp;quot;
  &amp;quot;sec-fetch-dest&amp;quot;=&amp;quot;empty&amp;quot;
  &amp;quot;referer&amp;quot;=&amp;quot;https://teams.microsoft.com/&amp;quot;
  &amp;quot;accept-encoding&amp;quot;=&amp;quot;gzip, deflate, br&amp;quot;
  &amp;quot;accept-language&amp;quot;=&amp;quot;es,es-ES;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;quot;
} `
-ContentType &amp;quot;application/json&amp;quot; `
-Body &amp;quot;{`&amp;quot;isread`&amp;quot;:true}&amp;quot;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="next-version"&gt;Next version&lt;/h1&gt;
&lt;p&gt;There are different types of notifications, like mentions, reply, etc, this very first and raw version of the script clears all notifications however I would like to work on it to selectively clear different types of notifications (for example everything but mentions).
I invite everyone that wants to contribute to this script to do so here in this &lt;a href="https://github.com/get-itips/MiscScripts/blob/main/Teams/Set-NotificationsAsRead.ps1"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Hello!&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/extra-information-federated-teams" />
		<id>https://get-itips.capazero.net/posts/extra-information-federated-teams</id>
		<title>Getting some extra information about Teams federated users using PowerShell</title>
		<updated>2021-12-20T00:00:00Z</updated>
		<content>&lt;p&gt;&lt;strong&gt;Last update:&lt;/strong&gt; 27th of January - 2022 Added TFL support.&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Inspired by my friend's Alexander Holmeset excellent blog post: &lt;a href="https://alexholmeset.blog/2021/12/13/microsoft-teams-speed-dial-contacts-provisioning/"&gt;Microsoft Teams Speed Dial Contacts Provisioning&lt;/a&gt;, I decided to investigate some other API calls made by the Teams client (as Alexander explains, easier to see using Teams web and activating browser's developer tools) and I was interested in one in particular, a request that is made when starting a new chat with external contacts, other tenants or Skype consumer.&lt;/p&gt;
&lt;p&gt;I said, let's see how it discovers those contacts, just for fun or learning purposes, but I discovered more information is outputted than what the end user actually sees.&lt;/p&gt;
&lt;h1 id="useful-information"&gt;Useful information?&lt;/h1&gt;
&lt;p&gt;The URL that we will be querying is:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://teams.microsoft.com/api/mt/part/amer-03/beta/users/%5Bsip_uri%5D/externalsearchv3"&gt;https://teams.microsoft.com/api/mt/part/amer-03/beta/users/[sip_uri]/externalsearchv3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If I use it to query another Teams tenant user information:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;tenantId          : ceffd5d3-edcb-482e-a7ed-3ecedfe5519c
isShortProfile    : False
accountEnabled    : True
featureSettings   : &amp;#64;{coExistenceMode=TeamsOnly}
userPrincipalName : freddiem&amp;#64;snoopcore.com
givenName         : freddiem&amp;#64;snoopcore.com
surname           :
email             : freddiem&amp;#64;snoopcore.com
displayName       : Freddie Mercury
type              : Federated
mri               : 8:orgid:87da1b0b-e2a5-4964-9fcc-70bf0a186fe0
objectId          : 87da1b0b-e2a5-4964-9fcc-70bf0a186fe0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And yes, we can even know if the other party is in TeamsOnly or in Islands mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;featureSettings   : &amp;#64;{coExistenceMode=Islands}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is another example, a company that does not have tenancy but Skype For Business on-premises:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;tenantId          : ac23bebc-10b0-4f0f-bae2-48b14c65af41
isShortProfile    : False
accountEnabled    : True
featureSettings   : &amp;#64;{coExistenceMode=Unknown}
userPrincipalName : john.doe&amp;#64;contoso.com
givenName         : john.doe&amp;#64;contoso.com
surname           :
email             : john.doe&amp;#64;contoso.com
displayName       : john.doe&amp;#64;contoso.com
type              : Federated
mri               : 8:sfb:e1c75ab3-bc2d-4733-ba24-c4186f48d1d0
objectId          : e1c75ab3-bc2d-4733-ba24-c4186f48d1d0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See how the mri now says sfb?&lt;/p&gt;
&lt;p&gt;also a Skype (consumer) user:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;skypeId           : megan.bowen
city              : Ciudad Autonoma de Buenos Aires
state             : Buenos Aires
country           : Argentina
avatarUrl         : https://api.skype.com/users/megan.bowen/profile/avatar
isShortProfile    : False
accountEnabled    : True
userPrincipalName : megan.bowen&amp;#64;hotmail.com
email             : megan.bowen&amp;#64;hotmail.com
displayName       : megan bowen
type              : SkypeConsumer
mri               : 8:megan.bowen
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is more information that I was expecting... :)&lt;/p&gt;
&lt;p&gt;Is this useful? I do not exactly know, but I decided to share, maybe an administrator receives a call saying that the CEO is unable to communicate with another external user, you get the SIP URI of this user and you can, using this script understand if at least at federation level everything is how it supposed to be.&lt;/p&gt;
&lt;p&gt;Also, if you are a heavy Teams user/Administrator/Consultant you already received the &amp;quot;Due to organization policy changes...&amp;quot; message, and I think this could help troubleshoot that and other federation scenarios.&lt;/p&gt;
&lt;h1 id="the-script"&gt;The Script&lt;/h1&gt;
&lt;p&gt;Here is the script, I basically modified the great output of &amp;quot;Copy as PowerShell&amp;quot; feature of Edge's developer tool, as I see this more as learning purposes, I did not put much effort into it, there is a lot of room to improve it. Credits also to the great module &lt;a href="https://o365blog.com/aadinternals/"&gt;AADInternals&lt;/a&gt; to get the required tokens (Teams token and x-skypetoken)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;
$urlPart1=&amp;quot;https://teams.microsoft.com/api/mt/part/amer-03/beta/users/&amp;quot;
$userToSearch=&amp;quot;meganb&amp;#64;contoso.com&amp;quot; #Replace this with the other party's SIP URI you want to search more information for
$urlPart3=&amp;quot;/externalsearchv3?includeTFLUsers=true&amp;quot;

$FinalUrl=$urlPart1+$userToSearch+$urlPart3

Import-Module AADInternals

$user = &amp;quot;admin&amp;#64;M365BV2XXX.onmicrosoft.com&amp;quot; #Replace this with your tenant's username
$password = &amp;quot;P&amp;#64;ssw0rd&amp;quot; #And your password
$secpwd = ConvertTo-SecureString $password -AsPlainText -Force
$Cred = New-Object System.Management.Automation.PSCredential ($user,$secpwd)

$token = Get-AADIntAccessTokenForTeams -Credentials $cred

$skypeToken = Get-AADIntSkypeToken -AccessToken $token


$Result=Invoke-WebRequest -UseBasicParsing -Uri $finalUrl `
-Headers &amp;#64;{
&amp;quot;method&amp;quot;=&amp;quot;GET&amp;quot;
  &amp;quot;authority&amp;quot;=&amp;quot;teams.microsoft.com&amp;quot;
  &amp;quot;scheme&amp;quot;=&amp;quot;https&amp;quot;
  &amp;quot;path&amp;quot;=&amp;quot;/api/mt/part/amer-03/beta/users/$userToSearch/externalsearchv3?includeTFLUsers=true&amp;quot;
  &amp;quot;sec-ch-ua&amp;quot;=&amp;quot;`&amp;quot; Not A;Brand`&amp;quot;;v=`&amp;quot;99`&amp;quot;, `&amp;quot;Chromium`&amp;quot;;v=`&amp;quot;96`&amp;quot;, `&amp;quot;Microsoft Edge`&amp;quot;;v=`&amp;quot;96`&amp;quot;&amp;quot;
  &amp;quot;x-ms-user-type&amp;quot;=&amp;quot;null&amp;quot;
  &amp;quot;x-ms-client-type&amp;quot;=&amp;quot;web&amp;quot;
  &amp;quot;authorization&amp;quot;=&amp;quot;Bearer $token&amp;quot;
  &amp;quot;x-skypetoken&amp;quot;=$skypeToken
  &amp;quot;x-ms-client-version&amp;quot;=&amp;quot;1415/1.0.0.2021120724&amp;quot;
  &amp;quot;sec-ch-ua-platform&amp;quot;=&amp;quot;`&amp;quot;Windows`&amp;quot;&amp;quot;
  &amp;quot;x-ms-session-id&amp;quot;=&amp;quot;8f622a27-5f89-bf7f-ad89-9bb9550300c8&amp;quot;
  &amp;quot;x-ms-scenario-id&amp;quot;=&amp;quot;309&amp;quot;
  &amp;quot;x-anchormailbox&amp;quot;=$user
  &amp;quot;x-ms-client-env&amp;quot;=&amp;quot;pds-prod-azsc-usea-01&amp;quot;
  &amp;quot;sec-ch-ua-mobile&amp;quot;=&amp;quot;?0&amp;quot;
  &amp;quot;accept&amp;quot;=&amp;quot;application/json, text/plain, */*&amp;quot;
  &amp;quot;x-ms-client-caller&amp;quot;=&amp;quot;search_externally_people_resolver&amp;quot;
  &amp;quot;x-ringoverride&amp;quot;=&amp;quot;general&amp;quot;
  &amp;quot;sec-fetch-site&amp;quot;=&amp;quot;same-origin&amp;quot;
  &amp;quot;sec-fetch-mode&amp;quot;=&amp;quot;cors&amp;quot;
  &amp;quot;sec-fetch-dest&amp;quot;=&amp;quot;empty&amp;quot;
  &amp;quot;referer&amp;quot;=&amp;quot;https://teams.microsoft.com/_&amp;quot;
  &amp;quot;accept-encoding&amp;quot;=&amp;quot;gzip, deflate, br&amp;quot;
  &amp;quot;accept-language&amp;quot;=&amp;quot;es,es-ES;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&amp;quot;
  }
  
  ConvertFrom-Json -InputObject $result.Content

&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;&lt;strong&gt;Last update:&lt;/strong&gt; 27th of January - 2022 Added TFL support.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/you-no-longer-have-access-to-planner" />
		<id>https://get-itips.capazero.net/posts/you-no-longer-have-access-to-planner</id>
		<title>You no longer have access to &lt;Guid&gt; on Planner</title>
		<updated>2021-11-12T00:00:00Z</updated>
		<content>&lt;h2 id="symptoms"&gt;Symptoms&lt;/h2&gt;
&lt;p&gt;I was called by a customer running into this error, essentially, they create company Azure AD accounts for external users (not using guests accounts) to access some resources.&lt;/p&gt;
&lt;p&gt;One of these resources is Microsoft Planner, the users started reporting that they couldn't comment on the assigned tasks of Planner.&lt;/p&gt;
&lt;p&gt;The error received (in red) was&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;You no longer have access to &amp;lt;Guid&amp;gt;. Technical Details&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Correlation Id. &amp;lt;Correlation Id&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="investigation"&gt;Investigation&lt;/h2&gt;
&lt;p&gt;Looking for the error on a web search brings this official &lt;strong&gt;Docs&lt;/strong&gt; article:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.microsoft.com/office/troubleshoot/planner/guests-cannot-comment-assigned-tasks"&gt;Guests can't add comments to assigned Planner tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, as said, these users were not accessing Planner using Guests account, but company accounts. Anyway, I checked if the account's SMTP address was also present in other account or contact object, as the article says, but it was not.&lt;/p&gt;
&lt;p&gt;There is one special ingredient in this scenario, they have &lt;strong&gt;Exchange Online doing hybrid with Exchange On-Premises&lt;/strong&gt; and &lt;strong&gt;they don't create Mailboxes for these external resources&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Digging with developer tools, I could see that the HTTP request that was failing was a call to this Graph API:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tasks.office.com/contoso.com/GraphApiV1/PostReplyInGroupConversationThreadAsync"&gt;https://tasks.office.com/contoso.com/GraphApiV1/PostReplyInGroupConversationThreadAsync&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;PostReplyInGroupConversation&amp;quot;, so it must has something to do with the e-mail that is sent to the 365 Group when a new comment is made on a task.&lt;/p&gt;
&lt;p&gt;I thought &amp;quot;they do not have mailboxes, not even On-Premises&amp;quot;. There is this support article &lt;a href="https://support.microsoft.com/en-us/office/comment-on-tasks-in-microsoft-planner-fd4aedde-7785-4cd0-96ee-122fbc9140e1"&gt;Comment on tasks in Microsoft Planner&lt;/a&gt; that says&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If your organization is not using Exchange Online for your account, you may not be able to comment on tasks in Planner&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="resolution"&gt;Resolution&lt;/h2&gt;
&lt;p&gt;I asked to create mailboxes for these users (Exchange Server Mailboxes, but if we run into any issue we will migrate them to Online), we waited for replication, and Voilá! the users could start commenting on Tasks and the email to the group was succesfully sent.&lt;/p&gt;
&lt;p&gt;I hope this is useful for anyone looking for this error and not using guest accounts.&lt;/p&gt;
&lt;p&gt;I also would like to add that, if you invite a Guest user that also happens to have a 365 Tenant, they will be able to comment in a Task without any issue.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I was called by a customer running into this error, essentially, they create company Azure AD accounts for external users (not using guests accounts) to access some resources.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/the-recording-ended-unexpectedly" />
		<id>https://get-itips.capazero.net/posts/the-recording-ended-unexpectedly</id>
		<title>The recording ended unexpectedly</title>
		<updated>2021-08-11T00:00:00Z</updated>
		<content>&lt;p&gt;Recently, Microsoft announced through a &lt;a href="https://admin.microsoft.com/#/MessageCenter/:/messages/MC222640"&gt;Message Center notification&lt;/a&gt; that every customer will automatically have meeting recordings saved to OneDrive and SharePoint.&lt;/p&gt;
&lt;p&gt;Once you stop the recording or end a meeting that is being recorded, the recording should be uploaded to your OneDrive For Business\SharePoint document library depending on the type of meeting.&lt;/p&gt;
&lt;p&gt;The recording will be uploaded as the user that initiated the recording, so, if for example, Megan Bowen started the recording, that is the name we will see in the SharePoint document library named &amp;quot;Recordings&amp;quot; as the creator/modifier of the file.&lt;/p&gt;
&lt;p&gt;If for any reason, this upload fails, an error message will appear in red letters saying &amp;quot;The recording ended unexpectedly&amp;quot; and a link to download it will be available stating it &amp;quot;expires in 20 day(s)&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/tmr_error.png" class="img-fluid" alt="Teams Meetings Recording Error" /&gt;&lt;/p&gt;
&lt;p&gt;Besides it would be very strange, I forced that error removing the permissions to save to this Recordings folder to the user initiating the recording.
According to the &lt;a href="https://docs.microsoft.com/MicrosoftTeams/tmr-meeting-recording-change"&gt;documentation&lt;/a&gt;, when this happens, the recording is uploaded to Azure Media Services:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If a Teams meeting recording fails to successfully upload to OneDrive/SharePoint, the recording will instead be temporarily saved to Azure Media Services (AMS). Once stored in AMS, no retry attempts are made to automatically upload the recording to OneDrive/SharePoint or Stream.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Take note of that, no retry attempts will be made to automatically upload the recording again, so upon fixing the issue that prevented the uploading, you should download the recording and upload it manually either to the your OneDrive For Business\SharePoint document library.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Recently, Microsoft announced through a &lt;a href="https://admin.microsoft.com/#/MessageCenter/:/messages/MC222640"&gt;Message Center notification&lt;/a&gt; that every customer will automatically have meeting recordings saved to OneDrive and SharePoint.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/data-collector-cortex" />
		<id>https://get-itips.capazero.net/posts/data-collector-cortex</id>
		<title>The Data Collector Set or one of its dependencies is already in use</title>
		<updated>2021-08-03T00:00:00Z</updated>
		<content>&lt;p&gt;I was troubleshooting a high CPU usage of lsass.exe process in some Domain Controllers and I found this article &lt;a href="https://docs.microsoft.com/troubleshoot/windows-server/identity/troubleshoot-high-lsass.exe-cpu-utilization"&gt;How to troubleshoot high Lsass.exe CPU utilization on Active Directory Domain Controllers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In that article, it recommends to run the Active Directory Data Collector, when I tried to do it I got&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The Data Collector Set or one of its dependencies is already in use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I checked if it was already running, any Data Collector, but they were all stopped, I also found this event in &lt;strong&gt;Microsoft&lt;/strong&gt; &amp;gt; &lt;strong&gt;Windows&lt;/strong&gt; &amp;gt; &lt;strong&gt;Diagnosis-PLA&lt;/strong&gt; &amp;gt; &lt;strong&gt;Operational&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Data collector set system\Active Directory Diagnostics failed to start as DOMAIN\DCACCOUNT$ with error code 0x803000AA.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On an internet search I found multiple things, restart the server, look for running data collectors, I tried everything I found as a possible fix with no luck, until I noticed a pattern, all DCs where I couldn't run the said Data Collector were running PaloAlto Cortex, I also found some Data Collectors that seemed to belong to the product in Startup Event Trace Sessions under System Data Collector sets in Performance Monitor, and in particular, XdrAgentLog was enabled.&lt;/p&gt;
&lt;h2 id="resolution"&gt;Resolution&lt;/h2&gt;
&lt;p&gt;I asked the customer to disable the Cortex agent and I could succesfully run the Active Directory Data Collector, we later re-enabled it and will probably open a support ticket to find a way not to do that while we need to run the data collector.&lt;/p&gt;
&lt;p&gt;Publishing this in case anyone faces the same, hope anyone find this useful.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;I was troubleshooting a high CPU usage of lsass.exe process in some Domain Controllers and I found this article &lt;a href="https://docs.microsoft.com/troubleshoot/windows-server/identity/troubleshoot-high-lsass.exe-cpu-utilization"&gt;How to troubleshoot high Lsass.exe CPU utilization on Active Directory Domain Controllers&lt;/a&gt;.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/spmt-site-does-not-exists" />
		<id>https://get-itips.capazero.net/posts/spmt-site-does-not-exists</id>
		<title>Task did NOT pass the parameter validation, the error message is The target site does not exist</title>
		<updated>2021-07-27T00:00:00Z</updated>
		<content>&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;Doing some tests migrations from SharePoint Server (on-premises) to SharePoint Online using SPMT (&lt;a href="https://docs.microsoft.com/en-us/sharepointmigration/new-and-improved-features-in-the-sharepoint-migration-tool"&gt;SharePoint Migration Tool&lt;/a&gt;) using the SPMT PowerShell module I faced this error message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Task did NOT pass the parameter validation, the error message is The target site does not exist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first, I checked if, maybe I mispelled the target SPO site, but it was ok, reading the logs I found this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Microsoft.SharePoint.Migration.Common.Exceptions.WebTransportException ---&amp;gt; System.Net.WebException: The underlying connection was closed: An unexpected error occurred on a send. ---&amp;gt; System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host. ---&amp;gt; System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   at System.Net.FixedSizeReader.ReadPacket(Byte[] buffer, Int32 offset, Int32 count)
   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)
   at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)
   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)
   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Net.TlsStream.ProcessAuthentication(LazyAsyncResult result)
   at System.Net.TlsStream.Write(Byte[] buffer, Int32 offset, Int32 size)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm... SSL... This must be related to TLS 1.2 in PowerShell, to check, tried to use &lt;code&gt;Invoke-WebRequest&lt;/code&gt; against an SSL site and it failed with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Invoke-WebRequest : The request was aborted: Could not create SSL/TLS secure channel.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I run in PowerShell:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And voilá, the error was gone and the migration finished with no issues. Keep in mind, that command will only last for the duration of the PowerShell session.&lt;/p&gt;
&lt;p&gt;To make it permanent I ran this one-liners:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Set-ItemProperty -Path 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord
Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope this is useful for someone as it was for me.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Hello,&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/m365entdemo-customizer" />
		<id>https://get-itips.capazero.net/posts/m365entdemo-customizer</id>
		<title>M365 Enterprise Demo Customizer</title>
		<updated>2021-07-26T00:00:00Z</updated>
		<content>&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I am a heavy Microsoft 365 Enterprise Demos user (&lt;a href="https://demos.microsoft.com"&gt;https://demos.microsoft.com&lt;/a&gt;), from Customer Digital Experiences (CDX - &lt;a href="https://cdx.transform.microsoft.com/"&gt;https://cdx.transform.microsoft.com/&lt;/a&gt;) you can recognize them as Microsoft assigns to them tenant domain names like this M365x######.OnMicrosoft.com.&lt;/p&gt;
&lt;p&gt;There are plenty of tenant templates, EDU-content tenant names receive domain names like this M365EDU###### and so on, however, probably the most popular is the Microsoft 365 Enterprise Demo Content.&lt;/p&gt;
&lt;p&gt;These demo tenants have two durations, 90 days or one year, I usually create a one-year duration demo tenant and two 90-day tenants.&lt;/p&gt;
&lt;p&gt;The thing is, they expire, and with that, you have to start over customizing it with your needs, the thing that I do most is assigning administrative roles to different users, this helps me in my &lt;a href="https://Docs.Microsoft.com"&gt;https://Docs.Microsoft.com&lt;/a&gt; collaborator/Pull Request reviewer job to test different permissions with different Azure AD built-in roles and also to test different scenarios before executing on customers.&lt;/p&gt;
&lt;p&gt;So I decided to create a simple script, named it Customize-M365EnterpriseDemo.ps1, to assign different roles to the different users provided in the tenant template, decided to share the script to the community, maybe you find it useful, &lt;a href="https://github.com/get-itips/M365EnterpriseDemoCustomizer"&gt;the script is hosted in a GitHub repository&lt;/a&gt;, that way, anyone can easily file a bug or collaborate by adding some feature to it.&lt;/p&gt;
&lt;p&gt;The script takes a .csv file as input, this file can be customized if you want or does not fit your demo tenant or needs, however, if you run it as-is, you will end up with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allan Deyoung as Exchange and SharePoint admin&lt;/li&gt;
&lt;li&gt;Isaiah Langer as Teams Administrator&lt;/li&gt;
&lt;li&gt;Irvin Sayers as Teams Communication Support Specialist&lt;/li&gt;
&lt;li&gt;Lee Gu as Global Reader&lt;/li&gt;
&lt;li&gt;And so on...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted all administrative users to have a license, with the provided licenses of the demo tenant, this means assigning more than one role to some users, so I tried to assign totally not-related roles when assigning more than one role to a user.&lt;/p&gt;
&lt;p&gt;I hope you find it useful, this is still version 0.1, it surely needs more work and adjustments, contributions are very well welcomed!&lt;/p&gt;
&lt;p&gt;Andrés&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Hello,&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/teams-pnp-part2" />
		<id>https://get-itips.capazero.net/posts/teams-pnp-part2</id>
		<title>PnP Teams Cmdlets Review - Part II</title>
		<updated>2021-06-29T00:00:00Z</updated>
		<content>&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Back in October 2020 I made a review of PnP Teams cmdlets, you can find that review &lt;a href="https://get-itips.capazero.net/posts/teams-pnp"&gt;here&lt;/a&gt;.
However, that review is now outdated as PnP project had a major change in the architecture, now being built in .NET Core 3.1 / .NET Framework 4.6.1 and, hence, supporting PowerShell core, so because of that fact, let's make another review to see what has changed.&lt;/p&gt;
&lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt;
&lt;h2 id="pnp-module-version"&gt;PnP Module Version&lt;/h2&gt;
&lt;p&gt;Be sure to be running the latest stable version of the PnP PowerShell module, to this date, that is 1.6.0.&lt;/p&gt;
&lt;p&gt;also, we can check, which commands are currently available for Teams related tasks running&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-Command -Module *PnP* -Name &amp;quot;*Teams*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Add-PnPTeamsChannel                                1.6.0      PnP.PowerShell
Cmdlet          Add-PnPTeamsTab                                    1.6.0      PnP.PowerShell
Cmdlet          Add-PnPTeamsTeam                                   1.6.0      PnP.PowerShell
Cmdlet          Add-PnPTeamsUser                                   1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsApp                                    1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsChannel                                1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsChannelMessage                         1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsTab                                    1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsTeam                                   1.6.0      PnP.PowerShell
Cmdlet          Get-PnPTeamsUser                                   1.6.0      PnP.PowerShell
Cmdlet          New-PnPTeamsApp                                    1.6.0      PnP.PowerShell
Cmdlet          New-PnPTeamsTeam                                   1.6.0      PnP.PowerShell
Cmdlet          New-PnPTenantSequenceTeamSite                      1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsApp                                 1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsChannel                             1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsTab                                 1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsTeam                                1.6.0      PnP.PowerShell
Cmdlet          Remove-PnPTeamsUser                                1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsChannel                                1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsTab                                    1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsTeam                                   1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsTeamArchivedState                      1.6.0      PnP.PowerShell
Cmdlet          Set-PnPTeamsTeamPicture                            1.6.0      PnP.PowerShell
Cmdlet          Submit-PnPTeamsChannelMessage                      1.6.0      PnP.PowerShell
Cmdlet          Sync-PnPAppToTeams                                 1.6.0      PnP.PowerShell
Cmdlet          Update-PnPTeamsApp                                 1.6.0      PnP.PowerShell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems the same list of cmdlets that were available at the time I made the first part of my review, no new cmdlets.&lt;/p&gt;
&lt;h2 id="graph-api-permissions"&gt;Graph API Permissions&lt;/h2&gt;
&lt;p&gt;To run any of those cmdlets, we will need special Graph API Permissions, thankfully, those are documented at Microsoft Docs, for example for the &lt;code&gt;Get-PnPTeamsTeam&lt;/code&gt; cmdlet, we will need either Group.Read.All or Group.ReadWrite.All.&lt;/p&gt;
&lt;h2 id="connecting-to-pnp-online"&gt;Connecting to PnP Online&lt;/h2&gt;
&lt;p&gt;If we try to use any &lt;em&gt;PnPTeams&lt;/em&gt; cmdlet without the required permissions we will receive an error like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;Connect-PnPOnline: AADSTS65001: The user or administrator has not consented to use the application with ID '31359c7f-bd7e-475c-86db-fdb8c937548e' named 'PnP Management Shell'. Send an interactive authorization request for this user and resource.
Trace ID: 185aa11a-cb90-4434-8aee-6c5538a3d800
Correlation ID: d72ec6f1-75a5-4ccb-9d97-c537a4c59f1a
Timestamp: 2021-06-29 17:38:00Z
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To understand how to connect it is better to read the source information from the PnP team &lt;a href="https://pnp.github.io/powershell/articles/connecting.html"&gt;here&lt;/a&gt; as the process changed, for example &lt;code&gt;-Scopes&lt;/code&gt; parameter is not there anymore in &lt;code&gt;Connect-PnpOnline&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="the-teams-pnp-cmdlets"&gt;The Teams PnP cmdlets&lt;/h1&gt;
&lt;p&gt;Back in the Part I, I showed the output of &lt;code&gt;Get-PnPTeamsTeam&lt;/code&gt; and &lt;code&gt;Get-PnPTeamsChannelMessage&lt;/code&gt; and an example use of &lt;code&gt;Submit-PnPTeamsChannelMessage&lt;/code&gt;, they haven't changed much so let's try other cmdlets&lt;/p&gt;
&lt;h2 id="set-pnpteamschannel"&gt;Set-PnPTeamsChannel&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;IsFavoriteByDefault&lt;/code&gt; boolean parameter described in the &lt;a href="https://docs.microsoft.com/powershell/module/sharepoint-pnp/set-pnpteamschannel?view=sharepoint-ps"&gt;documentation&lt;/a&gt; got my attention, however, I receive an error trying to use it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;Set-PnPTeamsChannel: Failed to execute backend request.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An &lt;a href="https://github.com/pnp/powershell/issues/563"&gt;issue&lt;/a&gt; is already created in the PnP GitHub repository, so eventually it will be fixed.&lt;/p&gt;
&lt;p&gt;If you try to change any property of a built-in Channel, like General, it will fail with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;Set-PnPTeamsChannel: General channel cannot be patched.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Besides that, I was able to run:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;set-PnPTeamsChannel -Team &amp;quot;Contoso&amp;quot; -Identity &amp;quot;CustomChannel&amp;quot; -DisplayName &amp;quot;Custom Channel&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On a custom made channel.&lt;/p&gt;
&lt;h2 id="add-pnpteamstab"&gt;Add-PnPTeamsTab&lt;/h2&gt;
&lt;p&gt;Let's test this interesting cmdlet to add a custom tab of type &amp;quot;WebSite&amp;quot; to a Teams Channel&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-PowerShell"&gt;Add-PnPTeamsTab -Team &amp;quot;Contoso&amp;quot; -Channel &amp;quot;Custom Channel&amp;quot; -DisplayName &amp;quot;MSShells&amp;quot; -Type WebSite -ContentUrl &amp;quot;https://msshells.net&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked great, adding a web site to a Teams channel.&lt;/p&gt;
&lt;h1 id="conclussions"&gt;Conclussions&lt;/h1&gt;
&lt;p&gt;PnP Teams cmdlets didn't change so much since Part I of these series, it would be interesting to see more cmdlets and more parameters in next releases however it is fantastic to have a community alternative to the official Teams module, the same way we have an alternative to the official SharePoint Online module.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Back in October 2020 I made a review of PnP Teams cmdlets, you can find that review &lt;a href="https://get-itips.capazero.net/posts/teams-pnp"&gt;here&lt;/a&gt;.
However, that review is now outdated as PnP project had a major change in the architecture, now being built in .NET Core 3.1 / .NET Framework 4.6.1 and, hence, supporting PowerShell core, so because of that fact, let's make another review to see what has changed.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/useful-community-tools" />
		<id>https://get-itips.capazero.net/posts/useful-community-tools</id>
		<title>Useful community tools to administer Microsoft 365</title>
		<updated>2021-06-28T00:00:00Z</updated>
		<content>&lt;p&gt;This post is intended to list all the sites/tools I use to administer Microsoft 365. I hope you find them useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://msportals.io/"&gt;MSPortals&lt;/a&gt; by Adam Fowler, it's a great site that summarizes all the different official portals created by Microsoft to administer all the Microsoft 365 solutions, it even has a search function.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://changewindows.org/"&gt;ChangeWindows&lt;/a&gt;, a very complete site that keeps track of all the releases of Windows.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.whatismytenantid.com/"&gt;What is my Tenant ID?&lt;/a&gt;, actually, a Microsoft Partner is behind this site, it is very useful to find your (or others) tenant ID.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://m365maps.com/"&gt;M365 Maps&lt;/a&gt;, a very useful site to understand what is really included in each Microsoft 365 license offering.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://MSShells.net"&gt;MSShells&lt;/a&gt;, this site belongs to me and as I open-sourced it, it receives contributions from the community, keeps tracks of the different versions of the official modules to administer Microsoft 365 and Azure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bonus-track"&gt;Bonus Track:&lt;/h3&gt;
&lt;p&gt;Not really community tools as they are provided by Microsoft or Microsoft employees, however, they are useful and not so well documented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://o365atp.com/"&gt;ATP Safe Links decoder&lt;/a&gt; every link that goes thru ATP is rewritten and encoded so it can be analyzed before the user is presented with the destination and real website, this handy tool can decode the ATP link so we can see the real website behind it.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mha.azurewebsites.net/"&gt;Message Header Analyzer&lt;/a&gt; This is very useful for EXO administrators, essentially, paste the mail message header of a Microsoft 365 e-mail, and this tool will present it in a much more friendly way the information contained in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do you have other that isn't listed here? Share it with me please. Thank you!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;This post is intended to list all the sites/tools I use to administer Microsoft 365. I hope you find them useful:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/teams-powershell-token-auth" />
		<id>https://get-itips.capazero.net/posts/teams-powershell-token-auth</id>
		<title>Microsoft Teams PowerShell and token-based auth</title>
		<updated>2021-06-09T00:00:00Z</updated>
		<content>&lt;p&gt;Early in May, a new entry was added to the &lt;a href="https://docs.microsoft.com/microsoftteams/teams-powershell-release-notes"&gt;Official Docs article&lt;/a&gt; for the Microsoft Teams PowerShell module Release notes, we could read:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;ul&gt;
&lt;li&gt;Updates for AccessToken login with Connect-MicrosoftTeams&lt;/li&gt;
&lt;li&gt;Unified token array instead of resource specific access token parameters&lt;/li&gt;
&lt;li&gt;Removed all AADGraph references as AADGraph is nearing End of Life&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The entry was mentioning a 3.0.0 version number however was later changed to 2.3.2-preview, is this version finally fixing the issues trying to use other methods of connection other than interactive login? Let's remember that, even though in &amp;lt;2.3.2 we could connect using access tokens and Certificate-based authentication, if we tried to use any &lt;em&gt;-Cs&lt;/em&gt; cmdlet they failed with a &lt;code&gt;GetSteppablePipeline&lt;/code&gt; error.&lt;/p&gt;
&lt;p&gt;But wait! not only that, &lt;code&gt;-AccountId&lt;/code&gt; parameter wasn't usable too, if we try to use it we will get: &lt;em&gt;connect-microsoftteams : Integrated Windows Auth is not supported for managed users.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="connect-microsoftteams"&gt;Connect-MicrosoftTeams&lt;/h2&gt;
&lt;p&gt;Let's focus on this cmdlet, &lt;code&gt;-AadAccessToken&lt;/code&gt; is gone, now we have &lt;code&gt;-AccessTokens&lt;/code&gt;, and according to documentation, this parameter is an string array consisting of &lt;code&gt;&amp;#64;($graphtoken, $teamstoken)&lt;/code&gt;, but how do we request them?&lt;/p&gt;
&lt;p&gt;I am not a Graph expert, I leave that to my good friend &lt;a href="https://twitter.com/AlexHolmeset"&gt;Alex Holmeset&lt;/a&gt;, what follows is what I did based on what I could find in official documentation and Tech Community forums.&lt;/p&gt;
&lt;p&gt;First, I created an application in the Azure AD Portal, for more information, see &lt;a href="https://docs.microsoft.com/graph/auth-register-app-v2"&gt;Register an application with the Microsoft identity platform&lt;/a&gt;, assigned permissions (more on that later), created a client secret and &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/v2-permissions-and-consent"&gt;granted consent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From that step, we will need to collect:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Application (client) ID (a GUID from the Overview page in the Application menu blade)&lt;/li&gt;
&lt;li&gt;The Directory (tenant) name (something.onmicrosoft.com)&lt;/li&gt;
&lt;li&gt;The client secret (you should have copied it when you created it)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AzureAD V2 PowerShell alternative to get the Application (client) ID and Directory (tenant) name:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Powershell"&gt;$application=&amp;quot;NameThatYouGaveToTheApp&amp;quot;
Connect-AzureAD
Get-AzureADApplication -Filter &amp;quot;DisplayName eq '$application'&amp;quot;  | ft AppId
Get-AzureADTenantDetail
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="api-permissions"&gt;API Permissions&lt;/h3&gt;
&lt;p&gt;According to documentation you only need these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For Microsoft Graph API - Delegated permissions
&lt;ul&gt;
&lt;li&gt;&amp;quot;AppCatalog.ReadWrite.All&amp;quot;, &amp;quot;Group.ReadWrite.All&amp;quot;, &amp;quot;User.Read.All&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For Skype and Teams Tenant Admin API
&lt;ul&gt;
&lt;li&gt;&amp;quot;Add all listed&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, only setting those permissions will not be enough as the connect cmdlet will not warn you, but you will get a &lt;em&gt;Authorization_RequestDenied&lt;/em&gt; when running any cmdlet, so I ended up also adding these (trial and error and reviewing the permissions documented in &lt;a href="https://docs.microsoft.com/graph/api/resources/teams-api-overview?view=graph-rest-1.0"&gt;Use the Microsoft Graph API to work with Microsoft Teams&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For Microsoft Graph API - Application permissions
&lt;ul&gt;
&lt;li&gt;&amp;quot;Directory.ReadWrite.All&amp;quot;, &amp;quot;Directory.Read.All&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="getting-the-tokens"&gt;Getting the Tokens&lt;/h3&gt;
&lt;p&gt;Once you get all of that I described earlier, it's time to get the tokens, as I said, I am not a Graph expert, so it was a lot of trial and error, the official documentation for &lt;a href="https://docs.microsoft.com/powershell/module/teams/connect-microsoftteams?view=teams-ps"&gt;Connect-MicrosoftTeams&lt;/a&gt; said&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Powershell"&gt;$graphtoken = #Get MSGraph Token for following for resource  &amp;quot;https://graph.microsoft.com&amp;quot; and scopes &amp;quot;AppCatalog.ReadWrite.All&amp;quot;, &amp;quot;Group.ReadWrite.All&amp;quot;, &amp;quot;User.Read.All&amp;quot;;
$teamstoken = #Get Teams resource token for resource id &amp;quot;48ac35b8-9aa8-4d74-927d-1f4a14a0b239&amp;quot; and scope &amp;quot;user_impersonation&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this &lt;a href="https://techcommunity.microsoft.com/t5/teams-developer/authenticating-with-an-access-token-connect-microsoftteams/m-p/2233794/page/2"&gt;Tech Community thread&lt;/a&gt; also helped.&lt;/p&gt;
&lt;p&gt;For Graph token:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Powershell"&gt;$clientId = &amp;quot;6a7b5598-clientid-a1be-503ee9eda982&amp;quot;  
$clientSecret = &amp;quot;olbc9secretfmWRMC55-.Qet&amp;quot;  
$tenantName = &amp;quot;tenantname.onmicrosoft.com&amp;quot;  
$resource = &amp;quot;https://graph.microsoft.com/&amp;quot;  
$tokenBody = &amp;#64;{  
   Grant_Type    = &amp;quot;client_credentials&amp;quot;  
   Scope         = &amp;quot;https://graph.microsoft.com/.default&amp;quot;  
   Client_Id     = $clientId  
   Client_Secret = $clientSecret  
}   
$graphTokenResponse = Invoke-RestMethod -Uri &amp;quot;https://login.microsoftonline.com/$tenantName/oauth2/v2.0/token&amp;quot; -Method POST -Body $tokenBody
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For Teams token:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Powershell"&gt;$clientId = &amp;quot;6a7b5598-clientid-a1be-503ee9eda982&amp;quot;  
$clientSecret = &amp;quot;olbc9secretfmWRMC55-.Qet&amp;quot; 
$tenantName = &amp;quot;tenantname.onmicrosoft.com&amp;quot;   
$resource = &amp;quot;https://api.interfaces.records.teams.microsoft.com&amp;quot;  
$tokenBody = &amp;#64;{  
   Grant_Type    = &amp;quot;client_credentials&amp;quot;  
   Scope         = &amp;quot;48ac35b8-9aa8-4d74-927d-1f4a14a0b239/.default&amp;quot;  
   Client_Id     = $clientId  
   Client_Secret = $clientSecret
  
}   
$TeamsTokenResponse = Invoke-RestMethod -Uri &amp;quot;https://login.microsoftonline.com/$tenantName/oauth2/v2.0/token&amp;quot; -Method POST -Body $tokenBody
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now we have the tokens in two variables, &lt;code&gt;$graphTokenResponse.access_token&lt;/code&gt; and &lt;code&gt;$TeamsTokenResponse.access_token&lt;/code&gt;, if you parse the tokens in &lt;a href="https://jwt.ms/"&gt;https://jwt.ms/&lt;/a&gt; you should see something like this for Graph token:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;  &amp;quot;roles&amp;quot;: [
    &amp;quot;Directory.ReadWrite.All&amp;quot;,
    &amp;quot;Directory.Read.All&amp;quot;
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and this for the Teams token:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;  &amp;quot;roles&amp;quot;: [
    &amp;quot;application_access_custom_sba_appliance&amp;quot;,
    &amp;quot;application_access&amp;quot;
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="ok-lets-connect-now"&gt;Ok, let's connect now&lt;/h3&gt;
&lt;p&gt;The cmdlet should be used like this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Powershell"&gt;Connect-MicrosoftTeams -AccessTokens &amp;#64;($graphTokenResponse.access_token,$TeamsTokenResponse.access_token) -AccountId meganb&amp;#64;tenantname.onmicrosoft.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything went well, you should be able to run any native Teams cmdlet.&lt;/p&gt;
&lt;h3 id="cs-cmdlets"&gt;-Cs* cmdlets&lt;/h3&gt;
&lt;p&gt;Unfortunately, any -Cs* cmdlets still result in an error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Powershell"&gt;Get-CsOnlineSession : Connecting to remote server api.interfaces.records.teams.microsoft.com failed with the following
error message : The WinRM client cannot process the request. The authentication mechanism requested by the client is
not supported by the server or unencrypted traffic is disabled in the service configuration. Verify the unencrypted
traffic setting in the service configuration or specify one of the authentication mechanisms supported by the server.
To use Kerberos, specify the computer name as the remote destination. Also verify that the client computer and the
destination computer are joined to a domain. To use Basic, specify the computer name as the remote destination,
specify Basic authentication and provide user name and password. Possible authentication mechanisms reported by
server: For more information, see the about_Remote_Troubleshooting Help topic.
At C:\Program Files\WindowsPowerShell\Modules\MicrosoftTeams\2.3.2\net472\SfBORemotePowershellModule.psm1:63 char:22
+     $remoteSession = &amp;amp; (Get-CsOnlineSessionCommand)
+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Get-CsOnlineSession], PSRemotingTransportException
    + FullyQualifiedErrorId : PSRemotingTransportException,Microsoft.Teams.ConfigApi.Cmdlets.GetCsOnlineSession

Invoke-Command : Cannot validate argument on parameter 'Session'. The argument is null or empty. Provide an argument
that is not null or empty, and then try the command again.
At C:\Program Files\WindowsPowerShell\Modules\MicrosoftTeams\2.3.2\net472\SfBORemotePowershellModule.psm1:9490 char:38
+ ...    -Session (Get-PSImplicitRemotingSession -CommandName 'Get-CsOnline ...
+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Invoke-Command], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : ParameterArgumentValidationError,Microsoft.PowerShell.Commands.InvokeCommandCommand
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="conclussion"&gt;Conclussion&lt;/h2&gt;
&lt;p&gt;The changes are welcomed, however I really hope the issue with -Cs* cmdlets is fixed once this release gets General Availability condition, any non-interactive method is very useful for unattended scripting scenarios and it has been long requested by the community.
If you have any other method, other than the described in this blog post to obtain the tokens or if you could make -Cs* cmdlets work please leave me a comment!&lt;/p&gt;
&lt;p&gt;For instructions on how to install this specific version, you can visit &lt;a href="https://msshells.net/"&gt;&amp;gt;_☁ MSShells.net&lt;/a&gt;.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Early in May, a new entry was added to the &lt;a href="https://docs.microsoft.com/microsoftteams/teams-powershell-release-notes"&gt;Official Docs article&lt;/a&gt; for the Microsoft Teams PowerShell module Release notes, we could read:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/cannot-update-from-static-dynamic" />
		<id>https://get-itips.capazero.net/posts/cannot-update-from-static-dynamic</id>
		<title>Public IP address is in use by ipconfig and cannot be updated from static to dynamic.</title>
		<updated>2021-05-05T00:00:00Z</updated>
		<content>&lt;p&gt;Hello, maybe my first blog post specifically about Azure, do not know if this is the best way to fix this error however I couldn't find many results on Internet.
Somehow, do not know how, an IP Address associated to one of my Virtual Machines in Azure was configured as static (I do not remember doing that, maybe when I was playing with the DNS name associated I made the mistake), so when I tried to change it back to dynamic I received:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Public IP address /subscriptions/bd0d2034-4212-436e-9516-xxxxxx/resourceGroups/onpremlab/providers/Microsoft.Network/publicIPAddresses/onpremlabvm01-ip is in use by ipconfig /subscriptions/bd0d2034-4212-436e-9516-xxxxxx/resourceGroups/onpremlab/providers/Microsoft.Network/networkInterfaces/onpremlabvm01189/ipConfigurations/ipconfig1 and cannot be updated from static to dynamic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As everything is an object in Azure, &amp;quot;ipconfig1&amp;quot; was the IP Configuration object belonging to the Network Interface of that VM.&lt;/p&gt;
&lt;p&gt;So what I did was to open the Network interface by going to the Network Interfaces blade in Azure, located the one of that VM and clicked on IP Configurations and obviously saw the static IP Address of the external interface listed there under &amp;quot;Public IP Address&amp;quot;, clicked on it and you can either click &amp;quot;Disassociate&amp;quot;, save the changes or create a new public IP address from this panel.&lt;/p&gt;
&lt;p&gt;If you click disassociate, you need to then go to Public IP addresses blade, locate it and change it to dynamic, now you should be able to do it. Remember to then, go back to the IP Configuration and re-associate the Public IP address object to the IP Configuration.&lt;/p&gt;
&lt;p&gt;Please let me know if you have a better solution! :)&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Hello, maybe my first blog post specifically about Azure, do not know if this is the best way to fix this error however I couldn't find many results on Internet.
Somehow, do not know how, an IP Address associated to one of my Virtual Machines in Azure was configured as static (I do not remember doing that, maybe when I was playing with the DNS name associated I made the mistake), so when I tried to change it back to dynamic I received:&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/hafnium-resources" />
		<id>https://get-itips.capazero.net/posts/hafnium-resources</id>
		<title>HAFNIUM Exchange Server exploits - Resources</title>
		<updated>2021-03-10T00:00:00Z</updated>
		<content>&lt;p&gt;Some days had passed since the public Microsoft announcement about this HAFNIUM exploit and as I have been asked to step to help several customers I would like to list all the resources I used to work on this matter, I will try to update this list with new content as it is being generated.&lt;/p&gt;
&lt;p&gt;3/10/2021: Added two more resources.&lt;/p&gt;
&lt;h1 id="microsoft-resources"&gt;Microsoft resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/"&gt;Microsoft Security Blog entry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probably the official &lt;strong&gt;entry point&lt;/strong&gt; to understand the exploit and should be the initial procedure to take against this vulnerability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/CSS-Exchange/tree/main/Security"&gt;Script to check if your Exchange has been compromised&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not only contains a script that you must execute to understand if your Exchange logs show suspicious entries (Suspicious activity found in % log!), &lt;strong&gt;EVEN IF YOU APPLIED THE PATCHES&lt;/strong&gt;, but also a mitigation script to apply if for some reason you are unable to install the Security Patches.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/safety-scanner-download"&gt;MSERT Safety Scanner tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tool was updated to detect web shells that could have been left by attackers, not enough, but a must-run tool.&lt;/p&gt;
&lt;h1 id="other-resources"&gt;Other resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;An excellent &lt;a href="https://www.msxfaq.de/exchange/update/hafnium-exploit.htm"&gt;MSxFAQ.de blog post&lt;/a&gt;. (In German)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Frank Carius always produces great content, this time is sharing a very complete review of the vulnerability, also with a recommended workflow to follow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A very &lt;a href="https://www.crowdstrike.com/blog/falcon-complete-stops-microsoft-exchange-server-zero-day-exploits/"&gt;interesting analysis of attacking behavior based on log entries and W3WP memory dumps&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I am not affiliated, associated, authorized, endorsed by, or in any way officially connected with this solution)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://krebsonsecurity.com/2021/03/a-basic-timeline-of-the-exchange-mass-hack/"&gt;Basic Timeline by Krebs on Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An excellent compilation of events since the discovery of this vulnerability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://practical365.com/blog/attack-exchange-impetus-move-cloud/"&gt;Practical 365 - Attack on Exchange Servers Gives Impetus to Move Email to the Cloud&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jaapwesselius.com/2021/03/09/rebuild-your-exchange-server-after-hafnium-infection/"&gt;How To Rebuild your Exchange Server (AFTER HAFNIUM INFECTION)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;Some days had passed since the public Microsoft announcement about this HAFNIUM exploit and as I have been asked to step to help several customers I would like to list all the resources I used to work on this matter, I will try to update this list with new content as it is being generated.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/how-to-online-proctoring" />
		<id>https://get-itips.capazero.net/posts/how-to-online-proctoring</id>
		<title>How to take an Online Proctored exam and not go crazy trying</title>
		<updated>2021-02-26T00:00:00Z</updated>
		<content>&lt;p&gt;&lt;img src="/images/how_to_take_online.png" class="img-fluid" alt="introimage" /&gt;&lt;/p&gt;
&lt;p&gt;I have been taking exams on Testing Centers all my life, the Online Proctoring was always an option but I preferred to be on site for several reasons, for example, if the Internet access failed, if the computer failed or anything else, it wouldn't be my fault (or didn't want to worry about that, I only wanted to focus on the exam).&lt;/p&gt;
&lt;p&gt;But... &lt;strong&gt;boom!&lt;/strong&gt; the pandemic came and things changed and now Online Proctoring is THE option to take exams.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hopefully, you have a room at your home where you usually work.&lt;/li&gt;
&lt;li&gt;Remove everything from that room that you do not need for your exam, it's easier to say what you need to keep: &lt;strong&gt;a computer, a webcam, a maybe a glass of water&lt;/strong&gt; if you need (not any liquid, a transparent one, like water, yes I am talking serious here according to &lt;a href="https://twitter.com/MarkVale83"&gt;Mark Vale&lt;/a&gt; experience) and &lt;strong&gt;your ID&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Try to &lt;strong&gt;remove any non-necessary cables&lt;/strong&gt; from the room and the computer/laptop.&lt;/li&gt;
&lt;li&gt;Empty drawers from your desk.&lt;/li&gt;
&lt;li&gt;Try to use &lt;strong&gt;an external Webcam&lt;/strong&gt;, the reason I am telling you this is because the person that will evaluate if you are allowed to take the exam will probably ask you to show your environment, and with a fixed laptop webcam is complicated to move it around.&lt;/li&gt;
&lt;li&gt;If your room is one of these modern desks/home offices filled with multi-displays, multi-microphones, multi-everything, it would be better to find &lt;strong&gt;another room&lt;/strong&gt; in your house to take the exam.&lt;/li&gt;
&lt;li&gt;If you live with someone else, warn them that you are taking an exam and to &lt;strong&gt;keep it quiet&lt;/strong&gt;, no external noises are to be allowed.&lt;/li&gt;
&lt;li&gt;Before start, you will be asked to &lt;strong&gt;take some pictures&lt;/strong&gt; using your mobile phone uploading them to a site, be aware that &lt;strong&gt;the site sometimes crashes&lt;/strong&gt; while you are trying to upload the pictures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Arrive as early as you can&lt;/strong&gt; (the maximum time you can is 30 minutes before) to take into account any trouble that you could face.&lt;/li&gt;
&lt;li&gt;Proctor will reach you probably &lt;strong&gt;by chat&lt;/strong&gt;, if he/she starts asking questions, do not forget that the Exam Agreement is probably showing on the screen... &lt;strong&gt;with a timeout!&lt;/strong&gt; if you do not agree to it &lt;strong&gt;the exam will be canceled&lt;/strong&gt; (that is what happened to me while I was trying to show my environment to the Proctor)
-If you get past all this screening process, you can now &lt;strong&gt;focus only on the exam...&lt;/strong&gt; and also on not to leave your webcam range of capture, that is also a rule that they impose.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This blog post is based on a terrible first experience trying to take an exam, your experience could differ, but in the end, what I wanted to do is try to improve the first experience of others.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;&lt;img src="/images/how_to_take_online.png" class="img-fluid" alt="introimage"&gt;&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/teams-pnp" />
		<id>https://get-itips.capazero.net/posts/teams-pnp</id>
		<title>PnP Teams Cmdlets Review</title>
		<updated>2020-10-08T00:00:00Z</updated>
		<content>&lt;p&gt;&lt;img src="/images/TeamsPNP.png" class="img-fluid" alt="introimage" /&gt;&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;On July 2020, the great Community of &lt;a href="https://docs.microsoft.com/powershell/sharepoint/sharepoint-pnp/sharepoint-pnp-cmdlets?view=sharepoint-ps"&gt;SharePoint Patterns and Practices PowerShell&lt;/a&gt; released cmdlets to manage Microsoft Teams aspects, I have been using PnP cmdlets for SharePoint for a while and they are really powerfull and best of all, they are open sourced and community-maintained, so I was curious to try these Teams-related cmdlets.&lt;/p&gt;
&lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt;
&lt;h2 id="pnp-module-version"&gt;PnP Module Version&lt;/h2&gt;
&lt;p&gt;Be sure to be running the latest version of the SharePoint PnP PowerShell Online module, to this date, that is 3.25.2009.1.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_versionimage.png" class="img-fluid" alt="versionimage" /&gt;&lt;/p&gt;
&lt;p&gt;also, we can check, which commands are currently available for Teams related tasks running&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-Command -Module *PnP* -Name &amp;quot;*Teams*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and those are&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Add-PnPTeamsChannel                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Add-PnPTeamsTab                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Add-PnPTeamsTeam                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Add-PnPTeamsUser                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsApp                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsChannel                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsChannelMessage                         3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsTab                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsTeam                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Get-PnPTeamsUser                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          New-PnPTeamsApp                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          New-PnPTeamsTeam                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          New-PnPTenantSequenceTeamSite                      3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsApp                                 3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsChannel                             3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsTab                                 3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsTeam                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Remove-PnPTeamsUser                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsChannel                                3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsTab                                    3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsTeam                                   3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsTeamArchivedState                      3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Set-PnPTeamsTeamPicture                            3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Submit-PnPTeamsChannelMessage                      3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Sync-PnPAppToTeams                                 3.25.20... SharePointPnPPowerShellOnline
Cmdlet          Update-PnPTeamsApp                                 3.25.20... SharePointPnPPowerShellOnline
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="graph-api-permissions"&gt;Graph API Permissions&lt;/h2&gt;
&lt;p&gt;To run any of those cmdlets, we will need special Graph API Permissions, thankfully, those are documented at Microsoft Docs, for example for the &lt;code&gt;Get-PnPTeamsTeam&lt;/code&gt; cmdlet:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_graphperm.png" class="img-fluid" alt="graphapipermission" /&gt;&lt;/p&gt;
&lt;p&gt;We will need either Group.Read.All or Group.ReadWrite.All.&lt;/p&gt;
&lt;h2 id="connecting-to-pnp-online"&gt;Connecting to PnP Online&lt;/h2&gt;
&lt;p&gt;If we try to use any &lt;em&gt;PnPTeams&lt;/em&gt; cmdlet without the required permissions we will receive an error like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Get-PnPTeamsTeam : Unable to retrieve a token for MicrosoftGraph. Ensure you connect using one of the
Connect-PnPOnline commands which uses the -ClientId argument or use Connect-PnPOnline -Scopes to connect.
At line:1 char:1
+ Get-PnPTeamsTeam
+ ~~~~~~~~~~~~~~~~
    + CategoryInfo          : ConnectionError: (:) [Get-PnPTeamsTeam], InvalidOperationException
    + FullyQualifiedErrorId : NO_OAUTH_TOKEN,PnP.PowerShell.Commands.Graph.GetTeamsTeam
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The error message is pretty clear, we must connect using the &lt;code&gt;-ClientId&lt;/code&gt; or  &lt;code&gt;-Scopes&lt;/code&gt;, this time, I will use the &lt;code&gt;-Scopes&lt;/code&gt; parameter, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Connect-PnPOnline -Scopes Group.ReadWrite.All
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first time that you run that cmdlet, you will be presented with the typical app consent window, to approve the use of the PnP Management Shell on your tenant, that is totally expected if you are used to work with the Graph API.&lt;/p&gt;
&lt;p&gt;Note that I used only one scope but you can specify more than one, for more information refer to the &lt;a href="https://docs.microsoft.com/powershell/module/sharepoint-pnp/connect-pnponline?view=sharepoint-ps"&gt;official documentation of the cmdlet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that we are connected, let's move on and test the Teams cmdlets, for a more detailed guide on how to connect there is an excellent &lt;a href="https://www.erwinmcm.com/pnp-teams-cmdlets/"&gt;blog post&lt;/a&gt; from Erwin van Hunen, one of the Maintainers of PnP PowerShell.&lt;/p&gt;
&lt;h1 id="the-teams-pnp-cmdlets"&gt;The Teams PnP cmdlets&lt;/h1&gt;
&lt;p&gt;Let's start with, what seems to be the most simple one &lt;code&gt;Get-PnPTeamsTeam&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_getteam.png" class="img-fluid" alt="getpnpteamsteam" /&gt;&lt;/p&gt;
&lt;p&gt;Hey, wait a minute, that looks familiar, yes, it is pretty similar output as if we would run &lt;code&gt;Get-Team&lt;/code&gt; using the &lt;a href="https://docs.microsoft.com/microsoftteams/teams-powershell-overview"&gt;Official Microsoft Teams PowerShell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Only when we ask for the members of the output object we identify differences in the output:&lt;/p&gt;
&lt;p&gt;For the PnP Module version&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS C:\&amp;gt; $teams[0] | Get-Member
   TypeName: PnP.PowerShell.Commands.Model.Teams.Team

Name              MemberType Definition
----              ---------- ----------
Equals            Method     bool Equals(System.Object obj)
GetHashCode       Method     int GetHashCode()
GetType           Method     type GetType()
ToString          Method     string ToString()
Apps              Property   System.Collections.Generic.List[PnP.PowerShell.Commands.Model.Teams.TeamAppInstance] Apps {get;}
Classification    Property   string Classification {get;set;}
CloneFrom         Property   string CloneFrom {get;set;}
Description       Property   string Description {get;set;}
DiscoverySettings Property   PnP.PowerShell.Commands.Model.Teams.TeamDiscoverySettings DiscoverySettings {get;set;}
DisplayName       Property   string DisplayName {get;set;}
FunSettings       Property   PnP.PowerShell.Commands.Model.Teams.TeamFunSettings FunSettings {get;set;}
GroupId           Property   string GroupId {get;set;}
GuestSettings     Property   PnP.PowerShell.Commands.Model.Teams.TeamGuestSettings GuestSettings {get;set;}
IsArchived        Property   System.Nullable[bool] IsArchived {get;set;}
MailNickname      Property   string MailNickname {get;set;}
MemberSettings    Property   PnP.PowerShell.Commands.Model.Teams.TeamMemberSettings MemberSettings {get;set;}
MessagingSettings Property   PnP.PowerShell.Commands.Model.Teams.TeamMessagingSettings MessagingSettings {get;set;}
Security          Property   PnP.PowerShell.Commands.Model.Teams.TeamSecurity Security {get;set;}
Specialization    Property   System.Nullable[PnP.PowerShell.Commands.Model.Teams.TeamSpecialization] Specialization {get;set;}
Visibility        Property   System.Nullable[PnP.PowerShell.Commands.Model.Teams.GroupVisibility] Visibility {get;set;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the Microsoft Teams PowerShell module&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS C:\&amp;gt; $teams[0] | Get-Member
   TypeName: Microsoft.TeamsCmdlets.PowerShell.Custom.Model.TeamSettings

Name                              MemberType Definition
----                              ---------- ----------
Equals                            Method     bool Equals(System.Object obj)
GetHashCode                       Method     int GetHashCode()
GetType                           Method     type GetType()
ToJsonString                      Method     string ToJsonString()
ToString                          Method     string ToString()
ToTeam                            Method     Microsoft.TeamsCmdlets.PowerShell.Custom.Model.Team ToTeam()
AllowAddRemoveApps                Property   System.Nullable[bool] AllowAddRemoveApps {get;set;}
AllowChannelMentions              Property   System.Nullable[bool] AllowChannelMentions {get;set;}
AllowCreateUpdateChannels         Property   System.Nullable[bool] AllowCreateUpdateChannels {get;set;}
AllowCreateUpdateRemoveConnectors Property   System.Nullable[bool] AllowCreateUpdateRemoveConnectors {get;set;}
AllowCreateUpdateRemoveTabs       Property   System.Nullable[bool] AllowCreateUpdateRemoveTabs {get;set;}
AllowCustomMemes                  Property   System.Nullable[bool] AllowCustomMemes {get;set;}
AllowDeleteChannels               Property   System.Nullable[bool] AllowDeleteChannels {get;set;}
AllowGiphy                        Property   System.Nullable[bool] AllowGiphy {get;set;}
AllowGuestCreateUpdateChannels    Property   System.Nullable[bool] AllowGuestCreateUpdateChannels {get;set;}
AllowGuestDeleteChannels          Property   System.Nullable[bool] AllowGuestDeleteChannels {get;set;}
AllowOwnerDeleteMessages          Property   System.Nullable[bool] AllowOwnerDeleteMessages {get;set;}
AllowStickersAndMemes             Property   System.Nullable[bool] AllowStickersAndMemes {get;set;}
AllowTeamMentions                 Property   System.Nullable[bool] AllowTeamMentions {get;set;}
AllowUserDeleteMessages           Property   System.Nullable[bool] AllowUserDeleteMessages {get;set;}
AllowUserEditMessages             Property   System.Nullable[bool] AllowUserEditMessages {get;set;}
Archived                          Property   System.Nullable[bool] Archived {get;set;}
Classification                    Property   string Classification {get;set;}
Description                       Property   string Description {get;set;}
DisplayName                       Property   string DisplayName {get;set;}
GiphyContentRating                Property   System.Nullable[Microsoft.TeamsCmdlets.PowerShell.Custom.Model.GiphyRatingType] GiphyCon...
GroupId                           Property   string GroupId {get;set;}
MailNickName                      Property   string MailNickName {get;set;}
ShowInTeamsSearchAndSuggestions   Property   System.Nullable[bool] ShowInTeamsSearchAndSuggestions {get;set;}
Visibility                        Property   string Visibility {get;set;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, under the hood, a lot of differences, and that is welcomed, why? because we will be able to have an alternative to the official Microsoft Teams PowerShell module in case this one runs short on something and best of all, these ones are &lt;a href="https://github.com/pnp/PnP-PowerShell/tree/master/Commands/Teams"&gt;open source&lt;/a&gt;, so if we want, we can dig into how they are developed and contribute to them.&lt;/p&gt;
&lt;p&gt;Let's try now some cmdlets that aren't available on the official Teams Module like &lt;code&gt;Get-PnPTeamsChannelMessage&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_getmessages.png" class="img-fluid" alt="getpnpteamschannelmessage" /&gt;&lt;/p&gt;
&lt;p&gt;Pretty neat, huh?&lt;/p&gt;
&lt;p&gt;Hey, look at this cmdlet, &lt;code&gt;Submit-PnPTeamsChannelMessage&lt;/code&gt;, can I post a message from PowerShell? Nice! Let's try it!&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Submit-PnPTeamsChannelMessage -Team &amp;quot;Sales and Marketing&amp;quot; -Channel General -Message &amp;quot;Developers, Developers, Developers!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="/images/pnpteams_postmessage.png" class="img-fluid" alt="getpnpteamschannelmessage" /&gt;&lt;/p&gt;
&lt;p&gt;Loved it!&lt;/p&gt;
&lt;p&gt;That's all for part 1 of these series, in part 2, I'll keep exploring what these cmdlets can provide to Teams Administrators.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;&lt;img src="/images/TeamsPNP.png" class="img-fluid" alt="introimage"&gt;&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/s4b-reconnect-teams" />
		<id>https://get-itips.capazero.net/posts/s4b-reconnect-teams</id>
		<title>Enable-CsOnlineSessionForReconnection... on Teams PowerShell 1.1.6</title>
		<updated>2020-09-17T00:00:00Z</updated>
		<content>&lt;p&gt;&lt;img src="/images/TeamsS4BReconnect.png" class="img-fluid" alt="introimage" /&gt;&lt;/p&gt;
&lt;p&gt;Microsoft has just released &lt;a href="https://www.powershellgallery.com/packages/MicrosoftTeams/1.1.6"&gt;Teams PowerShell module version 1.1.6&lt;/a&gt;, a version that includes the Skype for Business Online Connector built-in, so, it is a requirement to uninstall it, if you had it installed on your computer.&lt;/p&gt;
&lt;p&gt;Thanks to a great &lt;a href="https://twitter.com/AlexHolmeset"&gt;Alexander Holmeset&lt;/a&gt;'s heads-up, that identified that a very handy PowerShell cmdlet called  &lt;strong&gt;Enable-CsOnlineSessionForReconnection&lt;/strong&gt;, was not anymore present, I decided to investigate if we could get the functionality back, more information on this cmdlet on this &lt;a href="https://ucstatus.com/2019/11/25/skypeonlineconnector-session-reconnection/"&gt;excellent blog post&lt;/a&gt; by Randy Chapman, but essentially, it allows you to reconnect the Skype For Business session automatically when it time-outs after an hour.&lt;/p&gt;
&lt;p&gt;So I downloaded the Skype for Business Online Connector bits on another computer and tried to find where was it, finally found it inside C:\Program Files\Common Files\Skype for Business Online\Modules\SkypeOnlineConnector\SkypeOnlineConnectorStartup.psm1 and decided to give it a try &amp;quot;as is&amp;quot;, but it threw some errors and did not work as expected, so I realized I had to make some adjustments to it, specifically the way it recognizes if the module is already loaded.&lt;/p&gt;
&lt;p&gt;Here is the script, based on the original function, save it as Enable-CsOnlineSessionForReconnection.ps1&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$global:CsOnlineSessionInputParams=$UserCredential
$modules = Get-Module tmp_*
$csModuleUrl = &amp;quot;/OcsPowershellOAuth&amp;quot;
$isSfbPsModuleFound = $false;

    foreach ($module in $modules)
    {
        [string] $moduleUrl = $module.Description
        [int] $queryStringIndex = $moduleUrl.IndexOf(&amp;quot;?&amp;quot;)

        if ($queryStringIndex -gt 0)
        {
            $moduleUrl = $moduleUrl.SubString(0,$queryStringIndex)
        }

        if ($moduleUrl.Contains($csModuleUrl))
        {
            $isSfbPsModuleFound = $true
            &amp;amp; $module { ${function:Get-PSImplicitRemotingSession} = `
            {
                param(
                    [Parameter(Mandatory = $true, Position = 0)]
                    [string]
                    $commandName
                )

                if (($script:PSSession -eq $null) -or ($script:PSSession.Runspace.RunspaceStateInfo.State -ne 'Opened'))
                {
                    Set-PSImplicitRemotingSession `
                        (&amp;amp; $script:GetPSSession `
                            -InstanceId $script:PSSession.InstanceId.Guid `
                            -ErrorAction SilentlyContinue )
                }
                if (($script:PSSession -ne $null) -and ($script:PSSession.Runspace.RunspaceStateInfo.State -eq 'Disconnected'))
                {
                    # If we are handed a disconnected session, try re-connecting it before creating a new session.
                    Set-PSImplicitRemotingSession `
                        (&amp;amp; $script:ConnectPSSession `
                            -Session $script:PSSession `
                            -ErrorAction SilentlyContinue)
                }
                if (($script:PSSession -eq $null) -or ($script:PSSession.Runspace.RunspaceStateInfo.State -ne 'Opened'))
                {
                    Write-PSImplicitRemotingMessage ('Recreating a new remote powershell session (implicit) for command: &amp;quot;{0}&amp;quot; ...' -f $commandName)

                    if ((Test-Path variable:global:CsOnlineSessionInputParams) -ne $true)
                    {
                        throw 'Unable find input parameters from global scope, will not be able to recreate session'
                    }

                    if ((Test-Path variable:global:CsOnlineSessionRetryAttempt) -ne $true)
                    {
                        $global:CsOnlineSessionRetryAttempt = 1
                    }
                    else
                    {
                        $global:CsOnlineSessionRetryAttempt = $global:CsOnlineSessionRetryAttempt + 1
                    }

                    $session = New-CsOnlineSession -Credential &amp;#64;global:CsOnlineSessionInputParams

                    if ($session -ne $null)
                    {
                        Set-PSImplicitRemotingSession -CreatedByModule $true -PSSession $session
                    }

                    #note - this magic string has to be same as above, search for this string above, it will become clear
                    #because this will be in callback handler, I am not putting this into const variable
                    $sfbPsSessionPrefix = &amp;quot;SfBPowerShellSession_&amp;quot;
                    #sessions originally created will have the below one
                    $sfbPsSessionRegEx1 = $sfbPsSessionPrefix + &amp;quot;*&amp;quot;
                    #sessions created later will get their name changed by powershell during Set-PSImplicitRemotingSession
                    #and so it will have names like &amp;quot;Session for implicit remoting module at C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Temp\tmp_tsdvdhga.20e\tmp_tsdvdhga.20e.psm1&amp;quot;
                    #tmp_tsdvdhga.20e being the module name
                    $sfbPsSessionRegEx2 = Get-PSImplicitRemotingModuleName
                    $sfbPsSessionRegEx2 = &amp;quot;*&amp;quot; + $sfbPsSessionRegEx2 + &amp;quot;*&amp;quot;
                    #delete broken sessions - begin
                    $psBroken = Get-PSSession | where-object {($_.Name -like $sfbPsSessionRegEx1 -or $_.Name -like $sfbPsSessionRegEx2) -and $_.State -like &amp;quot;*Broken*&amp;quot;}
                    $psClosed = Get-PSSession | where-object {($_.Name -like $sfbPsSessionRegEx1 -or $_.Name -like $sfbPsSessionRegEx2) -and $_.State -like &amp;quot;*Closed*&amp;quot;}

                    $psBroken | Remove-PSSession;
                    $psClosed | Remove-PSSession;
                    #delete broken sessions - end
                }
                if (($script:PSSession -eq $null) -or ($script:PSSession.Runspace.RunspaceStateInfo.State -ne 'Opened'))
                {
                    throw 'No session has been associated with this implicit remoting module'
                }

                return [Management.Automation.Runspaces.PSSession]$script:PSSession
            }}
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and use it like this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;$userCredential = Get-Credential
#Connect to Microsoft Teams
Connect-MicrosoftTeams -Credential $credential

$sfbSession = New-CsOnlineSession -Credential $userCredential
Import-PsSession $sfbSession

.\Enable-CsOnlineSessionForReconnection.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should be enough for it to make it work as before, I tested it and it worked for me, please be aware that this is provided as is without any guarantee, let me know if it works four you!&lt;/p&gt;
</content>
		<summary>&lt;p&gt;&lt;img src="/images/TeamsS4BReconnect.png" class="img-fluid" alt="introimage"&gt;&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/teams-preview-wsl" />
		<id>https://get-itips.capazero.net/posts/teams-preview-wsl</id>
		<title>Running Teams PowerShell GA module and Preview module side by side using WSL</title>
		<updated>2020-08-12T00:00:00Z</updated>
		<content>&lt;p&gt;&lt;img src="/images/TeamsWSL.png" class="img-fluid" alt="introimage" /&gt;&lt;/p&gt;
&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is somewhat related to my last post, titled &lt;a href="https://get-itips.capazero.net/posts/teams-ps-for-pscore"&gt;Teams PowerShell module is now compatible with PowerShell Core!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a Docs contributor I have to constantly test a lot of PowerShell modules, specially, the Teams PowerShell module, and, as the line between the General Availability version and the Preview version of the module is a little blurry, users ask questions all the time, which feature, cmdlet or parameter is in which module version.&lt;/p&gt;
&lt;p&gt;I've been running an Azure VM installed with the Preview version of the PowerShell module, however it takes some time to start it, RDP into it and finally use the module, so I thought how awesome could be to run both versions of this PowerShell module on the same computer, as you can not do that natively in the same Operating System installation, I decided to take advantage of WSL (Windows Subsystem for Linux) to accomplish that.&lt;/p&gt;
&lt;h1 id="credits"&gt;Credits&lt;/h1&gt;
&lt;p&gt;I used several blog and Docs articles to get this working so this is mainly a post to summarize them all, I must give the credit to:&lt;/p&gt;
&lt;p&gt;Official Docs article located here &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Windows Subsystem for Linux Installation Guide for Windows 10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saggie Haim Blog article &lt;a href="https://www.saggiehaim.net/powershell/install-powershell-7-on-wsl-and-ubuntu/"&gt;Install PowerShell 7 On WSL and Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sebastiaan Dammann Blog article &lt;a href="https://damsteen.nl/blog/2018/08/29/installing-wsl-manually-on-non-system-drive"&gt;How-to: Installing WSL manually on a non-system drive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/unixterminal"&gt;Hayden Barnes&lt;/a&gt; for the Ubuntu 20.04 image link!&lt;/p&gt;
&lt;h1 id="install-wsl"&gt;Install WSL&lt;/h1&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart and set WSL2 as default WSL version&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;wsl --set-default-version 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you receive an error in this step &lt;em&gt;WSL 2 requires an update to its kernel component. For information please visit &lt;a href="https://aka.ms/wsl2kernel"&gt;https://aka.ms/wsl2kernel&lt;/a&gt;&lt;/em&gt; follow the steps outlined in that URL before continuing.&lt;/p&gt;
&lt;h1 id="install-linux-distribution-for-wsl"&gt;Install Linux Distribution for WSL&lt;/h1&gt;
&lt;p&gt;I didn't want the Linux installation to be on the System Drive so I created a folder on D: drive and CD into it for the next steps and also I chose Ubuntu 20.04-LTS as the Linux distro however you can choose whatever distro you like that is supported by PowerShell Core.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;Invoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile D:\wsl\Ubuntu.appx -UseBasicParsing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This step will take some time to download the Linux distro, once it finishes, let's rename the downloaded image&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;cd D:\wsl\
Rename-Item .\Ubuntu.appx Ubuntu.zip
Expand-Archive .\Ubuntu.zip -Verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now let's install Ubuntu calling the setup binary&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;.\ubuntu2004.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will ask  you for a UNIX username, a password for it and if everything goes well you should see something like this as the setup will directly get you into the Linux virtual machine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Welcome to Ubuntu 20.04 LTS (GNU/Linux 4.19.104-microsoft-standard x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Aug 12 19:17:05 -03 2020

  System load:  1.67               Processes:             8
  Usage of /:   0.4% of 250.98GB   Users logged in:       0
  Memory usage: 1%                 IPv4 address for eth0: 172.26.225.227
  Swap usage:   0%

0 updates can be installed immediately.
0 of these updates are security updates.

yourUser&amp;#64;yourHostname: $
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not exit Ubuntu and run the next section inside of it.&lt;/p&gt;
&lt;h1 id="powershell-core-installation"&gt;PowerShell Core installation&lt;/h1&gt;
&lt;p&gt;Create a directory for PowerShell install and change to it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ sudo mkdir /usr/share/PowerShell
yourUser&amp;#64;yourHostname: $ cd /usr/share/PowerShell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's download the current stable release available (check &lt;a href="https://github.com/PowerShell/PowerShell/releases/"&gt;https://github.com/PowerShell/PowerShell/releases/&lt;/a&gt; for updated versions)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ sudo wget https://github.com/PowerShell/PowerShell/releases/download/v7.0.3/powershell-7.0.3-linux-x64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expand this archive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ sudo tar xzvf powershell-7.0.3-linux-x64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the PowerShell directory to the PATH environment variable&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ cd #HOME
yourUser&amp;#64;yourHostname: $ nano .profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add to the end&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PATH=&amp;quot;$PATH:/usr/share/PowerShell&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;save it and exit nano (at least it is not VIm!)&lt;/p&gt;
&lt;p&gt;exit Ubuntu&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ exit
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id="microsoft-teams-preview-module-installation"&gt;Microsoft Teams Preview module installation&lt;/h1&gt;
&lt;p&gt;If you are like me and use Windows Terminal, it will automatically recognize the installation and add it to the available Shell options, in case you do not, fire up the Ubuntu 20-04 LTS WSL running&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;.\ubuntu2004.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now run&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yourUser&amp;#64;yourHostname: $ pwsh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;that should get you to PowerShell 7.0.3 on Linux, you should see&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PowerShell 7.0.3
Copyright (c) Microsoft Corporation. All rights reserved.

https://aka.ms/powershell
Type 'help' to get help.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now, let's install the currently most updated version of the Preview module (1.1.-3 preview at the time of writing this blog post but you can check &lt;a href="https://www.powershellgallery.com/packages/MicrosoftTeams/"&gt;https://www.powershellgallery.com/packages/MicrosoftTeams/&lt;/a&gt; for updates, remember, they have the -preview tag in the name)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;PS /mnt/c/Users/agorz&amp;gt; Install-Module MicrosoftTeams -AllowPrerelease -RequiredVersion 1.1.3-preview
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Accept the installation from an untrusted repository and if everything goes well, you should be able to use Teams PowerShell Preview as explained &lt;a href="https://get-itips.capazero.net/posts/teams-ps-for-pscore"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;&lt;img src="/images/TeamsWSL.png" class="img-fluid" alt="introimage"&gt;&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/teams-ps-for-pscore" />
		<id>https://get-itips.capazero.net/posts/teams-ps-for-pscore</id>
		<title>Teams PowerShell module is now compatible with PowerShell Core!</title>
		<updated>2020-06-25T00:00:00Z</updated>
		<content>&lt;p&gt;Is it?, well, let's see.&lt;/p&gt;
&lt;p&gt;Support for PowerShell Core (AKA PowerShell 7) was apparently added silently to Microsoft Teams PowerShell module version since 1.0.6 (at the time of this writing the current stable module version is 1.0.7).&lt;/p&gt;
&lt;p&gt;This image shows what the PowerShell gallery site says currently&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_7.png" class="img-fluid" alt="PsGallery_Now" /&gt;&lt;/p&gt;
&lt;p&gt;and this is what it said for older versions.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_6.png" class="img-fluid" alt="PsGallery_Older" /&gt;&lt;/p&gt;
&lt;p&gt;No big announcements AFAIK.&lt;/p&gt;
&lt;h1 id="does-it-work"&gt;Does it work?&lt;/h1&gt;
&lt;h2 id="connect-microsoftteams"&gt;Connect-MicrosoftTeams&lt;/h2&gt;
&lt;p&gt;I usually use a PSCredential object to connect to every PowerShell module against Microsoft services, so I tried and this is what I got&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_1.png" class="img-fluid" alt="connectMsTeamsError" /&gt;&lt;/p&gt;
&lt;p&gt;Essentially, the error is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connect-MicrosoftTeams: password_required_for_managed_user: Password is required for managed user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It does not work when passing a PSCredential object as parameter for -Credential, apparently, this has something to do with Azure AD authentication libraries, more information &lt;a href="https://github.com/AzureAD/azure-activedirectory-library-for-dotnet/issues/1478"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I could report this to the Product Team and now they are aware of this behaviour and working on it, they told me to fallback to Device Auth:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_2.png" class="img-fluid" alt="connectMsTeamsDeviceAuth" /&gt;&lt;/p&gt;
&lt;p&gt;a lot of logging outputted to the console window&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_3.png" class="img-fluid" alt="connectMsTeamsDeviceAuth" /&gt;&lt;/p&gt;
&lt;p&gt;but eventually connects&lt;/p&gt;
&lt;h2 id="other-cmdlets-after-connection"&gt;Other cmdlets after connection&lt;/h2&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_4.png" class="img-fluid" alt="connectMsTeamsDeviceAuth" /&gt;&lt;/p&gt;
&lt;p&gt;again, a lot of logging in the console, but once connected, everything seems to work the same as with Windows Powershell&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/teams_pscore_5.png" class="img-fluid" alt="connectMsTeamsDeviceAuth" /&gt;&lt;/p&gt;
&lt;p&gt;This is a big step into modernizing Microsoft Teams PowerShell module, it will surely help to integrate the module to newer methods of automatization, from any Operating System, I salute the Product Team for all the hard work done, hopefully, the Credential error will be fixed soon.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Is it?, well, let's see.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/teams-msi-links" />
		<id>https://get-itips.capazero.net/posts/teams-msi-links</id>
		<title>Getting past Teams MSI versions</title>
		<updated>2020-06-12T00:00:00Z</updated>
		<content>&lt;p&gt;If you use the Microsoft Teams msi version and are looking for a past version for any reason, you can use this method, &amp;quot;hacking&amp;quot; into the following url, replace the required strings and get the desired version of the msi&lt;/p&gt;
&lt;h2 id="for-32-bit-version"&gt;For 32-bit version&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;https://statics.teams.cdn.office.net/production-windows/VERSION/Teams_windows.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;For example&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://statics.teams.cdn.office.net/production-windows/1.3.00.4461/Teams_windows.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="for-64-bit-version"&gt;For 64-bit version&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;https://statics.teams.cdn.office.net/production-windows-x64/VERSION/Teams_windows_x64.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;For example&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://statics.teams.cdn.office.net/production-windows-x64/1.3.00.4461/Teams_windows_x64.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope this is useful for anyone.&lt;/p&gt;
</content>
		<summary>&lt;p&gt;If you use the Microsoft Teams msi version and are looking for a past version for any reason, you can use this method, "hacking" into the following url, replace the required strings and get the desired version of the msi&lt;/p&gt;</summary>
	</entry>
	<entry>
		<link href="https://get-itips.capazero.net/posts/what-is-missing-from-linkedin" />
		<id>https://get-itips.capazero.net/posts/what-is-missing-from-linkedin</id>
		<title>What's missing from LinkedIn</title>
		<updated>2020-02-04T00:00:00Z</updated>
		<content>&lt;p&gt;Usually, when someone adds me as a contact on LinkedIn, I expect a chat message including some introductory reason on why this person thinks it will be productive to add me as his/her contact, however, most of the time, that does not happens, so I make the first move and chat this person to find out: who are you? how did you found me? what is your role and how do you think we can work or benefit together in our professional lives?&lt;/p&gt;
&lt;p&gt;Most of the time, I don't get a reply back, some other times, I just get some basic reply and in the least case, I do get an interesting exchange where we both could profit in the future. Does that ring a bell for you?&lt;/p&gt;
&lt;p&gt;This has been a long standing issue of LinkedIn since it was created, it is no news, a lot of people are only interested in growing its quantity of connections and not its quality, maybe that is the reason the follow system was added, which I appraise, it is an ideal way of getting news about someone's activity: why adding someone to your network when you do not expect doing business with?&lt;/p&gt;
&lt;h2 id="the-other-rising-issue"&gt;The other rising issue&lt;/h2&gt;
&lt;p&gt;LinkedIn should buy a hiring talent platform like UpWork or at least, incorporate some of its functionality.&lt;/p&gt;
&lt;p&gt;Let's say that the connection works and you are hired or hire someone for a project, that is the end of the story on LinkedIn, you will have to move to another platform, another silo to agree on the terms of the contract, track the project progress and tasks and qualify the work of the other party.&lt;/p&gt;
&lt;p&gt;Why would I need to do this outside of LinkedIn if I got started on LinkedIn? That situation is a lost opportunity for everyone involved, even the most important professional network to date.&lt;/p&gt;
&lt;p&gt;Profiles should be re-designed completely.&lt;/p&gt;
&lt;p&gt;They do not give you the chance to clearly communicate that you work independent/freelancer or even as a digital nomad. They expect you to work for a company on a fixed location, also, there is not a field to inform your current time zone.&lt;/p&gt;
&lt;p&gt;Times are changing... no, excuse me, times already changed, I love LinkedIn, but let me tell you that those old structures should not be the only option anymore.&lt;/p&gt;
&lt;p&gt;I want to end this article with an anecdote, the other day I asked my sister in law (a centennial) if she had a LinkedIn profile and she replied: Link what?&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Usually, when someone adds me as a contact on LinkedIn, I expect a chat message including some introductory reason on why this person thinks it will be productive to add me as his/her contact, however, most of the time, that does not happens, so I make the first move and chat this person to find out: who are you? how did you found me? what is your role and how do you think we can work or benefit together in our professional lives?&lt;/p&gt;</summary>
	</entry>
</feed>